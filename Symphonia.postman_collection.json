{
	"info": {
		"_postman_id": "a8e36ff4-890f-4487-91e4-01ab00a3e324",
		"name": "Symphonia",
		"description": "## error response\n\nif a request went wrong due to misuse or server error an error response will be sent it will have two fields\n\n<table>\n\t<th>\n\tfield\n\t</th>\n\t<th>\n\tdescription\n\t</th>\n\t<th>\n\tpossible values\n\t</th>\n\t<tr>\n\t\t<td><code>status</code></td>\n\t\t<td>it describes the source of the error if value is <code>fail</code> it means the error comes from the sender of the request else if its value was <code>error</code> it means it's a server error and should return for the back end developers to solve that issue</td>\n\t\t<td><code>error</code> | <code>fail</code></td>\n\t</tr>\n\t<tr>\n\t\t<td><code>msg</code> or <code>message</code></td>\n\t\t<td>it contains information about the error which is safe to send to the user as it doesn't contain any sensetive data</td>\n\t\t<td>you have to be logged in!</td>\n\t</tr>\n</table>",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Album",
			"item": [
				{
					"name": "Get Several Albums",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}api/v1/albums",
							"host": [
								"{{URL}}api"
							],
							"path": [
								"v1",
								"albums"
							]
						}
					},
					"response": [
						{
							"name": "Get Several Albums",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}api/v1/albums",
									"host": [
										"{{URL}}api"
									],
									"path": [
										"v1",
										"albums"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "X-DNS-Prefetch-Control",
									"value": "off"
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=15552000; includeSubDomains"
								},
								{
									"key": "X-Download-Options",
									"value": "noopen"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-XSS-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "ETag",
									"value": "W/\"4db-4pUmNG+AKRzwTau1GJnQ0IJoNP0\""
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip"
								},
								{
									"key": "Date",
									"value": "Tue, 07 Apr 2020 20:33:25 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"tracks\": [\n            \"5e7d334860cd930408a5f995\",\n            \"5e8a1e0f7937ec4d40c6deba\",\n            \"5e8a1e727937ec4d40c6debb\"\n        ],\n        \"releaseDate\": \"2020-04-07T20:21:40.674Z\",\n        \"_id\": \"5e701f4d2672a63a60573a02\",\n        \"name\": \"El Pintor\",\n        \"year\": 2014,\n        \"image\": \"https://zasymphonia.ddns.net/api/v1/images/albums/El-Pintor.jpg\",\n        \"artist\": \"5e82a48054660672fd699883\"\n    },\n    {\n        \"tracks\": [\n            \"5e7d2dc03429e24340ff1396\",\n            \"5e7d2ddd3429e24340ff1397\",\n            \"5e7d2e023429e24340ff1398\"\n        ],\n        \"releaseDate\": \"2020-04-07T20:21:40.674Z\",\n        \"_id\": \"5e701fdf2672a63a60573a06\",\n        \"name\": \"The Slow Rush\",\n        \"year\": 2020,\n        \"image\": \"https://zasymphonia.ddns.net/api/v1/images/albums/The-Slow-Rush.jpg\",\n        \"artist\": \"5e8137aa54660672fd699882\"\n    },\n    {\n        \"tracks\": [\n            \"5e8a1e767937ec4d40c6debc\",\n            \"5e8a1e937937ec4d40c6debd\",\n            \"5e8a1e9a7937ec4d40c6debe\"\n        ],\n        \"releaseDate\": \"2020-04-07T20:21:40.674Z\",\n        \"_id\": \"5e794163c01c024ecc3c31d3\",\n        \"name\": \"Violent Rains\",\n        \"year\": 2015,\n        \"image\": \"https://zasymphonia.ddns.net/api/v1/images/albums/Violent-Rains.jpg\",\n        \"artist\": \"5e84b966681ae439edfc1d6f\"\n    },\n    {\n        \"tracks\": [\n            \"5e8a1ea07937ec4d40c6debf\",\n            \"5e8a37d0d56ea252c3860a1a\",\n            \"5e8a39f24e11cd46c8bde654\"\n        ],\n        \"releaseDate\": \"2020-04-07T20:21:40.674Z\",\n        \"_id\": \"5e89f33375bcc40cc4b5a736\",\n        \"name\": \"TRST\",\n        \"year\": 2012,\n        \"image\": \"https://zasymphonia.ddns.net/api/v1/images/albums/TRST.jpg\",\n        \"artist\": \"5e8b6d866253cb184eaac150\"\n    }\n]"
						}
					]
				},
				{
					"name": "Get an Album",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}api/v1/albums/5e701f4d2672a63a60573a02",
							"host": [
								"{{URL}}api"
							],
							"path": [
								"v1",
								"albums",
								"5e701f4d2672a63a60573a02"
							]
						}
					},
					"response": [
						{
							"name": "Get an Album",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}api/v1/albums/5e701f4d2672a63a60573a02",
									"host": [
										"{{URL}}api"
									],
									"path": [
										"v1",
										"albums",
										"5e701f4d2672a63a60573a02"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "X-DNS-Prefetch-Control",
									"value": "off"
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=15552000; includeSubDomains"
								},
								{
									"key": "X-Download-Options",
									"value": "noopen"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-XSS-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "ETag",
									"value": "W/\"419-zFCcF9FyKqLg9ZqdhIyd70+OdTI\""
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip"
								},
								{
									"key": "Date",
									"value": "Tue, 07 Apr 2020 20:35:48 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"tracks\": [\n            {\n                \"category\": [\n                    \"5e807517e478cf39b47bd1f0\"\n                ],\n                \"explicit\": false,\n                \"_id\": \"5e7d334860cd930408a5f995\",\n                \"album\": \"5e701f4d2672a63a60573a02\",\n                \"name\": \"Everything Is Wrong\",\n                \"durationMs\": 30000,\n                \"artist\": \"5e82a48054660672fd699883\",\n                \"trackPath\": \"assets/tracks/Everything-Is-Wrong.mp3\",\n                \"type\": \"track\"\n            },\n            {\n                \"category\": [\n                    \"5e807517e478cf39b47bd1f0\"\n                ],\n                \"explicit\": false,\n                \"_id\": \"5e8a1e0f7937ec4d40c6deba\",\n                \"album\": \"5e701f4d2672a63a60573a02\",\n                \"name\": \"My Desire\",\n                \"durationMs\": 30000,\n                \"artist\": \"5e82a48054660672fd699883\",\n                \"trackPath\": \"assets/tracks/My-Desire.mp3\",\n                \"type\": \"track\"\n            },\n            {\n                \"category\": [\n                    \"5e807517e478cf39b47bd1f0\"\n                ],\n                \"explicit\": false,\n                \"_id\": \"5e8a1e727937ec4d40c6debb\",\n                \"album\": \"5e701f4d2672a63a60573a02\",\n                \"name\": \"All The Rage Back Home\",\n                \"durationMs\": 30000,\n                \"artist\": \"5e82a48054660672fd699883\",\n                \"trackPath\": \"assets/tracks/All-The-Rage-Back-Home.mp3\",\n                \"type\": \"track\"\n            }\n        ],\n        \"releaseDate\": \"2020-04-07T20:35:43.410Z\",\n        \"_id\": \"5e701f4d2672a63a60573a02\",\n        \"name\": \"El Pintor\",\n        \"year\": 2014,\n        \"image\": \"https://zasymphonia.ddns.net/api/v1/images/albums/El-Pintor.jpg\",\n        \"artist\": \"5e82a48054660672fd699883\"\n    }\n]"
						}
					]
				},
				{
					"name": "Get an Album's Tracks",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}api/v1/albums/5e701f4d2672a63a60573a02/tracks",
							"host": [
								"{{URL}}api"
							],
							"path": [
								"v1",
								"albums",
								"5e701f4d2672a63a60573a02",
								"tracks"
							]
						}
					},
					"response": [
						{
							"name": "Get an Album's Tracks",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}api/v1/albums/5e701f4d2672a63a60573a02/tracks",
									"host": [
										"{{URL}}api"
									],
									"path": [
										"v1",
										"albums",
										"5e701f4d2672a63a60573a02",
										"tracks"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "X-DNS-Prefetch-Control",
									"value": "off"
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=15552000; includeSubDomains"
								},
								{
									"key": "X-Download-Options",
									"value": "noopen"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-XSS-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "867"
								},
								{
									"key": "ETag",
									"value": "W/\"363-4JSY6u9KG/usTffI852NhbGbH1U\""
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding"
								},
								{
									"key": "Date",
									"value": "Tue, 07 Apr 2020 20:36:32 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"tracks\": [\n            {\n                \"category\": [\n                    \"5e807517e478cf39b47bd1f0\"\n                ],\n                \"explicit\": false,\n                \"_id\": \"5e7d334860cd930408a5f995\",\n                \"album\": \"5e701f4d2672a63a60573a02\",\n                \"name\": \"Everything Is Wrong\",\n                \"durationMs\": 30000,\n                \"artist\": \"5e82a48054660672fd699883\",\n                \"trackPath\": \"assets/tracks/Everything-Is-Wrong.mp3\",\n                \"type\": \"track\"\n            },\n            {\n                \"category\": [\n                    \"5e807517e478cf39b47bd1f0\"\n                ],\n                \"explicit\": false,\n                \"_id\": \"5e8a1e0f7937ec4d40c6deba\",\n                \"album\": \"5e701f4d2672a63a60573a02\",\n                \"name\": \"My Desire\",\n                \"durationMs\": 30000,\n                \"artist\": \"5e82a48054660672fd699883\",\n                \"trackPath\": \"assets/tracks/My-Desire.mp3\",\n                \"type\": \"track\"\n            },\n            {\n                \"category\": [\n                    \"5e807517e478cf39b47bd1f0\"\n                ],\n                \"explicit\": false,\n                \"_id\": \"5e8a1e727937ec4d40c6debb\",\n                \"album\": \"5e701f4d2672a63a60573a02\",\n                \"name\": \"All The Rage Back Home\",\n                \"durationMs\": 30000,\n                \"artist\": \"5e82a48054660672fd699883\",\n                \"trackPath\": \"assets/tracks/All-The-Rage-Back-Home.mp3\",\n                \"type\": \"track\"\n            }\n        ],\n        \"_id\": \"5e701f4d2672a63a60573a02\"\n    }\n]"
						}
					]
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Artists",
			"item": [
				{
					"name": "Get an Artist",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "",
								"description": "*Required*. A valid access token from the Symphonia Accounts service.\n",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{URL}}api/v1/artists/5e8137aa54660672fd699882",
							"host": [
								"{{URL}}api"
							],
							"path": [
								"v1",
								"artists",
								"5e8137aa54660672fd699882"
							]
						},
						"description": "# Description\r\n\r\nGet Symphonia catalog information for a single artist identified by their unique Symphonia ID.\r\n\r\n## Response Format\r\n\r\nOn success, the HTTP status code in the response header is `200` OK and the response body contains an artist object in JSON format. On error, the header status code is an error code and the response body contains an error object.\r\n\r\n\r\n### artist object \r\n\r\n<table>\r\n  <thead>\r\n    <tr>\r\n      <th>Key</th>\r\n      <th>Value Type</th>\r\n      <th>Value Description</th>\r\n    </tr>\r\n  </thead>\r\n  <tbody>\r\n    <tr>\r\n      <td>followers</td>\r\n      <td>A followers object</td>\r\n      <td>Information about the followers of the artist.</td>\r\n    </tr>\r\n    <tr>\r\n      <td>genres</td>\r\n      <td>array of strings</td>\r\n      <td>A list of the genres the artist is associated with. For example: <code class=\"highlighter-rouge\">\"Prog Rock\"</code> , <code class=\"highlighter-rouge\">\"Post-Grunge\"</code>. (If not yet classified, the array is empty.)</td>\r\n    </tr>\r\n    <tr>\r\n      <td>href</td>\r\n      <td>string</td>\r\n      <td>A link to the Web API endpoint providing full details of the artist.</td>\r\n    </tr>\r\n    <tr>\r\n      <td>id</td>\r\n      <td>string</td>\r\n      <td>The Symphonia ID for the artist.</td>\r\n    </tr>\r\n    <tr>\r\n      <td>images</td>\r\n      <td>array of image objects</td>\r\n      <td>Images of the artist in various sizes, widest first.</td>\r\n    </tr>\r\n    <tr>\r\n      <td>name</td>\r\n      <td>string</td>\r\n      <td>The name of the artist</td>\r\n    </tr>\r\n    <tr>\r\n      <td>popularity</td>\r\n      <td>int</td>\r\n      <td>The popularity of the artist. The value will be between 0 and 100, with 100 being the most popular. The artist’s popularity is calculated from the popularity of all the artist’s tracks.</td>\r\n    </tr>\r\n    <tr>\r\n      <td>type</td>\r\n      <td>string</td>\r\n      <td>The object type: <code class=\"highlighter-rouge\">\"artist\"</code></td>\r\n    </tr>\r\n  </tbody>\r\n</table>\r\n\r\n# Request Parameters"
					},
					"response": [
						{
							"name": "Get an Artist",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "*Required*. A valid access token from the Symphonia Accounts service.\n",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{URL}}api/v1/artists/5e8137aa54660672fd699882",
									"host": [
										"{{URL}}api"
									],
									"path": [
										"v1",
										"artists",
										"5e8137aa54660672fd699882"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "X-DNS-Prefetch-Control",
									"value": "off"
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=15552000; includeSubDomains"
								},
								{
									"key": "X-Download-Options",
									"value": "noopen"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-XSS-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "592"
								},
								{
									"key": "ETag",
									"value": "W/\"250-cwG94878hoOUcX0/OpkRvgm9vJw\""
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding"
								},
								{
									"key": "Date",
									"value": "Tue, 07 Apr 2020 20:37:26 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"queue\": {\n        \"currentlyPlaying\": {\n            \"currentTrack\": null\n        },\n        \"queueTracks\": [],\n        \"previousTrack\": null,\n        \"repeat\": false,\n        \"shuffle\": false,\n        \"play\": false,\n        \"repeatOnce\": false,\n        \"devices\": [\n            {\n                \"_id\": \"5e8a5b0db2859207bf1fc2e9\",\n                \"devicesName\": \"chrome\"\n            }\n        ]\n    },\n    \"followedUsers\": [],\n    \"tracks\": [],\n    \"ownedPlaylists\": [],\n    \"followedAlbums\": [],\n    \"followedTracks\": [],\n    \"_id\": \"5e8137aa54660672fd699882\",\n    \"email\": \"test3@test.com\",\n    \"name\": \"Tame Impala\",\n    \"dateOfBirth\": \"1978-06-25T00:00:00.000Z\",\n    \"gender\": \"male\",\n    \"type\": \"artist\",\n    \"imageUrl\": \"https://zasymphonia.ddns.net/api/v1/images/users/Tame-Impala.jpg\",\n    \"__v\": 1,\n    \"last_login\": \"2020-04-07T17:58:12.792Z\"\n}"
						}
					]
				},
				{
					"name": "Get an Artist's Albums",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "",
								"description": "*Required*. A valid access token from the Symphonia Accounts service.\n",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{URL}}api/v1/artists/:{id}/albums?include_groups=&country&limit&offset",
							"host": [
								"{{URL}}api"
							],
							"path": [
								"v1",
								"artists",
								":{id}",
								"albums"
							],
							"query": [
								{
									"key": "include_groups",
									"value": "",
									"description": "<em>Optional</em>. A comma-separated list of keywords that will be used to filter the response. If not supplied, all album types will be returned. Valid values are:<br />- <code class=\"highlighter-rouge\">album</code><br />- <code class=\"highlighter-rouge\">single</code><br />- <code class=\"highlighter-rouge\">appears_on</code><br />- <code class=\"highlighter-rouge\">compilation</code><br />For example: <code class=\"highlighter-rouge\">include_groups=album,single</code>."
								},
								{
									"key": "country",
									"value": null,
									"description": "<em>Optional</em>. An <a href=\"http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2\">ISO 3166-1 alpha-2 country code</a> or the string <code class=\"highlighter-rouge\">from_token</code>.<br />Supply this parameter to limit the response to one particular geographical market. For example, for albums available in Sweden: <code class=\"highlighter-rouge\">country=SE</code>.<br /><em>If not given, results will be returned for all countries and you are likely to get duplicate results per album, one for each country in which the album is available!</em>"
								},
								{
									"key": "limit",
									"value": null,
									"description": "<em>Optional</em>. The number of album objects to return. Default: 20. Minimum: 1. Maximum: 50. For example: <code class=\"highlighter-rouge\">limit=2</code>"
								},
								{
									"key": "offset",
									"value": null,
									"description": "<em>Optional</em>. The index of the first album to return. Default: 0 (i.e., the first album). Use with <code class=\"highlighter-rouge\">limit</code> to get the next set of albums."
								}
							],
							"variable": [
								{
									"key": "{id}",
									"value": "",
									"description": "The Symphonia ID for the artist."
								}
							]
						},
						"description": "# Description\n\nGet Symphonia catalog information about an artist’s albums. Optional parameters can be specified in the query string to filter and sort the response.\n\n# Response Format\n\nOn success, the HTTP status code in the response header is `200` OK and the response body contains an array of simplified album objects (wrapped in a paging object) in JSON format. On error, the header status code is an error code and the response body contains an error object.\n\n# Example\n\n## album object\n\n<table>\n  <thead>\n    <tr>\n      <th>Key</th>\n      <th>Value Type</th>\n      <th>Value Description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>album_type</td>\n      <td>string</td>\n      <td>The type of the album: one of <code class=\"highlighter-rouge\">\"album\"</code> , <code class=\"highlighter-rouge\">\"single\"</code> , or <code class=\"highlighter-rouge\">\"compilation\"</code>.</td>\n    </tr>\n    <tr>\n      <td>artists</td>\n      <td>array of simplified artist objects</td>\n      <td>The artists of the album. Each artist object includes a link in <code class=\"highlighter-rouge\">href</code> to more detailed information about the artist.</td>\n    </tr>\n    <tr>\n      <td>available_markets</td>\n      <td>array of strings</td>\n      <td>The markets in which the album is available: <a href=\"http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2\">ISO 3166-1 alpha-2 country codes</a>. Note that an album is considered available in a market when at least 1 of its tracks is available in that market.</td>\n    </tr>\n    <tr>\n      <td>copyrights</td>\n      <td>array of copyright objects</td>\n      <td>The copyright statements of the album.</td>\n    </tr>\n    <tr>\n      <td>genres</td>\n      <td>array of strings</td>\n      <td>A list of the genres used to classify the album. For example: <code class=\"highlighter-rouge\">\"Prog Rock\"</code> , <code class=\"highlighter-rouge\">\"Post-Grunge\"</code>. (If not yet classified, the array is empty.)</td>\n    </tr>\n    <tr>\n      <td>href</td>\n      <td>string</td>\n      <td>A link to the Web API endpoint providing full details of the album.</td>\n    </tr>\n    <tr>\n      <td>id</td>\n      <td>string</td>\n      <td>The Symphonia ID for the album.</td>\n    </tr>\n    <tr>\n      <td>images</td>\n      <td>array of image objects</td>\n      <td>The cover art for the album in various sizes, widest first.</td>\n    </tr>\n    <tr>\n      <td>label</td>\n      <td>string</td>\n      <td>The label for the album.</td>\n    </tr>\n    <tr>\n      <td>name</td>\n      <td>string</td>\n      <td>The name of the album. In case of an album takedown, the value may be an empty string.</td>\n    </tr>\n    <tr>\n      <td>popularity</td>\n      <td>integer</td>\n      <td>The popularity of the album. The value will be between 0 and 100, with 100 being the most popular. The popularity is calculated from the popularity of the album’s individual tracks.</td>\n    </tr>\n    <tr>\n      <td>release_date</td>\n      <td>string</td>\n      <td>The date the album was first released, for example <code class=\"highlighter-rouge\">\"1981-12-15\"</code>. Depending on the precision, it might be shown as <code class=\"highlighter-rouge\">\"1981\"</code> or <code class=\"highlighter-rouge\">\"1981-12\"</code>.</td>\n    </tr>\n    <tr>\n      <td>release_date_precision</td>\n      <td>string</td>\n      <td>The precision with which <code class=\"highlighter-rouge\">release_date</code> value is known: <code class=\"highlighter-rouge\">\"year\"</code> , <code class=\"highlighter-rouge\">\"month\"</code> , or <code class=\"highlighter-rouge\">\"day\"</code>.</td>\n    </tr>\n    <tr>\n      <td>tracks</td>\n      <td>array of simplified track objects inside a paging object</td>\n      <td>The tracks of the album.</td>\n    </tr>\n    <tr>\n      <td>type</td>\n      <td>string</td>\n      <td>The object type: “album”</td>\n    </tr>\n  </tbody>\n</table>\n\n# Request parameters"
					},
					"response": [
						{
							"name": "Get an Artist's Albums",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {your access token}",
										"description": "**Required**. A valid access token from the Symphonia Accounts service.\n",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{URL}}api/v1/artists/:{id}/albums?include_groups=appears_on&country=ES&limit=2&offset",
									"host": [
										"{{URL}}api"
									],
									"path": [
										"v1",
										"artists",
										":{id}",
										"albums"
									],
									"query": [
										{
											"key": "include_groups",
											"value": "appears_on",
											"description": "<em>Optional</em>. A comma-separated list of keywords that will be used to filter the response. If not supplied, all album types will be returned. Valid values are:<br />- <code class=\"highlighter-rouge\">album</code><br />- <code class=\"highlighter-rouge\">single</code><br />- <code class=\"highlighter-rouge\">appears_on</code><br />- <code class=\"highlighter-rouge\">compilation</code><br />For example: <code class=\"highlighter-rouge\">include_groups=album,single</code>."
										},
										{
											"key": "country",
											"value": "ES",
											"description": "<em>Optional</em>. An <a href=\"http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2\">ISO 3166-1 alpha-2 country code</a> or the string <code class=\"highlighter-rouge\">from_token</code>.<br />Supply this parameter to limit the response to one particular geographical market. For example, for albums available in Sweden: <code class=\"highlighter-rouge\">country=SE</code>.<br /><em>If not given, results will be returned for all countries and you are likely to get duplicate results per album, one for each country in which the album is available!</em>"
										},
										{
											"key": "limit",
											"value": "2",
											"description": "<em>Optional</em>. The number of album objects to return. Default: 20. Minimum: 1. Maximum: 50. For example: <code class=\"highlighter-rouge\">limit=2</code>"
										},
										{
											"key": "offset",
											"value": null,
											"description": "<em>Optional</em>. The index of the first album to return. Default: 0 (i.e., the first album). Use with <code class=\"highlighter-rouge\">limit</code> to get the next set of albums."
										}
									],
									"variable": [
										{
											"key": "{id}",
											"value": "1vCWHaC5f2uS3yhpwWbIA6",
											"description": "The Symphonia ID for the artist."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": null,
							"cookie": [],
							"body": "{\n    \"href\": \"https://api.symphonia.com/v1/artists/1vCWHaC5f2uS3yhpwWbIA6/albums?offset=0&limit=2&include_groups=appears_on&market=ES\",\n    \"items\": [\n        {\n            \"album_group\": \"appears_on\",\n            \"album_type\": \"album\",\n            \"artists\": [\n                {\n                    \"href\": \"https://api.symphonia.com/v1/artists/0LyfQWJT6nXafLPZqxe9Of\",\n                    \"id\": \"0LyfQWJT6nXafLPZqxe9Of\",\n                    \"name\": \"Various Artists\",\n                    \"type\": \"artist\"\n                }\n            ],\n            \"available_markets\": [\n                \"AD\",\n                \"AR\",\n                \"AT\",\n                \"AU\",\n                \"BE\",\n                \"BG\",\n                \"BO\",\n                \"BR\",\n                \"CH\",\n                \"CL\",\n                \"CO\",\n                \"CR\",\n                \"CY\",\n                \"CZ\",\n                \"DE\",\n                \"DK\",\n                \"DO\",\n                \"EC\",\n                \"EE\",\n                \"ES\",\n                \"FI\",\n                \"FR\",\n                \"GB\",\n                \"GR\",\n                \"GT\",\n                \"HK\",\n                \"HN\",\n                \"HU\",\n                \"ID\",\n                \"IE\",\n                \"IL\",\n                \"IS\",\n                \"IT\",\n                \"JP\",\n                \"LI\",\n                \"LT\",\n                \"LU\",\n                \"LV\",\n                \"MC\",\n                \"MT\",\n                \"MY\",\n                \"NI\",\n                \"NL\",\n                \"NO\",\n                \"NZ\",\n                \"PA\",\n                \"PE\",\n                \"PH\",\n                \"PL\",\n                \"PT\",\n                \"PY\",\n                \"RO\",\n                \"SE\",\n                \"SG\",\n                \"SK\",\n                \"SV\",\n                \"TH\",\n                \"TR\",\n                \"TW\",\n                \"UY\",\n                \"VN\",\n                \"ZA\"\n            ],\n            \"href\": \"https://api.symphonia.com/v1/albums/43977e0YlJeMXG77uCCSMX\",\n            \"id\": \"43977e0YlJeMXG77uCCSMX\",\n            \"images\": [\n                {\n                    \"height\": 640,\n                    \"url\": \"https://i.scdn.co/image/0da79956d0440a55b20ea4e8e38877bce43275cd\",\n                    \"width\": 640\n                },\n                {\n                    \"height\": 300,\n                    \"url\": \"https://i.scdn.co/image/29368267cc6b1eab2600e6e42485d3774621e7d4\",\n                    \"width\": 300\n                },\n                {\n                    \"height\": 64,\n                    \"url\": \"https://i.scdn.co/image/779dd6d6a0e124e03a5143d2be729ee4bab3f15f\",\n                    \"width\": 64\n                }\n            ],\n            \"name\": \"Shut Up Lets Dance (Vol. II)\",\n            \"release_date\": \"2018-02-09\",\n            \"release_date_precision\": \"day\",\n            \"type\": \"album\"\n        },\n        {\n            \"album_group\": \"appears_on\",\n            \"album_type\": \"compilation\",\n            \"artists\": [\n                {\n                    \"href\": \"https://api.symphonia.com/v1/artists/0LyfQWJT6nXafLPZqxe9Of\",\n                    \"id\": \"0LyfQWJT6nXafLPZqxe9Of\",\n                    \"name\": \"Various Artists\",\n                    \"type\": \"artist\"\n                }\n            ],\n            \"available_markets\": [\n                \"AD\",\n                \"AR\",\n                \"AT\",\n                \"AU\",\n                \"BE\",\n                \"BG\",\n                \"BO\",\n                \"BR\",\n                \"CA\",\n                \"CH\",\n                \"CL\",\n                \"CO\",\n                \"CR\",\n                \"CY\",\n                \"CZ\",\n                \"DE\",\n                \"DK\",\n                \"DO\",\n                \"EC\",\n                \"EE\",\n                \"ES\",\n                \"FI\",\n                \"FR\",\n                \"GB\",\n                \"GR\",\n                \"GT\",\n                \"HK\",\n                \"HN\",\n                \"HU\",\n                \"ID\",\n                \"IE\",\n                \"IL\",\n                \"IS\",\n                \"IT\",\n                \"JP\",\n                \"LI\",\n                \"LT\",\n                \"LU\",\n                \"LV\",\n                \"MC\",\n                \"MT\",\n                \"MX\",\n                \"MY\",\n                \"NI\",\n                \"NL\",\n                \"NO\",\n                \"NZ\",\n                \"PA\",\n                \"PE\",\n                \"PH\",\n                \"PL\",\n                \"PT\",\n                \"PY\",\n                \"RO\",\n                \"SE\",\n                \"SG\",\n                \"SK\",\n                \"SV\",\n                \"TH\",\n                \"TR\",\n                \"TW\",\n                \"US\",\n                \"UY\",\n                \"VN\",\n                \"ZA\"\n            ],\n            \"href\": \"https://api.symphonia.com/v1/albums/189ngoT3WxR5mZSYkAGOLF\",\n            \"id\": \"189ngoT3WxR5mZSYkAGOLF\",\n            \"images\": [\n                {\n                    \"height\": 600,\n                    \"url\": \"https://i.scdn.co/image/42f4dbe7e54d52efa14f058fab74d8a0505ef26d\",\n                    \"width\": 600\n                },\n                {\n                    \"height\": 300,\n                    \"url\": \"https://i.scdn.co/image/b221fb6d689f84f8e09b493776520194a6f4ef88\",\n                    \"width\": 300\n                },\n                {\n                    \"height\": 64,\n                    \"url\": \"https://i.scdn.co/image/0fc4a3cb2ee5b14fdefeb8f20afd84b7fbae7707\",\n                    \"width\": 64\n                }\n            ],\n            \"name\": \"Classic Club Monsters (25 Floor Killers)\",\n            \"release_date\": \"2018-02-02\",\n            \"release_date_precision\": \"day\",\n            \"type\": \"album\"\n        }\n    ],\n    \"limit\": 2,\n    \"next\": \"https://api.symphonia.com/v1/artists/1vCWHaC5f2uS3yhpwWbIA6/albums?offset=2&limit=2&include_groups=appears_on&market=ES\",\n    \"offset\": 0,\n    \"previous\": null,\n    \"total\": 308\n}"
						}
					]
				},
				{
					"name": "Get an Artist's Top Tracks",
					"request": {
						"method": "GET",
						"header": [
							{
								"description": "*Required*. A valid access token from the Symphonia Accounts service.\n",
								"key": "Authorization",
								"type": "text",
								"value": ""
							}
						],
						"url": {
							"raw": "{{URL}}api/v1/artists/5e82a48054660672fd699883/top-tracks",
							"host": [
								"{{URL}}api"
							],
							"path": [
								"v1",
								"artists",
								"5e82a48054660672fd699883",
								"top-tracks"
							]
						},
						"description": "# Description\r\n\r\nGet Symphonia catalog information about an artist’s top tracks by country.\r\n\r\n## Response Format\r\n\r\nOn success, the HTTP status code in the response header is `200` OK and the response body contains an object whose key is `\"tracks\"` and whose value is an array of up to 10 track objects in JSON format. On error, the header status code is an error code and the response body contains an error object.\r\n\r\n\r\n### artist object \r\n\r\n<table>\r\n  <thead>\r\n    <tr>\r\n      <th>Key</th>\r\n      <th>Value Type</th>\r\n      <th>Value Description</th>\r\n    </tr>\r\n  </thead>\r\n  <tbody>\r\n    <tr>\r\n      <td>album</td>\r\n      <td>an album object</td>\r\n      <td>The album on which the track appears. The album object includes a link in <code class=\"highlighter-rouge\">href</code> to full information about the album.</td>\r\n    </tr>\r\n    <tr>\r\n      <td>artists</td>\r\n      <td>an array of artist objects</td>\r\n      <td>The artists who performed the track. Each artist object includes a link in <code class=\"highlighter-rouge\">href</code> to more detailed information about the artist.</td>\r\n    </tr>\r\n    <tr>\r\n      <td>available_markets</td>\r\n      <td>array of strings</td>\r\n      <td>A list of the countries in which the track can be played, identified by their <a href=\"http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2\">ISO 3166-1 alpha-2</a> code.</td>\r\n    </tr>\r\n      <td>duration_ms</td>\r\n      <td>integer</td>\r\n      <td>The track length in milliseconds.</td>\r\n    </tr>\r\n    <tr>\r\n      <td>explicit</td>\r\n      <td>Boolean</td>\r\n      <td>Whether or not the track has explicit lyrics ( <code class=\"highlighter-rouge\">true</code> = yes it does; <code class=\"highlighter-rouge\">false</code> = no it does not OR unknown).</td>\r\n    </tr>\r\n    <tr>\r\n      <td>href</td>\r\n      <td>string</td>\r\n      <td>A link to the Web API endpoint providing full details of the track.</td>\r\n    </tr>\r\n    <tr>\r\n      <td>id</td>\r\n      <td>string</td>\r\n      <td>The Symphonia ID for the track.</td>\r\n    </tr>\r\n    <tr>\r\n      <td>name</td>\r\n      <td>string</td>\r\n      <td>The name of the track.</td>\r\n    </tr>\r\n    <tr>\r\n      <td>popularity</td>\r\n      <td>integer</td>\r\n      <td>The popularity of the track. The value will be between 0 and 100, with 100 being the most popular.<br />The popularity of a track is a value between 0 and 100, with 100 being the most popular. The popularity is calculated by algorithm and is based, in the most part, on the total number of plays the track has had and how recent those plays are.</td>\r\n    </tr>\r\n    <tr>\r\n      <td>type</td>\r\n      <td>string</td>\r\n      <td>The object type: “track”.</td>\r\n    </tr>\r\n  </tbody>\r\n</table>\r\n\r\n## Request Parameters"
					},
					"response": [
						{
							"name": "Get an Artist's Top Tracks",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "*Required*. A valid access token from the Symphonia Accounts service.\n",
										"key": "Authorization",
										"type": "text",
										"value": ""
									}
								],
								"url": {
									"raw": "{{URL}}api/v1/artists/5e82a48054660672fd699883/top-tracks",
									"host": [
										"{{URL}}api"
									],
									"path": [
										"v1",
										"artists",
										"5e82a48054660672fd699883",
										"top-tracks"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "X-DNS-Prefetch-Control",
									"value": "off"
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=15552000; includeSubDomains"
								},
								{
									"key": "X-Download-Options",
									"value": "noopen"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-XSS-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "ETag",
									"value": "W/\"7b3-8IXaADsbRhFPtPJZdwMNGUMHVAg\""
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip"
								},
								{
									"key": "Date",
									"value": "Tue, 07 Apr 2020 20:49:22 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"tracks\": [\n            {\n                \"category\": [\n                    \"5e807517e478cf39b47bd1f0\"\n                ],\n                \"explicit\": false,\n                \"_id\": \"5e7d334860cd930408a5f995\",\n                \"album\": {\n                    \"tracks\": [\n                        \"5e7d334860cd930408a5f995\",\n                        \"5e8a1e0f7937ec4d40c6deba\",\n                        \"5e8a1e727937ec4d40c6debb\"\n                    ],\n                    \"releaseDate\": \"2020-04-07T20:49:19.831Z\",\n                    \"_id\": \"5e701f4d2672a63a60573a02\",\n                    \"name\": \"El Pintor\",\n                    \"year\": 2014,\n                    \"image\": \"https://zasymphonia.ddns.net/api/v1/images/albums/El-Pintor.jpg\",\n                    \"artist\": \"5e82a48054660672fd699883\"\n                },\n                \"name\": \"Everything Is Wrong\",\n                \"durationMs\": 30000,\n                \"artist\": \"5e82a48054660672fd699883\",\n                \"trackPath\": \"assets/tracks/Everything-Is-Wrong.mp3\",\n                \"type\": \"track\",\n                \"previewUrl\": \"http://localhost:3000/api/v1/me/player/tracks/5e8a1e0f7937ec4d40c6deba\"\n            },\n            {\n                \"category\": [\n                    \"5e807517e478cf39b47bd1f0\"\n                ],\n                \"explicit\": false,\n                \"_id\": \"5e8a1e0f7937ec4d40c6deba\",\n                \"album\": {\n                    \"tracks\": [\n                        \"5e7d334860cd930408a5f995\",\n                        \"5e8a1e0f7937ec4d40c6deba\",\n                        \"5e8a1e727937ec4d40c6debb\"\n                    ],\n                    \"releaseDate\": \"2020-04-07T20:49:19.831Z\",\n                    \"_id\": \"5e701f4d2672a63a60573a02\",\n                    \"name\": \"El Pintor\",\n                    \"year\": 2014,\n                    \"image\": \"https://zasymphonia.ddns.net/api/v1/images/albums/El-Pintor.jpg\",\n                    \"artist\": \"5e82a48054660672fd699883\"\n                },\n                \"name\": \"My Desire\",\n                \"durationMs\": 30000,\n                \"artist\": \"5e82a48054660672fd699883\",\n                \"trackPath\": \"assets/tracks/My-Desire.mp3\",\n                \"type\": \"track\",\n                \"previewUrl\": \"http://localhost:3000/api/v1/me/player/tracks/5e8a1e0f7937ec4d40c6deba\"\n            },\n            {\n                \"category\": [\n                    \"5e807517e478cf39b47bd1f0\"\n                ],\n                \"explicit\": false,\n                \"_id\": \"5e8a1e727937ec4d40c6debb\",\n                \"album\": {\n                    \"tracks\": [\n                        \"5e7d334860cd930408a5f995\",\n                        \"5e8a1e0f7937ec4d40c6deba\",\n                        \"5e8a1e727937ec4d40c6debb\"\n                    ],\n                    \"releaseDate\": \"2020-04-07T20:49:19.831Z\",\n                    \"_id\": \"5e701f4d2672a63a60573a02\",\n                    \"name\": \"El Pintor\",\n                    \"year\": 2014,\n                    \"image\": \"https://zasymphonia.ddns.net/api/v1/images/albums/El-Pintor.jpg\",\n                    \"artist\": \"5e82a48054660672fd699883\"\n                },\n                \"name\": \"All The Rage Back Home\",\n                \"durationMs\": 30000,\n                \"artist\": \"5e82a48054660672fd699883\",\n                \"trackPath\": \"assets/tracks/All-The-Rage-Back-Home.mp3\",\n                \"type\": \"track\",\n                \"previewUrl\": \"http://localhost:3000/api/v1/me/player/tracks/5e8a1e0f7937ec4d40c6deba\"\n            }\n        ],\n        \"_id\": \"5e82a48054660672fd699883\"\n    }\n]"
						}
					]
				},
				{
					"name": "Get an Artist's Related Artists",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "",
								"description": "*Required*. A valid access token from the Symphonia Accounts service.\n",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{URL}}api/v1/artists/5e80fd1684c71f6ffb534a08/related-artists",
							"host": [
								"{{URL}}api"
							],
							"path": [
								"v1",
								"artists",
								"5e80fd1684c71f6ffb534a08",
								"related-artists"
							]
						},
						"description": "# Description\r\n\r\nGet Symphonia catalog information about artists similar to a given artist. Similarity is based on analysis of the Symphonia community’s listening history.\r\n\r\n## Response Format\r\n\r\nOn success, the HTTP status code in the response header is `200` OK and the response body contains an object whose key is `\"artists\"` and whose value is an array of up to 20 artist objects in JSON format. On error, the header status code is an error code and the response body contains an error object.\r\n\r\n\r\n### artist object \r\n\r\n<table>\r\n  <thead>\r\n    <tr>\r\n      <th>Key</th>\r\n      <th>Value Type</th>\r\n      <th>Value Description</th>\r\n    </tr>\r\n  </thead>\r\n  <tbody>\r\n    <tr>\r\n      <td>followers</td>\r\n      <td>A followers object</td>\r\n      <td>Information about the followers of the artist.</td>\r\n    </tr>\r\n    <tr>\r\n      <td>genres</td>\r\n      <td>array of strings</td>\r\n      <td>A list of the genres the artist is associated with. For example: <code class=\"highlighter-rouge\">\"Prog Rock\"</code> , <code class=\"highlighter-rouge\">\"Post-Grunge\"</code>. (If not yet classified, the array is empty.)</td>\r\n    </tr>\r\n    <tr>\r\n      <td>href</td>\r\n      <td>string</td>\r\n      <td>A link to the Web API endpoint providing full details of the artist.</td>\r\n    </tr>\r\n    <tr>\r\n      <td>id</td>\r\n      <td>string</td>\r\n      <td>The Symphonia ID for the artist.</td>\r\n    </tr>\r\n    <tr>\r\n      <td>images</td>\r\n      <td>array of image objects</td>\r\n      <td>Images of the artist in various sizes, widest first.</td>\r\n    </tr>\r\n    <tr>\r\n      <td>name</td>\r\n      <td>string</td>\r\n      <td>The name of the artist</td>\r\n    </tr>\r\n    <tr>\r\n      <td>popularity</td>\r\n      <td>int</td>\r\n      <td>The popularity of the artist. The value will be between 0 and 100, with 100 being the most popular. The artist’s popularity is calculated from the popularity of all the artist’s tracks.</td>\r\n    </tr>\r\n    <tr>\r\n      <td>type</td>\r\n      <td>string</td>\r\n      <td>The object type: <code class=\"highlighter-rouge\">\"artist\"</code></td>\r\n    </tr>\r\n  </tbody>\r\n</table>\r\n\r\n## Request Parameters"
					},
					"response": [
						{
							"name": "Get an Artist's Related Artists",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "*Required*. A valid access token from the Symphonia Accounts service.\n",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{URL}}api/v1/artists/5e80fd1684c71f6ffb534a08/related-artists",
									"host": [
										"{{URL}}api"
									],
									"path": [
										"v1",
										"artists",
										"5e80fd1684c71f6ffb534a08",
										"related-artists"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "X-DNS-Prefetch-Control",
									"value": "off"
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=15552000; includeSubDomains"
								},
								{
									"key": "X-Download-Options",
									"value": "noopen"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-XSS-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "ETag",
									"value": "W/\"65b-2fT9eu+vEZUfsbBGbJY1sVFfyas\""
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip"
								},
								{
									"key": "Date",
									"value": "Tue, 07 Apr 2020 20:50:42 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								}
							],
							"cookie": [],
							"body": "{\n    \"artists\": [\n        {\n            \"_id\": \"5e8c7669e37ac11ac4f01359\",\n            \"followedUsers\": [],\n            \"email\": \"test12@test.com\",\n            \"password\": \"$2b$12$GDzaxr1IqINkhDi7v67F3OLfD..QeYS7PUsLkIxUg8O4NO8lkP0cS\",\n            \"name\": \"Clario\",\n            \"dateOfBirth\": \"1997-05-16T00:00:00.000+00:00\",\n            \"gender\": \"female\",\n            \"type\": \"artist\",\n            \"queue\": {\n                \"devices\": [\n                    {\n                        \"_id\": \"5e8ba7b243427f32bcb6e75d\",\n                        \"devicesName\": \"chrome\"\n                    }\n                ],\n                \"repeat\": false,\n                \"repeatOnce\": false,\n                \"shuffle\": false\n            },\n            \"ownedPlaylists\": [],\n            \"imageUrl\": \"https://zasymphonia.ddns.net/api/v1/images/users/Clario.jpg\",\n            \"followedAlbums\": []\n        },\n        {\n            \"_id\": \"5e8c7e585b5a8504fcd33a63\",\n            \"followedUsers\": [],\n            \"email\": \"test38@test.com\",\n            \"password\": \"$2b$12$GDzaxr1IqINkhDi7v67F3OLfD..QeYS7PUsLkIxUg8O4NO8lkP0cS\",\n            \"name\": \"Fever Ray\",\n            \"dateOfBirth\": \"1997-12-15T00:00:00.000+00:00\",\n            \"gender\": \"female\",\n            \"type\": \"artist\",\n            \"queue\": {\n                \"devices\": [\n                    {\n                        \"_id\": \"5e8ba7b243427f32bcb6e75d\",\n                        \"devicesName\": \"chrome\"\n                    }\n                ],\n                \"repeat\": false,\n                \"repeatOnce\": false,\n                \"shuffle\": false\n            },\n            \"ownedPlaylists\": [],\n            \"imageUrl\": \"https://zasymphonia.ddns.net/api/v1/images/users/Fever-Ray.jpg\",\n            \"followedAlbums\": []\n        },\n        {\n            \"_id\": \"5e8137aa54660672fd699882\",\n            \"followedUsers\": [],\n            \"email\": \"test3@test.com\",\n            \"password\": \"$2b$12$GDzaxr1IqINkhDi7v67F3OLfD..QeYS7PUsLkIxUg8O4NO8lkP0cS\",\n            \"name\": \"Tame Impala\",\n            \"dateOfBirth\": \"1978-06-25T00:00:00.000+00:00\",\n            \"gender\": \"male\",\n            \"type\": \"artist\",\n            \"queue\": {\n                \"devices\": [\n                    {\n                        \"_id\": \"5e8a5b0db2859207bf1fc2e9\",\n                        \"devicesName\": \"chrome\"\n                    }\n                ],\n                \"play\": false,\n                \"queueTracks\": [],\n                \"repeat\": false,\n                \"repeatOnce\": false,\n                \"shuffle\": false\n            },\n            \"ownedPlaylists\": [],\n            \"tracks\": [\n                \"5e7d2dc03429e24340ff1396\",\n                \"5e7d2ddd3429e24340ff1397\",\n                \"5e7d2e023429e24340ff1398\"\n            ],\n            \"imageUrl\": \"https://zasymphonia.ddns.net/api/v1/images/users/Tame-Impala.jpg\",\n            \"followedAlbums\": []\n        }\n    ]\n}"
						}
					]
				},
				{
					"name": "Get Several Artists",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "",
								"description": "*Required*. A valid access token from the Symphonia Accounts service.\n",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{URL}}api/v1/artists?ids=5e80fd1684c71f6ffb534a08,5e84b966681ae439edfc1d6f",
							"host": [
								"{{URL}}api"
							],
							"path": [
								"v1",
								"artists"
							],
							"query": [
								{
									"key": "ids",
									"value": "5e80fd1684c71f6ffb534a08,5e84b966681ae439edfc1d6f",
									"description": "<em>Required</em>. A comma-separated list of the Symphonia IDs for the artists. Maximum: 50 IDs."
								}
							]
						},
						"description": "# Description\r\n\r\nGet Symphonia catalog information for several artists based on their Symphonia IDs.\r\n\r\n# Response Format\r\n\r\nOn success, the HTTP status code in the response header is `200` OK and the response body contains an object whose key is `\"artists\"` and whose value is an array of artist objects in JSON format. \r\n\r\nObjects are returned in the order requested. If an object is not found, a `null` value is returned in the appropriate position. Duplicate `ids` in the query will result in duplicate objects in the response. On error, the header status code is an error code and the response body contains an error object.\r\n\r\n\r\n\r\n\r\n# Example\r\n\r\n## artist object \r\n\r\n<table>\r\n  <thead>\r\n    <tr>\r\n      <th>Key</th>\r\n      <th>Value Type</th>\r\n      <th>Value Description</th>\r\n    </tr>\r\n  </thead>\r\n  <tbody>\r\n    <tr>\r\n      <td>followers</td>\r\n      <td>A followers object</td>\r\n      <td>Information about the followers of the artist.</td>\r\n    </tr>\r\n    <tr>\r\n      <td>genres</td>\r\n      <td>array of strings</td>\r\n      <td>A list of the genres the artist is associated with. For example: <code class=\"highlighter-rouge\">\"Prog Rock\"</code> , <code class=\"highlighter-rouge\">\"Post-Grunge\"</code>. (If not yet classified, the array is empty.)</td>\r\n    </tr>\r\n    <tr>\r\n      <td>href</td>\r\n      <td>string</td>\r\n      <td>A link to the Web API endpoint providing full details of the artist.</td>\r\n    </tr>\r\n    <tr>\r\n      <td>id</td>\r\n      <td>string</td>\r\n      <td>The Symphonia ID for the artist.</td>\r\n    </tr>\r\n    <tr>\r\n      <td>images</td>\r\n      <td>array of image objects</td>\r\n      <td>Images of the artist in various sizes, widest first.</td>\r\n    </tr>\r\n    <tr>\r\n      <td>name</td>\r\n      <td>string</td>\r\n      <td>The name of the artist</td>\r\n    </tr>\r\n    <tr>\r\n      <td>popularity</td>\r\n      <td>int</td>\r\n      <td>The popularity of the artist. The value will be between 0 and 100, with 100 being the most popular. The artist’s popularity is calculated from the popularity of all the artist’s tracks.</td>\r\n    </tr>\r\n    <tr>\r\n      <td>type</td>\r\n      <td>string</td>\r\n      <td>The object type: <code class=\"highlighter-rouge\">\"artist\"</code></td>\r\n    </tr>\r\n  </tbody>\r\n</table>\r\n\r\n## Request Parameters"
					},
					"response": [
						{
							"name": "Get Several Artists",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "*Required*. A valid access token from the Symphonia Accounts service.\n",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{URL}}api/v1/artists?ids=5e80fd1684c71f6ffb534a08,5e84b966681ae439edfc1d6f",
									"host": [
										"{{URL}}api"
									],
									"path": [
										"v1",
										"artists"
									],
									"query": [
										{
											"key": "ids",
											"value": "5e80fd1684c71f6ffb534a08,5e84b966681ae439edfc1d6f",
											"description": "<em>Required</em>. A comma-separated list of the Symphonia IDs for the artists. Maximum: 50 IDs."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "X-DNS-Prefetch-Control",
									"value": "off"
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=15552000; includeSubDomains"
								},
								{
									"key": "X-Download-Options",
									"value": "noopen"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-XSS-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "ETag",
									"value": "W/\"4df-6WzjFYViQ5ngWv2e90wwWJTcrQU\""
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip"
								},
								{
									"key": "Date",
									"value": "Tue, 07 Apr 2020 20:51:23 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"queue\": {\n            \"currentlyPlaying\": {\n                \"currentTrack\": null\n            },\n            \"queueTracks\": [],\n            \"previousTrack\": null,\n            \"repeat\": false,\n            \"shuffle\": false,\n            \"play\": false,\n            \"repeatOnce\": false,\n            \"devices\": [\n                {\n                    \"_id\": \"5e8a5b0db2859207bf1fc2e9\",\n                    \"devicesName\": \"chrome\"\n                }\n            ]\n        },\n        \"followedUsers\": [],\n        \"tracks\": [\n            \"5e8a1ea07937ec4d40c6debf\",\n            \"5e8a37d0d56ea252c3860a1a\",\n            \"5e8a39f24e11cd46c8bde654\"\n        ],\n        \"ownedPlaylists\": [],\n        \"followedAlbums\": [],\n        \"followedTracks\": [],\n        \"_id\": \"5e80fd1684c71f6ffb534a08\",\n        \"email\": \"test6@test.com\",\n        \"name\": \"TR/ST\",\n        \"dateOfBirth\": \"1985-12-05T00:00:00.000Z\",\n        \"gender\": \"male\",\n        \"type\": \"artist\",\n        \"imageUrl\": \"https://zasymphonia.ddns.net/api/v1/images/users/tr-st.jpg\"\n    },\n    {\n        \"queue\": {\n            \"currentlyPlaying\": {\n                \"currentTrack\": null\n            },\n            \"queueTracks\": [],\n            \"previousTrack\": null,\n            \"repeat\": false,\n            \"shuffle\": false,\n            \"play\": false,\n            \"repeatOnce\": false,\n            \"devices\": [\n                {\n                    \"_id\": \"5e8a5b0db2859207bf1fc2e9\",\n                    \"devicesName\": \"chrome\"\n                }\n            ]\n        },\n        \"followedUsers\": [],\n        \"tracks\": [\n            \"5e8a1e767937ec4d40c6debc\",\n            \"5e8a1e937937ec4d40c6debd\",\n            \"5e8a1e727937ec4d40c6debb\"\n        ],\n        \"ownedPlaylists\": [],\n        \"followedAlbums\": [],\n        \"followedTracks\": [],\n        \"_id\": \"5e84b966681ae439edfc1d6f\",\n        \"email\": \"test5@test.com\",\n        \"name\": \"Minuit Machine\",\n        \"dateOfBirth\": \"1995-06-25T00:00:00.000Z\",\n        \"gender\": \"female\",\n        \"type\": \"artist\",\n        \"imageUrl\": \"https://zasymphonia.ddns.net/api/v1/images/users/Minuit-Machine.jpg\"\n    }\n]"
						}
					]
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "browse",
			"item": [
				{
					"name": "Get a category",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
								"description": "access_token",
								"key": "Authorization",
								"type": "text",
								"value": "{{jwt}}"
							}
						],
						"url": {
							"raw": "{{URL}}api/v1/browse/categories/Indie-rock",
							"host": [
								"{{URL}}api"
							],
							"path": [
								"v1",
								"browse",
								"categories",
								"Indie-rock"
							],
							"query": [
								{
									"key": "country",
									"value": "{{country_code}}",
									"description": "\tOptional. A country: an ISO 3166-1 alpha-2 country code. Provide this parameter if you want to narrow the list of returned categories to those relevant to a particular country. If omitted, the returned items will be globally relevant.",
									"disabled": true
								},
								{
									"key": "locale",
									"value": "{{language}}",
									"disabled": true
								}
							]
						},
						"description": "# Description\nGet a single category used to tag items in Spotify (on, for example, the Spotify player’s “Browse” tab).\n\n# Request Parameters\n## Path Parameters\n\n<table>\n  <thead>\n    <tr>\n      <th>Path Parameter</th>\n      <th>Value</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><code class=\"highlighter-rouge\">category_id</code></td>\n      <td>The <a href=\"/documentation/web-api/#spotify-uris-and-ids\">Spotify category ID</a> for the category.</td>\n    </tr>\n  </tbody>\n</table>\n\n## Header  Parameters\n<table>\n  <thead>\n    <tr>\n      <th>Header Field</th>\n      <th>Value</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>Authorization</td>\n      <td><strong>Required</strong>. A valid access token from the Spotify Accounts service: see the <a href=\"/documentation/general/guides/authorization-guide/\">Web API Authorization Guide</a> for details.</td>\n    </tr>\n  </tbody>\n</table>\n\n## Query Parameters\n<table>\n  <thead>\n    <tr>\n      <th>Query Parameter</th>\n      <th>Value</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>country</td>\n      <td><em>Optional</em>. A country: an <a href=\"http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2\" target=\"_blank\" class=\" externalLink\">ISO 3166-1 alpha-2 country code</a>. Provide this parameter to ensure that the category exists for a particular country.</td>\n    </tr>\n    <tr>\n      <td>locale</td>\n      <td><em>Optional</em>. The desired language, consisting of an <a href=\"http://en.wikipedia.org/wiki/ISO_639-1\" target=\"_blank\" class=\" externalLink\">ISO 639-1</a> language code and an <a href=\"http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2\" target=\"_blank\" class=\" externalLink\">ISO 3166-1 alpha-2 country code</a>, joined by an underscore. For example: <code class=\"highlighter-rouge\">es_MX</code>, meaning \"Spanish (Mexico)\". Provide this parameter if you want the category strings returned in a particular language. Note that, if <code class=\"highlighter-rouge\">locale</code> is not supplied, or if the specified language is not available, the category strings returned will be in the Spotify default language (American English).</td>\n    </tr>\n  </tbody>\n</table>\n\n# Response Format\nOn success, the HTTP status code in the response header is 200 OK and the response body contains a category object in JSON format. On error, the header status code is an error code and the response body contains an error object.\n\nOnce you have retrieved the category, you can use Get a Category’s Playlists to drill down further.\n\n# Objects\n## category object (full)\n<table>\n  <thead>\n    <tr>\n      <th>Key</th>\n      <th>Value Type</th>\n      <th>Value Description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>href</td>\n      <td>string</td>\n      <td>A link to the Web API endpoint returning full details of the category.</td>\n    </tr>\n    <tr>\n      <td>icons</td>\n      <td>an array of <a href=\"/documentation/web-api/reference/object-model/#image-object\">image objects</a></td>\n      <td>The category icon, in various sizes.</td>\n    </tr>\n    <tr>\n      <td>id</td>\n      <td>string</td>\n      <td>The <a href=\"/documentation/web-api/#spotify-uris-and-ids\">Spotify category ID</a> of the category.</td>\n    </tr>\n    <tr>\n      <td>name</td>\n      <td>string</td>\n      <td>The name of the category.</td>\n    </tr>\n  </tbody>\n</table>"
					},
					"response": [
						{
							"name": "Get a category",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"description": "access_token",
										"key": "Authorization",
										"type": "text",
										"value": "{{jwt}}"
									}
								],
								"url": {
									"raw": "{{URL}}api/v1/browse/categories/Indie-rock",
									"host": [
										"{{URL}}api"
									],
									"path": [
										"v1",
										"browse",
										"categories",
										"Indie-rock"
									],
									"query": [
										{
											"key": "country",
											"value": "{{country_code}}",
											"description": "\tOptional. A country: an ISO 3166-1 alpha-2 country code. Provide this parameter if you want to narrow the list of returned categories to those relevant to a particular country. If omitted, the returned items will be globally relevant.",
											"disabled": true
										},
										{
											"key": "locale",
											"value": "{{language}}",
											"disabled": true
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "X-DNS-Prefetch-Control",
									"value": "off"
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=15552000; includeSubDomains"
								},
								{
									"key": "X-Download-Options",
									"value": "noopen"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-XSS-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "193"
								},
								{
									"key": "ETag",
									"value": "W/\"c1-TCgvelWav44yOSQE2eaAuPfrfKM\""
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding"
								},
								{
									"key": "Date",
									"value": "Tue, 07 Apr 2020 20:52:13 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"icons\": [\n        {\n            \"url\": \"https://zasymphonia.ddns.net/api/v1/browse/categories/images/Indie-rock.jpg\",\n            \"width\": 300,\n            \"height\": 300\n        }\n    ],\n    \"name\": \"Indie rock\",\n    \"id\": \"Indie-rock\",\n    \"type\": \"category\",\n    \"href\": \"totot\"\n}"
						}
					]
				},
				{
					"name": "Get List of Categories",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"description": "access_token",
								"key": "Authorization",
								"type": "text",
								"value": "{{jwt}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{URL}}api/v1/browse/categories",
							"host": [
								"{{URL}}api"
							],
							"path": [
								"v1",
								"browse",
								"categories"
							],
							"query": [
								{
									"key": "country",
									"value": "{{country_code}}",
									"disabled": true
								},
								{
									"key": "locale",
									"value": "{{language}}",
									"disabled": true
								},
								{
									"key": "limit",
									"value": "10",
									"description": "Optional. The maximum number of items to return. Default: 20. Minimum: 1. Maximum: 50.\n",
									"disabled": true
								},
								{
									"key": "offset",
									"value": "10",
									"description": "Optional. The index of the first item to return. Default: 0 (the first object). Use with limit to get the next set of items.",
									"disabled": true
								},
								{
									"key": "hi",
									"value": "test",
									"description": "test",
									"disabled": true
								}
							]
						},
						"description": "# Description\nGet a list of categories used to tag items in Spotify (on, for example, the Spotify player’s “Browse” tab).\n\n# Request Parameters\n## Header Fields\n<table>\n  <thead>\n    <tr>\n      <th>Header Field</th>\n      <th>Value</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>Authorization</td>\n      <td><em>Required</em>. A valid access token from the Spotify Accounts service: see the <a href=\"/documentation/general/guides/authorization-guide/\">Web API Authorization Guide</a> for details.</td>\n    </tr>\n  </tbody>\n</table>\n\n## Query Parameters\n\n<table>\n  <thead>\n    <tr>\n      <th>Query Parameter</th>\n      <th>Value</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>country</td>\n      <td><em>Optional</em>. A country: an <a href=\"http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2\" target=\"_blank\" class=\" externalLink\">ISO 3166-1 alpha-2 country code</a>. Provide this parameter if you want to narrow the list of returned categories to those relevant to a particular country. If omitted, the returned items will be globally relevant.</td>\n    </tr>\n    <tr>\n      <td>locale</td>\n      <td><em>Optional</em>. The desired language, consisting of an <a href=\"http://en.wikipedia.org/wiki/ISO_639-1\" target=\"_blank\" class=\" externalLink\">ISO 639-1</a> language code and an <a href=\"http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2\" target=\"_blank\" class=\" externalLink\">ISO 3166-1 alpha-2 country code</a>, joined by an underscore. For example: <code class=\"highlighter-rouge\">es_MX</code>, meaning “Spanish (Mexico)”. Provide this parameter if you want the category metadata returned in a particular language. Note that, if <code class=\"highlighter-rouge\">locale</code> is not supplied, or if the specified language is not available, all strings will be returned in the Spotify default language (American English). The <code class=\"highlighter-rouge\">locale</code> parameter, combined with the <code class=\"highlighter-rouge\">country</code> parameter, may give odd results if not carefully matched. For example <code class=\"highlighter-rouge\">country=SE&amp;locale=de_DE</code> will return a list of categories relevant to Sweden but as German language strings.</td>\n    </tr>\n    <tr>\n      <td>limit</td>\n      <td><em>Optional</em>. The maximum number of categories to return. Default: 20. Minimum: 1. Maximum: 50.</td>\n    </tr>\n    <tr>\n      <td>offset</td>\n      <td><em>Optional</em>. The index of the first item to return. Default: 0 (the first object). Use with <code class=\"highlighter-rouge\">limit</code> to get the next set of categories.</td>\n    </tr>\n  </tbody>\n</table>\n\n#Response Format\nOn success, the HTTP status code in the response header is 200 OK and the response body contains an object with a categories field, with an array of category objects (wrapped in a paging object) in JSON format. On error, the header status code is an error code and the response body contains an error object.\n\nOnce you have retrieved the list, you can use Get a Category to drill down further.\n\n# objects\n## category object\n\n<table>\n  <thead>\n    <tr>\n      <th>Key</th>\n      <th>Value Type</th>\n      <th>Value Description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>href</td>\n      <td>string</td>\n      <td>A link to the Web API endpoint returning full details of the category.</td>\n    </tr>\n    <tr>\n      <td>icons</td>\n      <td>an array of <a href=\"/documentation/web-api/reference/object-model/#image-object\">image objects</a></td>\n      <td>The category icon, in various sizes.</td>\n    </tr>\n    <tr>\n      <td>id</td>\n      <td>string</td>\n      <td>The<a href=\"/documentation/web-api/#spotify-uris-and-ids\">Spotify category ID</a> of the category.</td>\n    </tr>\n    <tr>\n      <td>name</td>\n      <td>string</td>\n      <td>The name of the category.</td>\n    </tr>\n  </tbody>\n</table>\n\n## paging object\n\n<table>\n  <thead>\n    <tr>\n      <th>Key</th>\n      <th>Value Type</th>\n      <th>Value Description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>href</td>\n      <td>string</td>\n      <td>A link to the Web API endpoint returning the full result of the request.</td>\n    </tr>\n    <tr>\n      <td>items</td>\n      <td>an array of objects</td>\n      <td>The requested data.</td>\n    </tr>\n    <tr>\n      <td>limit</td>\n      <td>integer</td>\n      <td>The maximum number of items in the response (as set in the query or by default).</td>\n    </tr>\n    <tr>\n      <td>next</td>\n      <td>string</td>\n      <td>URL to the next page of items. (<code class=\"highlighter-rouge\">null</code> if none)</td>\n    </tr>\n    <tr>\n      <td>offset</td>\n      <td>integer</td>\n      <td>The offset of the items returned (as set in the query or by default).</td>\n    </tr>\n    <tr>\n      <td>previous</td>\n      <td>string</td>\n      <td>URL to the previous page of items. (<code class=\"highlighter-rouge\">null</code> if none)</td>\n    </tr>\n    <tr>\n      <td>total</td>\n      <td>integer</td>\n      <td>The total number of items available to return.</td>\n    </tr>\n  </tbody>\n</table>"
					},
					"response": [
						{
							"name": "Get List of Categories",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "access_token",
										"key": "Authorization",
										"type": "text",
										"value": "{{jwt}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{URL}}api/v1/browse/categories",
									"host": [
										"{{URL}}api"
									],
									"path": [
										"v1",
										"browse",
										"categories"
									],
									"query": [
										{
											"key": "country",
											"value": "{{country_code}}",
											"disabled": true
										},
										{
											"key": "locale",
											"value": "{{language}}",
											"disabled": true
										},
										{
											"key": "limit",
											"value": "10",
											"description": "Optional. The maximum number of items to return. Default: 20. Minimum: 1. Maximum: 50.\n",
											"disabled": true
										},
										{
											"key": "offset",
											"value": "10",
											"description": "Optional. The index of the first item to return. Default: 0 (the first object). Use with limit to get the next set of items.",
											"disabled": true
										},
										{
											"key": "hi",
											"value": "test",
											"description": "test",
											"disabled": true
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "X-DNS-Prefetch-Control",
									"value": "off"
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=15552000; includeSubDomains"
								},
								{
									"key": "X-Download-Options",
									"value": "noopen"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-XSS-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "981"
								},
								{
									"key": "ETag",
									"value": "W/\"3d5-+kuA9Tj0aX+XB2/GKpUd+rRb4ME\""
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding"
								},
								{
									"key": "Date",
									"value": "Tue, 07 Apr 2020 20:52:39 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"status\": \"success\",\n    \"results\": 4,\n    \"data\": {\n        \"categorys\": [\n            {\n                \"icons\": [\n                    {\n                        \"url\": \"https://zasymphonia.ddns.net/api/v1/browse/categories/images/Psychedelic-pop.jpg\",\n                        \"width\": 300,\n                        \"height\": 300\n                    }\n                ],\n                \"_id\": \"5e8072e5e478cf39b47bd1ef\",\n                \"name\": \"Psychedelic pop\",\n                \"id\": \"Psychedelic-pop\",\n                \"type\": \"category\",\n                \"href\": \"totot\"\n            },\n            {\n                \"icons\": [\n                    {\n                        \"url\": \"https://zasymphonia.ddns.net/api/v1/browse/categories/images/Indie-rock.jpg\",\n                        \"width\": 300,\n                        \"height\": 300\n                    }\n                ],\n                \"_id\": \"5e807517e478cf39b47bd1f0\",\n                \"name\": \"Indie rock\",\n                \"id\": \"Indie-rock\",\n                \"type\": \"category\",\n                \"href\": \"totot\"\n            },\n            {\n                \"icons\": [\n                    {\n                        \"url\": \"https://zasymphonia.ddns.net/api/v1/browse/categories/images/Alternative.jpg\",\n                        \"width\": 300,\n                        \"height\": 300\n                    }\n                ],\n                \"_id\": \"5e8076e6a9902a4328cc285c\",\n                \"name\": \"Alternative\",\n                \"id\": \"Alternative\",\n                \"type\": \"category\",\n                \"href\": \"totot\"\n            },\n            {\n                \"icons\": [\n                    {\n                        \"url\": \"https://zasymphonia.ddns.net/api/v1/browse/categories/images/Electronic.jpg\",\n                        \"width\": 300,\n                        \"height\": 300\n                    }\n                ],\n                \"_id\": \"5e883e48c808fd1aa40ad1f8\",\n                \"name\": \"Electronic\",\n                \"id\": \"Electronic\",\n                \"type\": \"category\",\n                \"href\": \"totot\"\n            }\n        ]\n    }\n}"
						}
					]
				},
				{
					"name": "Get a Category's Playlists",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"description": "access_token",
								"key": "Authorization",
								"type": "text",
								"value": "{{jwt}}"
							}
						],
						"url": {
							"raw": "{{URL}}api/v1/browse/categories/Alternative/playlists",
							"host": [
								"{{URL}}api"
							],
							"path": [
								"v1",
								"browse",
								"categories",
								"Alternative",
								"playlists"
							],
							"query": [
								{
									"key": "country",
									"value": "{{country_code}}",
									"disabled": true
								},
								{
									"key": "locale",
									"value": "{{language}}",
									"disabled": true
								},
								{
									"key": "offset",
									"value": "2",
									"description": "Optional. The index of the first item to return. Default: 0 (the first object). Use with limit to get the next set of items.",
									"disabled": true
								},
								{
									"key": "",
									"value": null,
									"disabled": true
								},
								{
									"key": "limit",
									"value": "1",
									"disabled": true
								}
							]
						},
						"description": "# Description\nGet a list of Spotify playlists tagged with a particular category.\n\n# Request Parameters\n## Path Parameters\n<table>\n  <thead>\n    <tr>\n      <th>Path Parameter</th>\n      <th>Value</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>category_id</td>\n      <td>The <a href=\"/documentation/web-api/#spotify-uris-and-ids\">Spotify category ID</a> for the category.</td>\n    </tr>\n  </tbody>\n</table>\n\n## Header Fields\n<table>\n  <thead>\n    <tr>\n      <th>Header Field</th>\n      <th>Value</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>Authorization</td>\n      <td><em>Required</em>. A valid access token from the Spotify Accounts service: see the <a href=\"/documentation/general/guides/authorization-guide/\">Web API Authorization Guide</a> for details.</td>\n    </tr>\n  </tbody>\n</table>\n\n## Query Parameters\n<table>\n  <thead>\n    <tr>\n      <th>Query Parameter</th>\n      <th>Value</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>country</td>\n      <td><em>Optional</em>. A country: an <a href=\"http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2\" target=\"_blank\" class=\" externalLink\">ISO 3166-1 alpha-2 country code</a>.</td>\n    </tr>\n    <tr>\n      <td>limit</td>\n      <td><em>Optional</em>. The maximum number of items to return. Default: 20. Minimum: 1. Maximum: 50.</td>\n    </tr>\n    <tr>\n      <td>offset</td>\n      <td><em>Optional</em>. The index of the first item to return. Default: 0 (the first object). Use with <code class=\"highlighter-rouge\">limit</code> to get the next set of items.</td>\n    </tr>\n  </tbody>\n</table>\n\n# Response Format\nOn success, the HTTP status code in the response header is 200 OK and the response body contains an array of simplified playlist objects (wrapped in a paging object) in JSON format. On error, the header status code is an error code and the response body contains an error object.\n\n\n# objects\n## playlist object (simplified)\n\n<table>\n  <thead>\n    <tr>\n      <th>Key</th>\n      <th>Value Type</th>\n      <th>Value Description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>collaborative</td>\n      <td>Boolean</td>\n      <td><code class=\"highlighter-rouge\">true</code> if the owner allows other users to modify the playlist.</td>\n    </tr>\n    <tr>\n      <td>description</td>\n      <td>string</td>\n      <td>The playlist description. <em>Only returned for modified, verified playlists, otherwise</em> <code class=\"highlighter-rouge\">null</code> .</td>\n    </tr>\n    <tr>\n      <td>external_urls</td>\n      <td>an <a href=\"/documentation/web-api/reference/object-model/#external-url-object\">external URL object</a></td>\n      <td>Known external URLs for this playlist.</td>\n    </tr>\n    <tr>\n      <td>href</td>\n      <td>string</td>\n      <td>A link to the Web API endpoint providing full details of the playlist.</td>\n    </tr>\n    <tr>\n      <td>id</td>\n      <td>string</td>\n      <td>The<a href=\"/documentation/web-api/#spotify-uris-and-ids\">Spotify ID</a> for the playlist.</td>\n    </tr>\n    <tr>\n      <td>images</td>\n      <td>an array of <a href=\"/documentation/web-api/reference/object-model/#image-object\">image objects</a></td>\n      <td>Images for the playlist. The array may be empty or contain up to three images. The images are returned by size in descending order. See <a href=\"/documentation/general/guides/working-with-playlists/\">Working with Playlists</a>. <em>Note: If returned, the source URL for the image (<code class=\"highlighter-rouge\">url</code>) is temporary and will expire in less than a day.</em></td>\n    </tr>\n    <tr>\n      <td>name</td>\n      <td>string</td>\n      <td>The name of the playlist.</td>\n    </tr>\n    <tr>\n      <td>owner</td>\n      <td>a <a href=\"/documentation/web-api/reference/object-model/#user-object-public\">user object</a></td>\n      <td>The user who owns the playlist</td>\n    </tr>\n    <tr>\n      <td>public</td>\n      <td>Boolean or <code class=\"highlighter-rouge\">null</code></td>\n      <td>The playlist’s public/private status: <code class=\"highlighter-rouge\">true</code> the playlist is public, <code class=\"highlighter-rouge\">false</code> the playlist is private, <code class=\"highlighter-rouge\">null</code> the playlist status is not relevant. For more about public/private status, see <a href=\"/documentation/general/guides/working-with-playlists/\">Working with Playlists</a>.</td>\n    </tr>\n    <tr>\n      <td>snapshot_id</td>\n      <td>string</td>\n      <td>The version identifier for the current playlist. Can be supplied in other requests to target a specific playlist version</td>\n    </tr>\n    <tr>\n      <td>tracks</td>\n      <td>a tracks object</td>\n      <td>A collection containing a link (<code class=\"highlighter-rouge\">href</code>) to the Web API endpoint where full details of the playlist’s tracks can be retrieved, along with the <code class=\"highlighter-rouge\">total</code> number of tracks in the playlist.</td>\n    </tr>\n    <tr>\n      <td>type</td>\n      <td>string</td>\n      <td>The object type: “playlist”</td>\n    </tr>\n    <tr>\n      <td>uri</td>\n      <td>string</td>\n      <td>The <a href=\"/documentation/web-api/#spotify-uris-and-ids\">Spotify URI</a> for the playlist.</td>\n    </tr>\n  </tbody>\n</table>\n\n\n## paging object\n<table>\n  <thead>\n    <tr>\n      <th>Key</th>\n      <th>Value Type</th>\n      <th>Value Description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>href</td>\n      <td>string</td>\n      <td>A link to the Web API endpoint returning the full result of the request.</td>\n    </tr>\n    <tr>\n      <td>items</td>\n      <td>an array of objects</td>\n      <td>The requested data.</td>\n    </tr>\n    <tr>\n      <td>limit</td>\n      <td>integer</td>\n      <td>The maximum number of items in the response (as set in the query or by default).</td>\n    </tr>\n    <tr>\n      <td>next</td>\n      <td>string</td>\n      <td>URL to the next page of items. (<code class=\"highlighter-rouge\">null</code> if none)</td>\n    </tr>\n    <tr>\n      <td>offset</td>\n      <td>integer</td>\n      <td>The offset of the items returned (as set in the query or by default).</td>\n    </tr>\n    <tr>\n      <td>previous</td>\n      <td>string</td>\n      <td>URL to the previous page of items. (<code class=\"highlighter-rouge\">null</code> if none)</td>\n    </tr>\n    <tr>\n      <td>total</td>\n      <td>integer</td>\n      <td>The total number of items available to return.</td>\n    </tr>\n  </tbody>\n</table>"
					},
					"response": [
						{
							"name": "Get a Category's Playlists",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "access_token",
										"key": "Authorization",
										"type": "text",
										"value": "{{jwt}}"
									}
								],
								"url": {
									"raw": "{{URL}}api/v1/browse/categories/Alternative/playlists",
									"host": [
										"{{URL}}api"
									],
									"path": [
										"v1",
										"browse",
										"categories",
										"Alternative",
										"playlists"
									],
									"query": [
										{
											"key": "country",
											"value": "{{country_code}}",
											"disabled": true
										},
										{
											"key": "locale",
											"value": "{{language}}",
											"disabled": true
										},
										{
											"key": "offset",
											"value": "2",
											"description": "Optional. The index of the first item to return. Default: 0 (the first object). Use with limit to get the next set of items.",
											"disabled": true
										},
										{
											"key": "",
											"value": null,
											"disabled": true
										},
										{
											"key": "limit",
											"value": "1",
											"disabled": true
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "X-DNS-Prefetch-Control",
									"value": "off"
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=15552000; includeSubDomains"
								},
								{
									"key": "X-Download-Options",
									"value": "noopen"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-XSS-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "ETag",
									"value": "W/\"762-eIoivwJ/Suptbgp0dp72WGSpTeU\""
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip"
								},
								{
									"key": "Date",
									"value": "Tue, 07 Apr 2020 20:53:12 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								}
							],
							"cookie": [],
							"body": "{\n    \"playlists\": {\n        \"total\": 3,\n        \"next\": \"http://localhost:3000/api/v1/browse/categories/Alternative/playlists?offset=20&limit=20\",\n        \"previous\": null,\n        \"href\": \"http://localhost:3000/api/v1/browse/categories/Alternative/playlists?offset=0&limit=20\",\n        \"items\": [\n            {\n                \"collaborative\": true,\n                \"images\": [\n                    \"https://zasymphonia.ddns.net/api/v1/images/playlists/playlist3.jpg\"\n                ],\n                \"public\": true,\n                \"tracks\": [\n                    \"5e8a1ea07937ec4d40c6debf\"\n                ],\n                \"followers\": [\n                    \"5e812db054660672fd699881\",\n                    \"5e812a3454660672fd699880\"\n                ],\n                \"_id\": \"5e805a8a3711912168602afa\",\n                \"name\": \"Soak Up the Sun\",\n                \"owner\": \"5e8125dc54660672fd69987f\",\n                \"description\": \"My Parents Pay for my Premium Account, My Rent, and Literally Everything Else\",\n                \"category\": \"5e8076e6a9902a4328cc285c\",\n                \"id\": \"5e805a8a3711912168602afa\"\n            },\n            {\n                \"collaborative\": false,\n                \"images\": [\n                    \"https://zasymphonia.ddns.net/api/v1/images/playlists/playlist6.jpg\"\n                ],\n                \"public\": true,\n                \"tracks\": [\n                    \"5e8a39f24e11cd46c8bde654\",\n                    \"5e8a37d0d56ea252c3860a1a\",\n                    \"5e8a1ea07937ec4d40c6debf\",\n                    \"5e8a1e9a7937ec4d40c6debe\",\n                    \"5e8a1e937937ec4d40c6debd\",\n                    \"5e8a1e767937ec4d40c6debc\"\n                ],\n                \"followers\": [\n                    \"5e8125dc54660672fd69987f\"\n                ],\n                \"_id\": \"5e8078b0dbaafc18605cb029\",\n                \"name\": \"Power Workout\",\n                \"owner\": \"5e812a3454660672fd699880\",\n                \"description\": \"Pump Up Jams for Carrying Groceries Up to My Sixth Floor Walk-Up\",\n                \"category\": \"5e8076e6a9902a4328cc285c\",\n                \"id\": \"5e8078b0dbaafc18605cb029\"\n            },\n            {\n                \"collaborative\": false,\n                \"images\": [\n                    \"https://zasymphonia.ddns.net/api/v1/images/playlists/playlist7.jpg\"\n                ],\n                \"public\": true,\n                \"tracks\": [\n                    \"5e8a1e767937ec4d40c6debc\",\n                    \"5e8a1e937937ec4d40c6debd\",\n                    \"5e8a1e9a7937ec4d40c6debe\"\n                ],\n                \"followers\": [\n                    \"5e8125dc54660672fd69987f\"\n                ],\n                \"_id\": \"5e8088fa79844f135496ec7f\",\n                \"name\": \"Breakup Songs\",\n                \"owner\": \"5e812db054660672fd699881\",\n                \"description\": \"I Have Terrible News for You and I’ll Tell You What Right After This 30 Second Ad for Sam Adams Summer Ale Ends and The Cure Starts Playing\",\n                \"category\": \"5e8076e6a9902a4328cc285c\",\n                \"id\": \"5e8088fa79844f135496ec7f\"\n            }\n        ],\n        \"limit\": 20,\n        \"offset\": 0\n    }\n}"
						}
					]
				},
				{
					"name": "Get a List of Featured Playlists",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"description": "access_token",
								"key": "Authorization",
								"type": "text",
								"value": "{{jwt}}"
							}
						],
						"url": {
							"raw": "{{URL}}api/v1/browse/featured-playlists/{{category_id}}/playlists",
							"host": [
								"{{URL}}api"
							],
							"path": [
								"v1",
								"browse",
								"featured-playlists",
								"{{category_id}}",
								"playlists"
							],
							"query": [
								{
									"key": "country",
									"value": "{{country_code}}",
									"disabled": true
								},
								{
									"key": "locale",
									"value": "{{language}}",
									"disabled": true
								},
								{
									"key": "limit",
									"value": "10",
									"description": "Optional. The maximum number of items to return. Default: 20. Minimum: 1. Maximum: 50.\n",
									"disabled": true
								},
								{
									"key": "offset",
									"value": "10",
									"description": "Optional. The index of the first item to return. Default: 0 (the first object). Use with limit to get the next set of items.",
									"disabled": true
								},
								{
									"key": "timestamp",
									"value": "2014-10-23T09:00:00",
									"description": "\tOptional. A timestamp in ISO 8601 format: yyyy-MM-ddTHH:mm:ss. Use this parameter to specify the user’s local time to get results tailored for that specific date and time in the day. If not provided, the response defaults to the current UTC time. Example: “2014-10-23T09:00:00” for a user whose local time is 9AM. If there were no featured playlists (or there is no data) at the specified time, the response will revert to the current UTC time.",
									"disabled": true
								}
							]
						},
						"description": "# Description\nGet a list of Spotify featured playlists (shown, for example, on a Spotify player’s ‘Browse’ tab).\n\n# Request Parameters\n## Header Fields\n<table>\n  <thead>\n    <tr>\n      <th>Header Field</th>\n      <th>Value</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>Authorization</td>\n      <td><em>Required</em>. A valid access token from the Spotify Accounts service: see the <a href=\"/documentation/general/guides/authorization-guide/\">Web API Authorization Guide</a> for details.</td>\n    </tr>\n  </tbody>\n</table>\n\n## Query Parameters\n<table>\n  <thead>\n    <tr>\n      <th>Query Parameter</th>\n      <th>Value</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>locale</td>\n      <td><em>Optional</em>. The desired language, consisting of a lowercase <a href=\"#\" target=\"_blank\" class=\" externalLink\">ISO 639-1 language code</a> and an uppercase <a href=\"#\" target=\"_blank\" class=\" externalLink\">ISO 3166-1 alpha-2 country code</a>, joined by an underscore. For example: <code class=\"highlighter-rouge\">es_MX</code>, meaning “Spanish (Mexico)”. Provide this parameter if you want the results returned in a particular language (where available). Note that, if <code class=\"highlighter-rouge\">locale</code> is not supplied, or if the specified language is not available, all strings will be returned in the Spotify default language (American English). The <code class=\"highlighter-rouge\">locale</code> parameter, combined with the <code class=\"highlighter-rouge\">country</code> parameter, may give odd results if not carefully matched. For example <code class=\"highlighter-rouge\">country=SE&amp;locale=de_DE</code> will return a list of categories relevant to Sweden but as German language strings.</td>\n    </tr>\n    <tr>\n      <td>country</td>\n      <td><em>Optional</em>. A country: an <a href=\"http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2\" target=\"_blank\" class=\" externalLink\">ISO 3166-1 alpha-2 country code</a>. Provide this parameter if you want the list of returned items to be relevant to a particular country. If omitted, the returned items will be relevant to all countries.</td>\n    </tr>\n    <tr>\n      <td>timestamp</td>\n      <td><em>Optional</em>. A timestamp in <a href=\"#\" target=\"_blank\" class=\" externalLink\">ISO 8601 format</a>: <code class=\"highlighter-rouge\">yyyy-MM-ddTHH:mm:ss</code>. Use this parameter to specify the user’s local time to get results tailored for that specific date and time in the day. If not provided, the response defaults to the current UTC time. Example: “2014-10-23T09:00:00” for a user whose local time is 9AM. If there were no featured playlists (or there is no data) at the specified time, the response will revert to the current UTC time.</td>\n    </tr>\n    <tr>\n      <td>limit</td>\n      <td><em>Optional</em>. The maximum number of items to return. Default: 20. Minimum: 1. Maximum: 50.</td>\n    </tr>\n    <tr>\n      <td>offset</td>\n      <td><em>Optional</em>. The index of the first item to return. Default: 0 (the first object). Use with <code class=\"highlighter-rouge\">limit</code> to get the next set of items.</td>\n    </tr>\n  </tbody>\n</table>\n\n# Response Format\nOn success, the HTTP status code in the response header is 200 OK and the response body contains a message and a playlists object. The playlists object contains an array of simplified playlist objects (wrapped in a paging object) in JSON format. On error, the header status code is an error code and the response body contains an error object.\n\nOnce you have retrieved the list of playlist objects, you can use Get a Playlist and Get a Playlist’s Tracks to drill down further."
					},
					"response": []
				},
				{
					"name": "Get List of new-releases",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"description": "access_token",
								"key": "Authorization",
								"type": "text",
								"value": "{{jwt}}"
							}
						],
						"url": {
							"raw": "{{URL}}api/v1/browse/new-releases?offset=0&limit=2",
							"host": [
								"{{URL}}api"
							],
							"path": [
								"v1",
								"browse",
								"new-releases"
							],
							"query": [
								{
									"key": "country",
									"value": "{{country_code}}",
									"disabled": true
								},
								{
									"key": "locale",
									"value": "{{language}}",
									"disabled": true
								},
								{
									"key": "offset",
									"value": "0",
									"description": "Optional. The index of the first item to return. Default: 0 (the first object). Use with limit to get the next set of items."
								},
								{
									"key": "limit",
									"value": "2",
									"description": "Optioanal: the maximum number of items to return"
								}
							]
						},
						"description": "#Description\nGet a list of new album releases featured in Spotify (shown, for example, on a Spotify player’s “Browse” tab).\n# Request Parameters\n## Header Fields\n<table>\n  <thead>\n    <tr>\n      <th>Header Field</th>\n      <th>Value</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>Authorization</td>\n      <td><em>Required</em>. A valid access token from the Spotify Accounts service: see the <a href=\"#\">Web API Authorization Guide</a> for details.</td>\n    </tr>\n  </tbody>\n</table>\n\n\n## Query Parameters\n<table>\n  <thead>\n    <tr>\n      <th>Query Parameter</th>\n      <th>Value</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>country</td>\n      <td><em>Optional</em>. A country: an <a href=\"#\" target=\"_blank\" class=\" externalLink\">ISO 3166-1 alpha-2 country code</a>. Provide this parameter if you want the list of returned items to be relevant to a particular country. If omitted, the returned items will be relevant to all countries.</td>\n    </tr>\n    <tr>\n      <td>limit</td>\n      <td><em>Optional</em>. The maximum number of items to return. Default: 20. Minimum: 1. Maximum: 50.</td>\n    </tr>\n    <tr>\n      <td>offset</td>\n      <td><em>Optional</em>. The index of the first item to return. Default: 0 (the first object). Use with <code class=\"highlighter-rouge\">limit</code> to get the next set of items.</td>\n    </tr>\n  </tbody>\n</table>\n\n\n# Response Format\nOn success, the HTTP status code in the response header is 200 OK and the response body contains a message and analbums object. The albums object contains an array of simplified album objects (wrapped in a paging object) in JSON format. On error, the header status code is an error code and the response body contains an error object.\n\nOnce you have retrieved the list, you can use Get an Album’s Tracks to drill down further.\n\nThe results are returned in an order reflected within the Spotify clients, and therefore may not be ordered by date.\n\n# objects\n\n## album object (simplified)\n\n<table>\n  <thead>\n    <tr>\n      <th>Key</th>\n      <th>Value Type</th>\n      <th>Value Description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>album_type</td>\n      <td>string</td>\n      <td>The type of the album: one of “album”, “single”, or “compilation”.</td>\n    </tr>\n    <tr>\n      <td>artists</td>\n      <td>array of simplified <a href=\"#\">artist objects</a></td>\n      <td>The artists of the album. Each artist object includes a link in <code class=\"highlighter-rouge\">href</code> to more detailed information about the artist.</td>\n    </tr>\n    <tr>\n      <td>available_markets</td>\n      <td>array of strings</td>\n      <td>The markets in which the album is available: <a href=\"#\" target=\"_blank\" class=\" externalLink\">ISO 3166-1 alpha-2 country codes</a>. Note that an album is considered available in a market when at least 1 of its tracks is available in that market.</td>\n    </tr>\n    <tr>\n      <td>external_urls</td>\n      <td>an <a href=\"#\">external URL object</a></td>\n      <td>Known external URLs for this album.</td>\n    </tr>\n    <tr>\n      <td>href</td>\n      <td>string</td>\n      <td>A link to the Web API endpoint providing full details of the album.</td>\n    </tr>\n    <tr>\n      <td>id</td>\n      <td>string</td>\n      <td>The <a href=\"#\">Spotify ID</a> for the album.</td>\n    </tr>\n    <tr>\n      <td>images</td>\n      <td>array of <a href=\"#\">image objects</a></td>\n      <td>The cover art for the album in various sizes, widest first.</td>\n    </tr>\n    <tr>\n      <td>name</td>\n      <td>string</td>\n      <td>The name of the album. In case of an album takedown, the value may be an empty string.</td>\n    </tr>\n    <tr>\n      <td>type</td>\n      <td>string</td>\n      <td>The object type: “album”</td>\n    </tr>\n    <tr>\n      <td>uri</td>\n      <td>string</td>\n      <td>The <a href=\"#\">Spotify URI</a> for the album.</td>\n    </tr>\n  </tbody>\n</table>\n\n## paging object\n<table>\n  <thead>\n    <tr>\n      <th>Key</th>\n      <th>Value Type</th>\n      <th>Value Description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>href</td>\n      <td>string</td>\n      <td>A link to the Web API endpoint returning the full result of the request.</td>\n    </tr>\n    <tr>\n      <td>items</td>\n      <td>an array of objects</td>\n      <td>The requested data.</td>\n    </tr>\n    <tr>\n      <td>limit</td>\n      <td>integer</td>\n      <td>The maximum number of items in the response (as set in the query or by default).</td>\n    </tr>\n    <tr>\n      <td>next</td>\n      <td>string</td>\n      <td>URL to the next page of items. (<code class=\"highlighter-rouge\">null</code> if none)</td>\n    </tr>\n    <tr>\n      <td>offset</td>\n      <td>integer</td>\n      <td>The offset of the items returned (as set in the query or by default).</td>\n    </tr>\n    <tr>\n      <td>previous</td>\n      <td>string</td>\n      <td>URL to the previous page of items. (<code class=\"highlighter-rouge\">null</code> if none)</td>\n    </tr>\n    <tr>\n      <td>total</td>\n      <td>integer</td>\n      <td>The total number of items available to return.</td>\n    </tr>\n  </tbody>\n</table>"
					},
					"response": [
						{
							"name": "Get List of new-releases",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "access_token",
										"key": "Authorization",
										"type": "text",
										"value": "{{jwt}}"
									}
								],
								"url": {
									"raw": "{{URL}}api/v1/browse/new-releases?limit=2&offset=0",
									"host": [
										"{{URL}}api"
									],
									"path": [
										"v1",
										"browse",
										"new-releases"
									],
									"query": [
										{
											"key": "country",
											"value": "{{country_code}}",
											"disabled": true
										},
										{
											"key": "locale",
											"value": "{{language}}",
											"disabled": true
										},
										{
											"key": "limit",
											"value": "2",
											"description": "Optional. The maximum number of items to return. Default: 20. Minimum: 1. Maximum: 50.\n"
										},
										{
											"key": "offset",
											"value": "0",
											"description": "0Optional. The index of the first item to return. Default: 0 (the first object). Use with limit to get the next set of items."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "X-DNS-Prefetch-Control",
									"value": "off"
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=15552000; includeSubDomains"
								},
								{
									"key": "X-Download-Options",
									"value": "noopen"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-XSS-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "X-RateLimit-Limit",
									"value": "1000"
								},
								{
									"key": "X-RateLimit-Remaining",
									"value": "993"
								},
								{
									"key": "Date",
									"value": "Sun, 05 Apr 2020 15:31:32 GMT"
								},
								{
									"key": "X-RateLimit-Reset",
									"value": "1586104170"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "433"
								},
								{
									"key": "ETag",
									"value": "W/\"1b1-rJjaauQ+kcgb54BrL49uSZWXZ4s\""
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"albums\": {\n        \"total\": 2,\n        \"next\": \"not working\",\n        \"previous\": \"not working\",\n        \"href\": \"http://localhost:3000/api/v1/browse/new-releases\",\n        \"items\": [\n            {\n                \"tracks\": [],\n                \"releaseDate\": \"2020-03-05T15:00:15.635Z\",\n                \"_id\": \"5e89f2fe75bcc40cc4b5a734\",\n                \"name\": \"alb2\",\n                \"artist\": \"5e7f768ddb66b448b4356322\"\n            },\n            {\n                \"tracks\": [],\n                \"releaseDate\": \"2020-03-05T15:00:15.635Z\",\n                \"_id\": \"5e89f32d75bcc40cc4b5a735\",\n                \"name\": \"alb3\",\n                \"artist\": \"5e7f768ddb66b448b4356322\"\n            }\n        ],\n        \"limit\": 2,\n        \"offset\": 1\n    }\n}"
						}
					]
				},
				{
					"name": "Create A category",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c19eb97f-4bbe-4d9f-88d7-3db3d9231a6f",
								"exec": [
									"h = parseInt(pm.environment.get(\"lNum\")); ",
									"pm.environment.set(\"lNum\", h + 1 );"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"description": "access_token",
								"key": "Authorization",
								"type": "text",
								"value": "{{jwt}}",
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "rocky has {{lNum}}",
									"type": "text"
								},
								{
									"key": "icons",
									"type": "file",
									"src": [
										"/E:/DuckUML.JPG",
										"/E:/images.jpg"
									],
									"disabled": true
								},
								{
									"key": "icon",
									"type": "file",
									"src": "/E:/speed net.png"
								},
								{
									"key": "icon_md",
									"type": "file",
									"src": "/E:/speed net.png",
									"disabled": true
								},
								{
									"key": "icon_lg",
									"type": "file",
									"src": "/E:/DuckUML.JPG",
									"disabled": true
								},
								{
									"key": "id",
									"value": "haha haha",
									"type": "text",
									"disabled": true
								}
							],
							"options": {
								"formdata": {}
							}
						},
						"url": {
							"raw": "{{url}}api/v1/browse/categories/?test=test",
							"host": [
								"{{url}}api"
							],
							"path": [
								"v1",
								"browse",
								"categories",
								""
							],
							"query": [
								{
									"key": "country",
									"value": "{{country_code}}",
									"description": "\tOptional. A country: an ISO 3166-1 alpha-2 country code. Provide this parameter if you want to narrow the list of returned categories to those relevant to a particular country. If omitted, the returned items will be globally relevant.",
									"disabled": true
								},
								{
									"key": "locale",
									"value": "{{language}}",
									"disabled": true
								},
								{
									"key": "test",
									"value": "test"
								}
							]
						},
						"description": "# Description\nCraet a single Category\n# Request Parameters\n## Path Parameters\n\n## Header  Parameters\n<table>\n  <thead>\n    <tr>\n      <th>Header Field</th>\n      <th>Value</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>Authorization</td>\n      <td><strong>Required</strong>. A valid access token from the Spotify Accounts service: see the <a href=\"/documentation/general/guides/authorization-guide/\">Web API Authorization Guide</a> for details.</td>\n    </tr>\n  </tbody>\n</table>\n\n## Query Parameters\n<table>\n  <thead>\n    <tr>\n      <th>Query Parameter</th>\n      <th>description</th>\n    </tr>\n    <tr>\n    <td>icons_sm</td>\n    <td>a small version of the category image</td>\n    </tr>\n  </thead>\n  <tbody>\n    \n  </tbody>\n</table>\n\n# Response Format\nOn success, the HTTP status code in the response header is 200 OK and the response body contains a category object in JSON format. On error, the header status code is an error code and the response body contains an error object.\n\nOnce you have retrieved the category, you can use Get a Category’s Playlists to drill down further."
					},
					"response": [
						{
							"name": "Create A category",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "access_token",
										"key": "Authorization",
										"type": "text",
										"value": "{{jwt}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "name",
											"value": "rocky has {{lNum}}",
											"type": "text"
										},
										{
											"key": "icons",
											"type": "file",
											"src": [
												"/E:/DuckUML.JPG",
												"/E:/images.jpg"
											],
											"disabled": true
										},
										{
											"key": "icon",
											"type": "file",
											"src": "/E:/speed net.png"
										},
										{
											"key": "icon_md",
											"type": "file",
											"src": "/E:/speed net.png",
											"disabled": true
										},
										{
											"key": "icon_lg",
											"type": "file",
											"src": "/E:/DuckUML.JPG",
											"disabled": true
										},
										{
											"key": "id",
											"value": "haha haha",
											"type": "text",
											"disabled": true
										}
									],
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}api/v1/browse/categories/?test=test",
									"host": [
										"{{url}}api"
									],
									"path": [
										"v1",
										"browse",
										"categories",
										""
									],
									"query": [
										{
											"key": "country",
											"value": "{{country_code}}",
											"description": "\tOptional. A country: an ISO 3166-1 alpha-2 country code. Provide this parameter if you want to narrow the list of returned categories to those relevant to a particular country. If omitted, the returned items will be globally relevant.",
											"disabled": true
										},
										{
											"key": "locale",
											"value": "{{language}}",
											"disabled": true
										},
										{
											"key": "test",
											"value": "test"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "X-DNS-Prefetch-Control",
									"value": "off"
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=15552000; includeSubDomains"
								},
								{
									"key": "X-Download-Options",
									"value": "noopen"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-XSS-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "X-RateLimit-Limit",
									"value": "1000"
								},
								{
									"key": "X-RateLimit-Remaining",
									"value": "997"
								},
								{
									"key": "Date",
									"value": "Sat, 04 Apr 2020 07:59:04 GMT"
								},
								{
									"key": "X-RateLimit-Reset",
									"value": "1585990596"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "229"
								},
								{
									"key": "ETag",
									"value": "W/\"e5-S94hfcMlmmUVQ+ztKKDb7bM5SLE\""
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"category\": {\n        \"icons\": [\n            {\n                \"url\": \"http://localhost:3000/api/v1/browse/categories/images/rocky-has-34.png\",\n                \"width\": 1355,\n                \"heght\": 1027\n            }\n        ],\n        \"_id\": \"5e883e48c808fd1aa40ad1f8\",\n        \"name\": \"rocky has 34\",\n        \"id\": \"rocky-has-34\",\n        \"__v\": 0,\n        \"href\": \"totot\"\n    }\n}"
						}
					]
				},
				{
					"name": "Get List of Artists",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"description": "access_token",
								"key": "Authorization",
								"type": "text",
								"value": "{{jwt}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{URL}}api/v1/browse/artists",
							"host": [
								"{{URL}}api"
							],
							"path": [
								"v1",
								"browse",
								"artists"
							],
							"query": [
								{
									"key": "country",
									"value": "{{country_code}}",
									"disabled": true
								},
								{
									"key": "locale",
									"value": "{{language}}",
									"disabled": true
								},
								{
									"key": "limit",
									"value": "10",
									"description": "Optional. The maximum number of items to return. Default: 20. Minimum: 1. Maximum: 50.\n",
									"disabled": true
								},
								{
									"key": "offset",
									"value": "10",
									"description": "Optional. The index of the first item to return. Default: 0 (the first object). Use with limit to get the next set of items.",
									"disabled": true
								},
								{
									"key": "hi",
									"value": "test",
									"description": "test",
									"disabled": true
								}
							]
						},
						"description": "#Description\nGet a list of new album releases featured in Spotify (shown, for example, on a Spotify player’s “Browse” tab).\n# Request Parameters\n## Header Fields\n<table>\n  <thead>\n    <tr>\n      <th>Header Field</th>\n      <th>Value</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>Authorization</td>\n      <td><em>Required</em>. A valid access token from the Spotify Accounts service: see the <a href=\"#\">Web API Authorization Guide</a> for details.</td>\n    </tr>\n  </tbody>\n</table>\n\n\n## Query Parameters\n<table>\n  <thead>\n    <tr>\n      <th>Query Parameter</th>\n      <th>Value</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>country</td>\n      <td><em>Optional</em>. A country: an <a href=\"#\" target=\"_blank\" class=\" externalLink\">ISO 3166-1 alpha-2 country code</a>. Provide this parameter if you want the list of returned items to be relevant to a particular country. If omitted, the returned items will be relevant to all countries.</td>\n    </tr>\n    <tr>\n      <td>limit</td>\n      <td><em>Optional</em>. The maximum number of items to return. Default: 20. Minimum: 1. Maximum: 50.</td>\n    </tr>\n    <tr>\n      <td>offset</td>\n      <td><em>Optional</em>. The index of the first item to return. Default: 0 (the first object). Use with <code class=\"highlighter-rouge\">limit</code> to get the next set of items.</td>\n    </tr>\n  </tbody>\n</table>\n\n\n# Response Format\nOn success, the HTTP status code in the response header is 200 OK and the response body contains a message and analbums object. The albums object contains an array of simplified album objects (wrapped in a paging object) in JSON format. On error, the header status code is an error code and the response body contains an error object.\n\nOnce you have retrieved the list, you can use Get an Album’s Tracks to drill down further.\n\nThe results are returned in an order reflected within the Spotify clients, and therefore may not be ordered by date."
					},
					"response": [
						{
							"name": "Get List of Artists",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "access_token",
										"key": "Authorization",
										"type": "text",
										"value": "{{jwt}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{URL}}api/v1/browse/artists",
									"host": [
										"{{URL}}api"
									],
									"path": [
										"v1",
										"browse",
										"artists"
									],
									"query": [
										{
											"key": "country",
											"value": "{{country_code}}",
											"disabled": true
										},
										{
											"key": "locale",
											"value": "{{language}}",
											"disabled": true
										},
										{
											"key": "limit",
											"value": "10",
											"description": "Optional. The maximum number of items to return. Default: 20. Minimum: 1. Maximum: 50.\n",
											"disabled": true
										},
										{
											"key": "offset",
											"value": "10",
											"description": "Optional. The index of the first item to return. Default: 0 (the first object). Use with limit to get the next set of items.",
											"disabled": true
										},
										{
											"key": "hi",
											"value": "test",
											"description": "test",
											"disabled": true
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "X-DNS-Prefetch-Control",
									"value": "off"
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=15552000; includeSubDomains"
								},
								{
									"key": "X-Download-Options",
									"value": "noopen"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-XSS-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "ETag",
									"value": "W/\"1ae7-XvTaV39jrXYqYaQOEb6gZBC2tZk\""
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip"
								},
								{
									"key": "Date",
									"value": "Tue, 07 Apr 2020 20:55:13 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								}
							],
							"cookie": [],
							"body": "{\n    \"artists\": {\n        \"total\": 20,\n        \"next\": \"http://localhost:3000/api/v1/browse/artists?offset=20&limit=20\",\n        \"previous\": null,\n        \"href\": \"http://localhost:3000/api/v1/browse/artists?offset=0&limit=20\",\n        \"items\": [\n            {\n                \"followedUsers\": [],\n                \"tracks\": [\n                    \"5e7d2dc03429e24340ff1396\",\n                    \"5e7d2ddd3429e24340ff1397\",\n                    \"5e7d2e023429e24340ff1398\"\n                ],\n                \"ownedPlaylists\": [],\n                \"followedAlbums\": [],\n                \"followedTracks\": [],\n                \"_id\": \"5e8137aa54660672fd699882\",\n                \"email\": \"test3@test.com\",\n                \"name\": \"Tame Impala\",\n                \"dateOfBirth\": \"1978-06-25T00:00:00.000Z\",\n                \"gender\": \"male\",\n                \"type\": \"artist\",\n                \"imageUrl\": \"https://zasymphonia.ddns.net/api/v1/images/users/Tame-Impala.jpg\"\n            },\n            {\n                \"followedUsers\": [],\n                \"tracks\": [\n                    \"5e8a1ea07937ec4d40c6debf\",\n                    \"5e8a37d0d56ea252c3860a1a\",\n                    \"5e8a39f24e11cd46c8bde654\"\n                ],\n                \"ownedPlaylists\": [],\n                \"followedAlbums\": [],\n                \"followedTracks\": [],\n                \"_id\": \"5e80fd1684c71f6ffb534a08\",\n                \"email\": \"test6@test.com\",\n                \"name\": \"TR/ST\",\n                \"dateOfBirth\": \"1985-12-05T00:00:00.000Z\",\n                \"gender\": \"male\",\n                \"type\": \"artist\",\n                \"imageUrl\": \"https://zasymphonia.ddns.net/api/v1/images/users/tr-st.jpg\"\n            },\n            {\n                \"followedUsers\": [],\n                \"tracks\": [],\n                \"ownedPlaylists\": [],\n                \"followedAlbums\": [],\n                \"followedTracks\": [],\n                \"_id\": \"5e8c73d82a0e4614b88a4ed0\",\n                \"email\": \"test8@test.com\",\n                \"name\": \"Austra\",\n                \"dateOfBirth\": \"1980-09-09T00:00:00.000Z\",\n                \"gender\": \"female\",\n                \"type\": \"artist\",\n                \"imageUrl\": \"https://zasymphonia.ddns.net/api/v1/images/users/Austra.jpg\"\n            },\n            {\n                \"followedUsers\": [],\n                \"tracks\": [],\n                \"ownedPlaylists\": [],\n                \"followedAlbums\": [],\n                \"followedTracks\": [],\n                \"_id\": \"5e8c7572e37ac11ac4f01356\",\n                \"email\": \"test9@test.com\",\n                \"name\": \"Boy Harsher\",\n                \"dateOfBirth\": \"1988-05-09T00:00:00.000Z\",\n                \"gender\": \"female\",\n                \"type\": \"artist\",\n                \"imageUrl\": \"https://zasymphonia.ddns.net/api/v1/images/users/Boy-Harsher.jpg\"\n            },\n            {\n                \"followedUsers\": [],\n                \"tracks\": [],\n                \"ownedPlaylists\": [],\n                \"followedAlbums\": [],\n                \"followedTracks\": [],\n                \"_id\": \"5e8c75c4e37ac11ac4f01357\",\n                \"email\": \"test10@test.com\",\n                \"name\": \"Chairlift\",\n                \"dateOfBirth\": \"1987-05-10T00:00:00.000Z\",\n                \"gender\": \"female\",\n                \"type\": \"artist\",\n                \"imageUrl\": \"https://zasymphonia.ddns.net/api/v1/images/users/Chairlift.jpg\"\n            },\n            {\n                \"followedUsers\": [],\n                \"tracks\": [],\n                \"ownedPlaylists\": [],\n                \"followedAlbums\": [],\n                \"followedTracks\": [],\n                \"_id\": \"5e8c7612e37ac11ac4f01358\",\n                \"email\": \"test11@test.com\",\n                \"name\": \"Cigarettes After Sex\",\n                \"dateOfBirth\": \"1997-05-16T00:00:00.000Z\",\n                \"gender\": \"male\",\n                \"type\": \"artist\",\n                \"imageUrl\": \"https://zasymphonia.ddns.net/api/v1/images/users/Cigarettes-After-Sex.jpg\"\n            },\n            {\n                \"followedUsers\": [],\n                \"tracks\": [],\n                \"ownedPlaylists\": [],\n                \"followedAlbums\": [],\n                \"followedTracks\": [],\n                \"_id\": \"5e8c7669e37ac11ac4f01359\",\n                \"email\": \"test12@test.com\",\n                \"name\": \"Clario\",\n                \"dateOfBirth\": \"1997-05-16T00:00:00.000Z\",\n                \"gender\": \"female\",\n                \"type\": \"artist\",\n                \"imageUrl\": \"https://zasymphonia.ddns.net/api/v1/images/users/Clario.jpg\"\n            },\n            {\n                \"followedUsers\": [],\n                \"tracks\": [],\n                \"ownedPlaylists\": [],\n                \"followedAlbums\": [],\n                \"followedTracks\": [],\n                \"_id\": \"5e8c769ce37ac11ac4f0135a\",\n                \"email\": \"test13@test.com\",\n                \"name\": \"Crystal Castles\",\n                \"dateOfBirth\": \"1997-05-16T00:00:00.000Z\",\n                \"gender\": \"female\",\n                \"type\": \"artist\",\n                \"imageUrl\": \"https://zasymphonia.ddns.net/api/v1/images/users/Crystal-Castles.jpg\"\n            },\n            {\n                \"followedUsers\": [],\n                \"tracks\": [],\n                \"ownedPlaylists\": [],\n                \"followedAlbums\": [],\n                \"followedTracks\": [],\n                \"_id\": \"5e8c76d5e37ac11ac4f0135b\",\n                \"email\": \"test14@test.com\",\n                \"name\": \"Current Joys\",\n                \"dateOfBirth\": \"1987-07-16T00:00:00.000Z\",\n                \"gender\": \"male\",\n                \"type\": \"artist\",\n                \"imageUrl\": \"https://zasymphonia.ddns.net/api/v1/images/users/Current-Joys.jpg\"\n            },\n            {\n                \"followedUsers\": [],\n                \"tracks\": [],\n                \"ownedPlaylists\": [],\n                \"followedAlbums\": [],\n                \"followedTracks\": [],\n                \"_id\": \"5e8c770de37ac11ac4f0135c\",\n                \"email\": \"test15@test.com\",\n                \"name\": \"Drab Majesty\",\n                \"dateOfBirth\": \"1987-07-16T00:00:00.000Z\",\n                \"gender\": \"male\",\n                \"type\": \"artist\",\n                \"imageUrl\": \"https://zasymphonia.ddns.net/api/v1/images/users/Drab-Majesty.jpg\"\n            },\n            {\n                \"followedUsers\": [],\n                \"tracks\": [],\n                \"ownedPlaylists\": [],\n                \"followedAlbums\": [],\n                \"followedTracks\": [],\n                \"_id\": \"5e8c7746e37ac11ac4f0135d\",\n                \"email\": \"test16@test.com\",\n                \"name\": \"Frank Ocean\",\n                \"dateOfBirth\": \"1991-07-16T00:00:00.000Z\",\n                \"gender\": \"male\",\n                \"type\": \"artist\",\n                \"imageUrl\": \"https://zasymphonia.ddns.net/api/v1/images/users/Frank-Ocean.jpg\"\n            },\n            {\n                \"followedUsers\": [],\n                \"tracks\": [],\n                \"ownedPlaylists\": [],\n                \"followedAlbums\": [],\n                \"followedTracks\": [],\n                \"_id\": \"5e8c7786e37ac11ac4f0135e\",\n                \"email\": \"test17@test.com\",\n                \"name\": \"Joji\",\n                \"dateOfBirth\": \"1995-07-16T00:00:00.000Z\",\n                \"gender\": \"male\",\n                \"type\": \"artist\",\n                \"imageUrl\": \"https://zasymphonia.ddns.net/api/v1/images/users/Joji.jpg\"\n            },\n            {\n                \"followedUsers\": [],\n                \"tracks\": [],\n                \"ownedPlaylists\": [],\n                \"followedAlbums\": [],\n                \"followedTracks\": [],\n                \"_id\": \"5e8c77c1e37ac11ac4f0135f\",\n                \"email\": \"test18@test.com\",\n                \"name\": \"Lana Del Rey\",\n                \"dateOfBirth\": \"1985-08-16T00:00:00.000Z\",\n                \"gender\": \"female\",\n                \"type\": \"artist\",\n                \"imageUrl\": \"https://zasymphonia.ddns.net/api/v1/images/users/Lana-Del-Rey.jpg\"\n            },\n            {\n                \"followedUsers\": [],\n                \"tracks\": [],\n                \"ownedPlaylists\": [],\n                \"followedAlbums\": [],\n                \"followedTracks\": [],\n                \"_id\": \"5e8c780ae37ac11ac4f01360\",\n                \"email\": \"test19@test.com\",\n                \"name\": \"Lebanon Hanover\",\n                \"dateOfBirth\": \"1995-08-16T00:00:00.000Z\",\n                \"gender\": \"female\",\n                \"type\": \"artist\",\n                \"imageUrl\": \"https://zasymphonia.ddns.net/api/v1/images/users/Lebanon-Hanover.jpg\"\n            },\n            {\n                \"followedUsers\": [],\n                \"tracks\": [],\n                \"ownedPlaylists\": [],\n                \"followedAlbums\": [],\n                \"followedTracks\": [],\n                \"_id\": \"5e8c7843e37ac11ac4f01361\",\n                \"email\": \"test20@test.com\",\n                \"name\": \"Lil Peep\",\n                \"dateOfBirth\": \"1998-08-16T00:00:00.000Z\",\n                \"gender\": \"male\",\n                \"type\": \"artist\",\n                \"imageUrl\": \"https://zasymphonia.ddns.net/api/v1/images/users/Lil-Peep.jpg\"\n            },\n            {\n                \"followedUsers\": [],\n                \"tracks\": [],\n                \"ownedPlaylists\": [],\n                \"followedAlbums\": [],\n                \"followedTracks\": [],\n                \"_id\": \"5e8c787de37ac11ac4f01362\",\n                \"email\": \"test21@test.com\",\n                \"name\": \"Man Without Country\",\n                \"dateOfBirth\": \"1986-04-11T00:00:00.000Z\",\n                \"gender\": \"male\",\n                \"type\": \"artist\",\n                \"imageUrl\": \"https://zasymphonia.ddns.net/api/v1/images/users/Man-Without-Country.jpg\"\n            },\n            {\n                \"followedUsers\": [],\n                \"tracks\": [],\n                \"ownedPlaylists\": [],\n                \"followedAlbums\": [],\n                \"followedTracks\": [],\n                \"_id\": \"5e8c78c9e37ac11ac4f01363\",\n                \"email\": \"test22@test.com\",\n                \"name\": \"Men I Trust\",\n                \"dateOfBirth\": \"1991-04-01T00:00:00.000Z\",\n                \"gender\": \"female\",\n                \"type\": \"artist\",\n                \"imageUrl\": \"https://zasymphonia.ddns.net/api/v1/images/users/Men-I-Trust.jpg\"\n            },\n            {\n                \"followedUsers\": [],\n                \"tracks\": [],\n                \"ownedPlaylists\": [],\n                \"followedAlbums\": [],\n                \"followedTracks\": [],\n                \"_id\": \"5e8c7914e37ac11ac4f01364\",\n                \"email\": \"test23@test.com\",\n                \"name\": \"Pastel Ghost\",\n                \"dateOfBirth\": \"1995-04-01T00:00:00.000Z\",\n                \"gender\": \"female\",\n                \"type\": \"artist\",\n                \"imageUrl\": \"https://zasymphonia.ddns.net/api/v1/images/users/Pastel-Ghost.jpg\"\n            },\n            {\n                \"followedUsers\": [],\n                \"tracks\": [],\n                \"ownedPlaylists\": [],\n                \"followedAlbums\": [],\n                \"followedTracks\": [],\n                \"_id\": \"5e8c7969e37ac11ac4f01365\",\n                \"email\": \"test24@test.com\",\n                \"name\": \"Purity Ring\",\n                \"dateOfBirth\": \"1997-04-01T00:00:00.000Z\",\n                \"gender\": \"female\",\n                \"type\": \"artist\",\n                \"imageUrl\": \"https://zasymphonia.ddns.net/api/v1/images/users/Purity-Ring.jpg\"\n            },\n            {\n                \"followedUsers\": [],\n                \"tracks\": [],\n                \"ownedPlaylists\": [],\n                \"followedAlbums\": [],\n                \"followedTracks\": [],\n                \"_id\": \"5e8c7994e37ac11ac4f01366\",\n                \"email\": \"test25@test.com\",\n                \"name\": \"Sleep Party People\",\n                \"dateOfBirth\": \"1989-07-01T00:00:00.000Z\",\n                \"gender\": \"male\",\n                \"type\": \"artist\",\n                \"imageUrl\": \"https://zasymphonia.ddns.net/api/v1/images/users/Sleep-Party-People.jpg\"\n            }\n        ],\n        \"limit\": 20,\n        \"offset\": 0\n    }\n}"
						}
					]
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "follow",
			"item": [
				{
					"name": "Check if Current User Follows Artists or Users",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"description": "Required. A valid access token from the Spotify Accounts service: see the Web API Authorization Guide for details. The user-library-read scope must have been authorized by the user.\n\n",
								"key": "Authorization",
								"type": "text",
								"value": "{{jwt}}"
							}
						],
						"url": {
							"raw": "{{URL}}api/v1/me/following/contains?ids=5e8c7ab693ec63187898e827,5e84b966681ae439edfc1d6f,5e812a3454660672fd699880",
							"host": [
								"{{URL}}api"
							],
							"path": [
								"v1",
								"me",
								"following",
								"contains"
							],
							"query": [
								{
									"key": "type",
									"value": "artist",
									"description": "Required. The ID type: either artist or user.\n\n",
									"disabled": true
								},
								{
									"key": "ids",
									"value": "5e8c7ab693ec63187898e827,5e84b966681ae439edfc1d6f,5e812a3454660672fd699880"
								}
							]
						},
						"description": "# Description\r\n\r\nCheck to see if the current user is following one or more artists or other Spotify users.\r\n\r\n\r\n\r\n# RESPONSE FORMAT\r\nOn success, the HTTP status code in the response header is 200 OK and the response body contains a JSON array of true or false values, in the same order in which the ids were specified. On error, the header status code is an error code and the response body contains an error object."
					},
					"response": [
						{
							"name": "Check if Current User Follows Artists or Users",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Required. A valid access token from the Spotify Accounts service: see the Web API Authorization Guide for details. The user-library-read scope must have been authorized by the user.\n\n",
										"key": "Authorization",
										"type": "text",
										"value": "{{jwt}}"
									}
								],
								"url": {
									"raw": "{{URL}}api/v1/me/following/contains?ids=5e8c7ab693ec63187898e827,5e84b966681ae439edfc1d6f,5e812a3454660672fd699880",
									"host": [
										"{{URL}}api"
									],
									"path": [
										"v1",
										"me",
										"following",
										"contains"
									],
									"query": [
										{
											"key": "type",
											"value": "artist",
											"description": "Required. The ID type: either artist or user.\n\n",
											"disabled": true
										},
										{
											"key": "ids",
											"value": "5e8c7ab693ec63187898e827,5e84b966681ae439edfc1d6f,5e812a3454660672fd699880"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "X-DNS-Prefetch-Control",
									"value": "off"
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=15552000; includeSubDomains"
								},
								{
									"key": "X-Download-Options",
									"value": "noopen"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-XSS-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "17"
								},
								{
									"key": "ETag",
									"value": "W/\"11-79VXOo+MJ/1NJrdnxxafGHUqJcc\""
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding"
								},
								{
									"key": "Date",
									"value": "Tue, 07 Apr 2020 20:32:52 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "[\n    false,\n    true,\n    true\n]"
						}
					]
				},
				{
					"name": "Check if Users Follow a Playlist",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{jwt}}"
							},
							{
								"description": "Required. A valid access token from the Spotify Accounts service: see the Web API Authorization Guide for details.\nFollowing a playlist can be done publicly or privately. Checking if a user publicly follows a playlist doesn’t require any scopes; if the user is publicly following the playlist, this endpoint returns true.\nChecking if the user is privately following a playlist is only possible for the current user when that user has granted access to the playlist-read-private scope. See Using Scopes.",
								"key": "",
								"type": "text",
								"value": ""
							}
						],
						"url": {
							"raw": "{{URL}}api/v1/playlists/5e7969965146d92e98ac3ef7/followers/contains?ids=5e7e58265d4cc2517c398e9b,5e7s58265d4cc2517c398e9b",
							"host": [
								"{{URL}}api"
							],
							"path": [
								"v1",
								"playlists",
								"5e7969965146d92e98ac3ef7",
								"followers",
								"contains"
							],
							"query": [
								{
									"key": "ids",
									"value": "5e7e58265d4cc2517c398e9b,5e7s58265d4cc2517c398e9b"
								}
							]
						},
						"description": "# Description\r\nCheck to see if one or more Spotify users are following a specified playlist.\r\n\r\n# Request Parameters\r\n\r\n## Path Parameters\r\n\r\n<table>\r\n  <thead>\r\n    <tr>\r\n      <th>Path Parameter</th>\r\n      <th>Value</th>\r\n    </tr>\r\n  </thead>\r\n  <tbody>\r\n    <tr>\r\n      <td>playlist_id</td>\r\n      <td>The <a href=\"/documentation/web-api/#spotify-uris-and-ids\">Spotify ID</a> of the playlist.</td>\r\n    </tr>\r\n  </tbody>\r\n</table>\r\n\r\n## Query  Parameters\r\n\r\n<table>\r\n  <thead>\r\n    <tr>\r\n      <th>Query Parameter</th>\r\n      <th>Value</th>\r\n    </tr>\r\n  </thead>\r\n  <tbody>\r\n    <tr>\r\n      <td>ids</td>\r\n      <td><em>Required</em>. A comma-separated list of <a href=\"/documentation/web-api/#spotify-uris-and-ids\">Spotify User IDs</a> ; the ids of the users that you want to check to see if they follow the playlist. Maximum: 5 ids.</td>\r\n    </tr>\r\n  </tbody>\r\n</table>\r\n\r\n# Response Format\r\n\r\nOn success, the HTTP status code in the response header is 200 OK and the response body contains a JSON array oftrue or false values, in the same order in which the ids were specified. On error, the header status code is an error code and the response body contains an error object."
					},
					"response": [
						{
							"name": "Check if Users Follow a Playlist",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{jwt}}"
									},
									{
										"description": "Required. A valid access token from the Spotify Accounts service: see the Web API Authorization Guide for details.\nFollowing a playlist can be done publicly or privately. Checking if a user publicly follows a playlist doesn’t require any scopes; if the user is publicly following the playlist, this endpoint returns true.\nChecking if the user is privately following a playlist is only possible for the current user when that user has granted access to the playlist-read-private scope. See Using Scopes.",
										"key": "",
										"type": "text",
										"value": ""
									}
								],
								"url": {
									"raw": "{{URL}}api/v1/playlists/5e7969965146d92e98ac3ef7/followers/contains?ids=5e7e58265d4cc2517c398e9b,5e7s58265d4cc2517c398e9b",
									"host": [
										"{{URL}}api"
									],
									"path": [
										"v1",
										"playlists",
										"5e7969965146d92e98ac3ef7",
										"followers",
										"contains"
									],
									"query": [
										{
											"key": "ids",
											"value": "5e7e58265d4cc2517c398e9b,5e7s58265d4cc2517c398e9b"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "X-DNS-Prefetch-Control",
									"value": "off"
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=15552000; includeSubDomains"
								},
								{
									"key": "X-Download-Options",
									"value": "noopen"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-XSS-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "X-RateLimit-Limit",
									"value": "1000"
								},
								{
									"key": "X-RateLimit-Remaining",
									"value": "999"
								},
								{
									"key": "Date",
									"value": "Sat, 04 Apr 2020 08:03:43 GMT"
								},
								{
									"key": "X-RateLimit-Reset",
									"value": "1585991021"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "13"
								},
								{
									"key": "ETag",
									"value": "W/\"d-VHM8HlfjJcD4R6oEGdNv5bP7AI4\""
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "[\n    false,\n    false\n]"
						}
					]
				},
				{
					"name": "Follow Artists or Users",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"description": "Required. A valid access token from the Spotify Accounts service: see the Web API Authorization Guide for details. The access token must have been issued on behalf of the current user. Modifying the list of artists or users the current user follows requires authorization of the user-follow-modify scope. See Using Scopes.\n",
								"key": "Authorization",
								"type": "text",
								"value": "{{jwt}}"
							},
							{
								"warning": "Key contains invalid whitespace characters.",
								"description": "Required if IDs are passed in the request body, otherwise ignored. The content type of the request body: application/json.\n",
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{URL}}api/v1/me/following?ids=5e7d349c852bb431c43d77da",
							"host": [
								"{{URL}}api"
							],
							"path": [
								"v1",
								"me",
								"following"
							],
							"query": [
								{
									"key": "ids",
									"value": "5e7d349c852bb431c43d77da"
								}
							]
						},
						"description": "# Description\r\nAdd the current user as a follower of one or more artists or other Spotify users.\r\n\r\n# Request Parameters\r\n## Header Fields\r\n\r\n<table>\r\n  <thead>\r\n    <tr>\r\n      <th>Header&nbsp;Field</th>\r\n      <th>Value</th>\r\n    </tr>\r\n  </thead>\r\n  <tbody>\r\n    <tr>\r\n      <td>Authorization</td>\r\n      <td><em>Required</em>. A valid access token from the Spotify Accounts service: see the <a href=\"#\">Web API Authorization Guide</a> for details. The access token must have been issued on behalf of the current user. Modifying the list of artists or users the current user follows requires authorization of the <code class=\"highlighter-rouge\">user-follow-modify</code> scope. See <a href=\"#\">Using Scopes</a>.</td>\r\n    </tr>\r\n    <tr>\r\n      <td>Content-Type</td>\r\n      <td><em>Required if IDs are passed in the request body, otherwise ignored</em>. The content type of the request body: <code class=\"highlighter-rouge\">application/json</code>.</td>\r\n    </tr>\r\n  </tbody>\r\n</table>\r\n\r\n## Query Parameters\r\n<table>\r\n  <thead>\r\n    <tr>\r\n      <th>Query Parameter</th>\r\n      <th>Value</th>\r\n    </tr>\r\n  </thead>\r\n  <tbody>\r\n    <tr>\r\n      <td>type</td>\r\n      <td><em>Required</em>. The ID type: either <code class=\"highlighter-rouge\">artist</code> or <code class=\"highlighter-rouge\">user</code>.</td>\r\n    </tr>\r\n    <tr>\r\n      <td>ids</td>\r\n      <td><em>Optional</em>. A comma-separated list of the artist or the user <a href=\"#\">Spotify IDs</a>. For example: <code class=\"highlighter-rouge\">ids=74ASZWbe4lXaubB36ztrGX,08td7MxkoHQkXnWAYD8d6Q</code>. A maximum of 50 IDs can be sent in one request.</td>\r\n    </tr>\r\n  </tbody>\r\n</table>\r\n\r\n## Body Parameters\r\n\r\n<table>\r\n  <thead>\r\n    <tr>\r\n      <th>Request&nbsp;Body Data</th>\r\n      <th>Value&nbsp;Type</th>\r\n      <th>Value</th>\r\n    </tr>\r\n  </thead>\r\n  <tbody>\r\n    <tr>\r\n      <td>ids</td>\r\n      <td>array of Spotify ID strings</td>\r\n      <td><em>Optional</em>. A JSON array of the artist or user <a href=\"/documentation/web-api/#spotify-uris-and-ids\">Spotify IDs</a>. For example: <code class=\"highlighter-rouge\">{ids:[\"74ASZWbe4lXaubB36ztrGX\", \"08td7MxkoHQkXnWAYD8d6Q\"]}</code>. A maximum of 50 IDs can be sent in one request. <em>Note: if the <code class=\"highlighter-rouge\">ids</code> parameter is present in the query string, any IDs listed here in the body will be ignored.</em></td>\r\n    </tr>\r\n  </tbody>\r\n</table>\r\n\r\n## Response Format\r\nOn success, the HTTP status code in the response header is 204 No Content and the response body is empty. On error, the header status code is an error code and the response body contains an error object."
					},
					"response": [
						{
							"name": "Follow Artists or Users",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"description": "Required. A valid access token from the Spotify Accounts service: see the Web API Authorization Guide for details. The access token must have been issued on behalf of the current user. Modifying the list of artists or users the current user follows requires authorization of the user-follow-modify scope. See Using Scopes.\n",
										"key": "Authorization",
										"type": "text",
										"value": "{{jwt}}"
									},
									{
										"warning": "Key contains invalid whitespace characters.",
										"description": "Required if IDs are passed in the request body, otherwise ignored. The content type of the request body: application/json.\n",
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{URL}}api/v1/me/following?ids=5e7d349c852bb431c43d77da",
									"host": [
										"{{URL}}api"
									],
									"path": [
										"v1",
										"me",
										"following"
									],
									"query": [
										{
											"key": "ids",
											"value": "5e7d349c852bb431c43d77da"
										}
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "X-DNS-Prefetch-Control",
									"value": "off"
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=15552000; includeSubDomains"
								},
								{
									"key": "X-Download-Options",
									"value": "noopen"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-XSS-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "X-RateLimit-Limit",
									"value": "1000"
								},
								{
									"key": "X-RateLimit-Remaining",
									"value": "998"
								},
								{
									"key": "Date",
									"value": "Sat, 04 Apr 2020 08:04:07 GMT"
								},
								{
									"key": "X-RateLimit-Reset",
									"value": "1585991021"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Follow a Playlist",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"description": "Required. A valid access token from the Spotify Accounts service: see the Web API Authorization Guide for details. The access token must have been issued on behalf of the current user. Modifying the list of artists or users the current user follows requires authorization of the user-follow-modify scope. See Using Scopes.\n",
								"key": "Authorization",
								"type": "text",
								"value": "{{jwt}}"
							},
							{
								"warning": "Key contains invalid whitespace characters.",
								"description": "Required if IDs are passed in the request body, otherwise ignored. The content type of the request body: application/json.\n",
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{URL}}api/v1/playlists/5e7969965146d92e98ac3ef7/followers",
							"host": [
								"{{URL}}api"
							],
							"path": [
								"v1",
								"playlists",
								"5e7969965146d92e98ac3ef7",
								"followers"
							],
							"query": [
								{
									"key": "type",
									"value": "artist",
									"description": "Required. The ID type: either artist or user.\n",
									"disabled": true
								},
								{
									"key": "ids",
									"value": "{{ids}}",
									"description": "Optional. A comma-separated list of the artist or the user Spotify IDs. For example: ids=74ASZWbe4lXaubB36ztrGX,08td7MxkoHQkXnWAYD8d6Q. A maximum of 50 IDs can be sent in one request.\n",
									"disabled": true
								}
							]
						},
						"description": "# Description\r\nAdd the current user as a follower of a playlist.\r\n\r\n# Request Parameters\r\n\r\n## Path  Fields\r\n\r\n<table>\r\n  <thead>\r\n    <tr>\r\n      <th>Path Parameter</th>\r\n      <th>Value</th>\r\n    </tr>\r\n  </thead>\r\n  <tbody>\r\n    <tr>\r\n      <td>playlist_id</td>\r\n      <td>The <a href=\"/documentation/web-api/#spotify-uris-and-ids\">Spotify ID</a> of the playlist. Any playlist can be followed, regardless of its <a href=\"/documentation/general/guides/working-with-playlists/#public-private-and-collaborative-status\">public/private status</a>, as long as you know its playlist ID.</td>\r\n    </tr>\r\n  </tbody>\r\n</table>\r\n\r\n## Header Fields\r\n\r\n<table>\r\n  <thead>\r\n    <tr>\r\n      <th>Header&nbsp;Field</th>\r\n      <th>Value</th>\r\n    </tr>\r\n  </thead>\r\n  <tbody>\r\n    <tr>\r\n      <td>Authorization</td>\r\n      <td><em>Required</em>. A valid access token from the Spotify Accounts service: see the <a href=\"#\">Web API Authorization Guide</a> for details. The access token must have been issued on behalf of the current user. Modifying the list of artists or users the current user follows requires authorization of the <code class=\"highlighter-rouge\">user-follow-modify</code> scope. See <a href=\"#\">Using Scopes</a>.</td>\r\n    </tr>\r\n    <tr>\r\n      <td>Content-Type</td>\r\n      <td><em>Required if IDs are passed in the request body, otherwise ignored</em>. The content type of the request body: <code class=\"highlighter-rouge\">application/json</code>.</td>\r\n    </tr>\r\n  </tbody>\r\n</table>\r\n\r\n\r\n## Body Parameters\r\n<table>\r\n  <thead>\r\n    <tr>\r\n      <th>Request&nbsp;Body Data</th>\r\n      <th>Value&nbsp;Type</th>\r\n      <th>Value</th>\r\n    </tr>\r\n  </thead>\r\n  <tbody>\r\n    <tr>\r\n      <td>public</td>\r\n      <td>Boolean</td>\r\n      <td><em>Optional</em>. Defaults to <code class=\"highlighter-rouge\">true</code>. If <code class=\"highlighter-rouge\">true</code> the playlist will be included in user’s public playlists, if <code class=\"highlighter-rouge\">false</code> it will remain private. To be able to follow playlists privately, the user must have granted the <code class=\"highlighter-rouge\">playlist-modify-private</code> <a href=\"/documentation/general/guides/authorization-guide/#list-of-scopes\">scope</a>.</td>\r\n    </tr>\r\n  </tbody>\r\n</table>\r\n\r\n## Response Format\r\nOn success, the HTTP status code in the response header is 200 OK and the response body is empty. On error, the header status code is an error code and the response body contains an error object."
					},
					"response": [
						{
							"name": "Follow a Playlist",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"description": "Required. A valid access token from the Spotify Accounts service: see the Web API Authorization Guide for details. The access token must have been issued on behalf of the current user. Modifying the list of artists or users the current user follows requires authorization of the user-follow-modify scope. See Using Scopes.\n",
										"key": "Authorization",
										"type": "text",
										"value": "{{jwt}}"
									},
									{
										"warning": "Key contains invalid whitespace characters.",
										"description": "Required if IDs are passed in the request body, otherwise ignored. The content type of the request body: application/json.\n",
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{URL}}api/v1/playlists/5e7969965146d92e98ac3ef7/followers",
									"host": [
										"{{URL}}api"
									],
									"path": [
										"v1",
										"playlists",
										"5e7969965146d92e98ac3ef7",
										"followers"
									],
									"query": [
										{
											"key": "type",
											"value": "artist",
											"description": "Required. The ID type: either artist or user.\n",
											"disabled": true
										},
										{
											"key": "ids",
											"value": "{{ids}}",
											"description": "Optional. A comma-separated list of the artist or the user Spotify IDs. For example: ids=74ASZWbe4lXaubB36ztrGX,08td7MxkoHQkXnWAYD8d6Q. A maximum of 50 IDs can be sent in one request.\n",
											"disabled": true
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "X-DNS-Prefetch-Control",
									"value": "off"
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=15552000; includeSubDomains"
								},
								{
									"key": "X-Download-Options",
									"value": "noopen"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-XSS-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "X-RateLimit-Limit",
									"value": "1000"
								},
								{
									"key": "X-RateLimit-Remaining",
									"value": "997"
								},
								{
									"key": "Date",
									"value": "Sat, 04 Apr 2020 08:04:35 GMT"
								},
								{
									"key": "X-RateLimit-Reset",
									"value": "1585991021"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Content-Length",
									"value": "0"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Get User's Followed Artists",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"description": "Required. A valid access token from the Spotify Accounts service: see the Web API Authorization Guide for details. The access token must have been issued on behalf of the current user. Modifying the list of artists or users the current user follows requires authorization of the user-follow-modify scope. See Using Scopes.\n",
								"key": "Authorization",
								"type": "text",
								"value": "{{jwt}}"
							},
							{
								"warning": "Key contains invalid whitespace characters.",
								"description": "Required if IDs are passed in the request body, otherwise ignored. The content type of the request body: application/json.\n",
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{URL}}api/v1/me/following",
							"host": [
								"{{URL}}api"
							],
							"path": [
								"v1",
								"me",
								"following"
							],
							"query": [
								{
									"key": "type",
									"value": "artist",
									"description": "Required. The ID type: either artist or user.\n",
									"disabled": true
								},
								{
									"key": "limit",
									"value": "2",
									"disabled": true
								},
								{
									"key": "after",
									"value": "5e7f799991f8ed09303e5076",
									"disabled": true
								}
							]
						},
						"description": "# Description\r\nGet the current user’s followed artists.\r\n\r\n# Request Parameters\r\n\r\n\r\n## Header Fields\r\n<table>\r\n  <thead>\r\n    <tr>\r\n      <th>Header&nbsp;Field</th>\r\n      <th>Value</th>\r\n    </tr>\r\n  </thead>\r\n  <tbody>\r\n    <tr>\r\n      <td>Authorization</td>\r\n      <td><em>Required</em>. A valid access token from the Spotify Accounts service: see the <a href=\"/documentation/general/guides/authorization-guide/\">Web API Authorization Guide</a> for details. The access token must have been issued on behalf of the current user. Getting details of the artists or users the current user follows requires authorization of the <code class=\"highlighter-rouge\">user-follow-read</code> scope. See <a href=\"/documentation/general/guides/authorization-guide/#list-of-scopes\">Using Scopes</a>.</td>\r\n    </tr>\r\n  </tbody>\r\n</table>\r\n## Query parameters\r\n<table>\r\n  <thead>\r\n    <tr>\r\n      <th>Query Parameter</th>\r\n      <th>Value</th>\r\n    </tr>\r\n  </thead>\r\n  <tbody>\r\n    <tr>\r\n      <td>type</td>\r\n      <td><em>Required</em>. The ID type: currently only <code class=\"highlighter-rouge\">artist</code> is supported.</td>\r\n    </tr>\r\n    <tr>\r\n      <td>limit</td>\r\n      <td><em>Optional</em>. The maximum number of items to return. Default: 20. Minimum: 1. Maximum: 50.</td>\r\n    </tr>\r\n    <tr>\r\n      <td>after</td>\r\n      <td><em>Optional</em>. The last artist ID retrieved from the previous request.</td>\r\n    </tr>\r\n  </tbody>\r\n</table>\r\n\r\n\r\n## Response Format\r\nOn success, the HTTP status code in the response header is 200 OK and the response body contains an artists object. The artists object in turn contains a cursor-based paging object of Artists. On error, the header status code is an error code and the response body contains an error object.\r\n\r\n\r\n## artist (full) object\r\n<table>\r\n  <thead>\r\n    <tr>\r\n      <th>Key</th>\r\n      <th>Value&nbsp;Type</th>\r\n      <th>Value Description</th>\r\n    </tr>\r\n  </thead>\r\n  <tbody>\r\n    <tr>\r\n      <td>external_urls</td>\r\n      <td>an <a href=\"/documentation/web-api/reference/object-model/#external-url-object\">external URL object</a></td>\r\n      <td>Known external URLs for this artist.</td>\r\n    </tr>\r\n    <tr>\r\n      <td>followers</td>\r\n      <td>A <a href=\"/documentation/web-api/reference/object-model/#followers-object\">followers object</a></td>\r\n      <td>Information about the followers of the artist.</td>\r\n    </tr>\r\n    <tr>\r\n      <td>genres</td>\r\n      <td>array of strings</td>\r\n      <td>A list of the genres the artist is associated with. For example: <code class=\"highlighter-rouge\">\"Prog Rock\"</code> , <code class=\"highlighter-rouge\">\"Post-Grunge\"</code>. (If not yet classified, the array is empty.)</td>\r\n    </tr>\r\n    <tr>\r\n      <td>href</td>\r\n      <td>string</td>\r\n      <td>A link to the Web API endpoint providing full details of the artist.</td>\r\n    </tr>\r\n    <tr>\r\n      <td>id</td>\r\n      <td>string</td>\r\n      <td>The <a href=\"/documentation/web-api/#spotify-uris-and-ids\">Spotify ID</a> for the artist.</td>\r\n    </tr>\r\n    <tr>\r\n      <td>images</td>\r\n      <td>array of <a href=\"/documentation/web-api/reference/object-model/#image-object\">image objects</a></td>\r\n      <td>Images of the artist in various sizes, widest first.</td>\r\n    </tr>\r\n    <tr>\r\n      <td>name</td>\r\n      <td>string</td>\r\n      <td>The name of the artist</td>\r\n    </tr>\r\n    <tr>\r\n      <td>popularity</td>\r\n      <td>int</td>\r\n      <td>The popularity of the artist. The value will be between 0 and 100, with 100 being the most popular. The artist’s popularity is calculated from the popularity of all the artist’s tracks.</td>\r\n    </tr>\r\n    <tr>\r\n      <td>type</td>\r\n      <td>string</td>\r\n      <td>The object type: <code class=\"highlighter-rouge\">\"artist\"</code></td>\r\n    </tr>\r\n    <tr>\r\n      <td>uri</td>\r\n      <td>string</td>\r\n      <td>The <a href=\"/documentation/web-api/#spotify-uris-and-ids\">Spotify URI</a> for the artist.</td>\r\n    </tr>\r\n  </tbody>\r\n</table>\r\n\r\n## cursor-based paging object\r\n<table>\r\n  <thead>\r\n    <tr>\r\n      <th>Key</th>\r\n      <th>Value&nbsp;Type</th>\r\n      <th>Value Description</th>\r\n    </tr>\r\n  </thead>\r\n  <tbody>\r\n    <tr>\r\n      <td>href</td>\r\n      <td>string</td>\r\n      <td>A link to the Web API endpoint returning the full result of the request.</td>\r\n    </tr>\r\n    <tr>\r\n      <td>items</td>\r\n      <td>an array of objects</td>\r\n      <td>The requested data.</td>\r\n    </tr>\r\n    <tr>\r\n      <td>limit</td>\r\n      <td>integer</td>\r\n      <td>The maximum number of items in the response (as set in the query or by default).</td>\r\n    </tr>\r\n    <tr>\r\n      <td>next</td>\r\n      <td>string</td>\r\n      <td>URL to the next page of items. ( <code class=\"highlighter-rouge\">null</code> if none)</td>\r\n    </tr>\r\n    <tr>\r\n      <td>cursors</td>\r\n      <td><a href=\"/documentation/web-api/reference/object-model/#cursor-object\">cursor object</a></td>\r\n      <td>The cursors used to find the next set of items.</td>\r\n    </tr>\r\n    <tr>\r\n      <td>total</td>\r\n      <td>integer</td>\r\n      <td>The total number of items available to return.</td>\r\n    </tr>\r\n  </tbody>\r\n</table>"
					},
					"response": [
						{
							"name": "Get User's Followed Artists",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Required. A valid access token from the Spotify Accounts service: see the Web API Authorization Guide for details. The access token must have been issued on behalf of the current user. Modifying the list of artists or users the current user follows requires authorization of the user-follow-modify scope. See Using Scopes.\n",
										"key": "Authorization",
										"type": "text",
										"value": "{{jwt}}"
									},
									{
										"warning": "Key contains invalid whitespace characters.",
										"description": "Required if IDs are passed in the request body, otherwise ignored. The content type of the request body: application/json.\n",
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{URL}}api/v1/me/following",
									"host": [
										"{{URL}}api"
									],
									"path": [
										"v1",
										"me",
										"following"
									],
									"query": [
										{
											"key": "type",
											"value": "artist",
											"description": "Required. The ID type: either artist or user.\n",
											"disabled": true
										},
										{
											"key": "limit",
											"value": "2",
											"disabled": true
										},
										{
											"key": "after",
											"value": "5e7f799991f8ed09303e5076",
											"disabled": true
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "X-DNS-Prefetch-Control",
									"value": "off"
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=15552000; includeSubDomains"
								},
								{
									"key": "X-Download-Options",
									"value": "noopen"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-XSS-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "ETag",
									"value": "W/\"547-2G6rATASPz63Ygla6rhiK7599yI\""
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip"
								},
								{
									"key": "Date",
									"value": "Tue, 07 Apr 2020 20:56:50 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								}
							],
							"cookie": [],
							"body": "{\n    \"artists\": {\n        \"items\": [\n            {\n                \"queue\": {\n                    \"currentlyPlaying\": {\n                        \"currentTrack\": null\n                    },\n                    \"queueTracks\": [],\n                    \"previousTrack\": null,\n                    \"repeat\": false,\n                    \"shuffle\": false,\n                    \"play\": false,\n                    \"repeatOnce\": false,\n                    \"devices\": [\n                        {\n                            \"_id\": \"5e8a5b0db2859207bf1fc2e9\",\n                            \"devicesName\": \"chrome\"\n                        }\n                    ]\n                },\n                \"followedUsers\": [],\n                \"tracks\": [\n                    \"5e8a1e767937ec4d40c6debc\",\n                    \"5e8a1e937937ec4d40c6debd\",\n                    \"5e8a1e727937ec4d40c6debb\"\n                ],\n                \"ownedPlaylists\": [],\n                \"followedAlbums\": [],\n                \"followedTracks\": [],\n                \"_id\": \"5e84b966681ae439edfc1d6f\",\n                \"email\": \"test5@test.com\",\n                \"name\": \"Minuit Machine\",\n                \"dateOfBirth\": \"1995-06-25T00:00:00.000Z\",\n                \"gender\": \"female\",\n                \"type\": \"artist\",\n                \"imageUrl\": \"https://zasymphonia.ddns.net/api/v1/images/users/Minuit-Machine.jpg\"\n            },\n            {\n                \"queue\": {\n                    \"currentlyPlaying\": {\n                        \"currentTrack\": null\n                    },\n                    \"queueTracks\": [],\n                    \"previousTrack\": null,\n                    \"repeat\": false,\n                    \"shuffle\": false,\n                    \"play\": false,\n                    \"repeatOnce\": false,\n                    \"devices\": [\n                        {\n                            \"_id\": \"5e8a5b0db2859207bf1fc2e9\",\n                            \"devicesName\": \"chrome\"\n                        }\n                    ]\n                },\n                \"followedUsers\": [],\n                \"tracks\": [\n                    \"5e7d334860cd930408a5f995\",\n                    \"5e8a1e0f7937ec4d40c6deba\",\n                    \"5e8a1e727937ec4d40c6debb\"\n                ],\n                \"ownedPlaylists\": [],\n                \"followedAlbums\": [],\n                \"followedTracks\": [],\n                \"_id\": \"5e82a48054660672fd699883\",\n                \"email\": \"test4@test.com\",\n                \"name\": \"Interpol\",\n                \"dateOfBirth\": \"1979-12-25T00:00:00.000Z\",\n                \"gender\": \"male\",\n                \"type\": \"artist\",\n                \"imageUrl\": \"https://zasymphonia.ddns.net/api/v1/images/users/Interpol.jpg\"\n            }\n        ]\n    },\n    \"limit\": 20,\n    \"total\": 2,\n    \"next\": null,\n    \"cursors\": {\n        \"after\": null\n    },\n    \"totalFollowed\": 2\n}"
						}
					]
				},
				{
					"name": "Unfollow Artists or Users",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"description": "Required. A valid access token from the Spotify Accounts service: see the Web API Authorization Guide for details. The access token must have been issued on behalf of the current user. Modifying the list of artists or users the current user follows requires authorization of the user-follow-modify scope. See Using Scopes.\n",
								"key": "Authorization",
								"type": "text",
								"value": "{{jwt}}"
							},
							{
								"description": "Required if IDs are passed in the request body, otherwise ignored. The content type of the request body: application/json.\n",
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{URL}}api/v1/me/following?ids=5e7f799991f8ed09303e5076",
							"host": [
								"{{URL}}api"
							],
							"path": [
								"v1",
								"me",
								"following"
							],
							"query": [
								{
									"key": "ids",
									"value": "5e7f799991f8ed09303e5076"
								}
							]
						},
						"description": "# Description\r\nRemove the current user as a follower of one or more artists or other Spotify users.\r\n\r\n# Request Parameters\r\n\r\n\r\n## Header Fields\r\n<table>\r\n  <thead>\r\n    <tr>\r\n      <th>Header&nbsp;Field</th>\r\n      <th>Value</th>\r\n    </tr>\r\n  </thead>\r\n  <tbody>\r\n    <tr>\r\n      <td>Authorization</td>\r\n      <td><em>Required</em>. A valid access token from the Spotify Accounts service: see the <a href=\"#\">Web API Authorization Guide</a> for details. The access token must have been issued on behalf of the current user. Modifying the list of artists or users the current user follows requires authorization of the <code class=\"highlighter-rouge\">user-follow-modify</code> scope. See <a href=\"#\">Using Scopes</a>.</td>\r\n    </tr>\r\n    <tr>\r\n      <td>Content-Type</td>\r\n      <td><em>Required if IDs are passed in the request body, otherwise ignored</em>. The content type of the request body: <code class=\"highlighter-rouge\">application/json</code>.</td>\r\n    </tr>\r\n  </tbody>\r\n</table>\r\n\r\n## Body Parameters\r\n\r\n<table>\r\n  <thead>\r\n    <tr>\r\n      <th>Request&nbsp;Body Data</th>\r\n      <th>Value&nbsp;Type</th>\r\n      <th>Value</th>\r\n    </tr>\r\n  </thead>\r\n  <tbody>\r\n    <tr>\r\n      <td>ids</td>\r\n      <td>array of Spotify ID strings</td>\r\n      <td><em>Optional</em>. A JSON array of the artist or user <a href=\"/documentation/web-api/#spotify-uris-and-ids\">Spotify IDs</a>. For example: <code class=\"highlighter-rouge\">{ids:[\"74ASZWbe4lXaubB36ztrGX\", \"08td7MxkoHQkXnWAYD8d6Q\"]}</code>. A maximum of 50 IDs can be sent in one request. <em>Note: if the <code class=\"highlighter-rouge\">ids</code> parameter is present in the query string, any IDs listed here in the body will be ignored.</em></td>\r\n    </tr>\r\n  </tbody>\r\n</table>\r\n## Query parameters\r\n<table>\r\n  <thead>\r\n    <tr>\r\n      <th>Query Parameter</th>\r\n      <th>Value</th>\r\n    </tr>\r\n  </thead>\r\n  <tbody>\r\n    <tr>\r\n      <td>type</td>\r\n      <td><em>Required</em>. The ID type: either <code class=\"highlighter-rouge\">artist</code> or <code class=\"highlighter-rouge\">user</code>.</td>\r\n    </tr>\r\n    <tr>\r\n      <td>ids</td>\r\n      <td><em>Optional</em>. A comma-separated list of the artist or the user <a href=\"#\">Spotify IDs</a>. For example: <code class=\"highlighter-rouge\">ids=74ASZWbe4lXaubB36ztrGX,08td7MxkoHQkXnWAYD8d6Q</code>. A maximum of 50 IDs can be sent in one request.</td>\r\n    </tr>\r\n  </tbody>\r\n</table>\r\n\r\n## Response Format\r\nOn success, the HTTP status code in the response header is 204 No Content and the response body is empty. On error, the header status code is an error code and the response body contains an error object."
					},
					"response": [
						{
							"name": "Unfollow Artists or Users",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"description": "Required. A valid access token from the Spotify Accounts service: see the Web API Authorization Guide for details. The access token must have been issued on behalf of the current user. Modifying the list of artists or users the current user follows requires authorization of the user-follow-modify scope. See Using Scopes.\n",
										"key": "Authorization",
										"type": "text",
										"value": "{{jwt}}"
									},
									{
										"description": "Required if IDs are passed in the request body, otherwise ignored. The content type of the request body: application/json.\n",
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{URL}}api/v1/me/following?ids=5e7f799991f8ed09303e5076",
									"host": [
										"{{URL}}api"
									],
									"path": [
										"v1",
										"me",
										"following"
									],
									"query": [
										{
											"key": "ids",
											"value": "5e7f799991f8ed09303e5076"
										}
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "X-DNS-Prefetch-Control",
									"value": "off"
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=15552000; includeSubDomains"
								},
								{
									"key": "X-Download-Options",
									"value": "noopen"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-XSS-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "X-RateLimit-Limit",
									"value": "1000"
								},
								{
									"key": "X-RateLimit-Remaining",
									"value": "999"
								},
								{
									"key": "Date",
									"value": "Sat, 04 Apr 2020 08:44:05 GMT"
								},
								{
									"key": "X-RateLimit-Reset",
									"value": "1585993430"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Unfollow Artists or Users",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"description": "Required. A valid access token from the Spotify Accounts service: see the Web API Authorization Guide for details. The access token must have been issued on behalf of the current user. Modifying the list of artists or users the current user follows requires authorization of the user-follow-modify scope. See Using Scopes.\n",
										"key": "Authorization",
										"type": "text",
										"value": "{{jwt}}"
									},
									{
										"description": "Required if IDs are passed in the request body, otherwise ignored. The content type of the request body: application/json.\n",
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{URL}}api/v1/me/following?ids=5e7f799991f8ed09303e5076",
									"host": [
										"{{URL}}api"
									],
									"path": [
										"v1",
										"me",
										"following"
									],
									"query": [
										{
											"key": "ids",
											"value": "5e7f799991f8ed09303e5076"
										}
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "X-DNS-Prefetch-Control",
									"value": "off"
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=15552000; includeSubDomains"
								},
								{
									"key": "X-Download-Options",
									"value": "noopen"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-XSS-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "X-RateLimit-Limit",
									"value": "1000"
								},
								{
									"key": "X-RateLimit-Remaining",
									"value": "998"
								},
								{
									"key": "Date",
									"value": "Sat, 04 Apr 2020 08:51:13 GMT"
								},
								{
									"key": "X-RateLimit-Reset",
									"value": "1585993530"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Unfollow a Playlist",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"description": "Required. A valid access token from the Spotify Accounts service: see the Web API Authorization Guide for details. The access token must have been issued on behalf of the current user. Modifying the list of artists or users the current user follows requires authorization of the user-follow-modify scope. See Using Scopes.\n",
								"key": "Authorization",
								"type": "text",
								"value": "{{jwt}}"
							},
							{
								"description": "Required if IDs are passed in the request body, otherwise ignored. The content type of the request body: application/json.\n",
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{URL}}api/v1/playlists/5e7969965146d92e98ac3ef7/followers",
							"host": [
								"{{URL}}api"
							],
							"path": [
								"v1",
								"playlists",
								"5e7969965146d92e98ac3ef7",
								"followers"
							]
						},
						"description": "# Description\r\nRemove the current user as a follower of one or more artists or other Spotify users.\r\n\r\n# Request Parameters\r\n\r\n\r\n## Header Fields\r\n<table>\r\n  <thead>\r\n    <tr>\r\n      <th>Header&nbsp;Field</th>\r\n      <th>Value</th>\r\n    </tr>\r\n  </thead>\r\n  <tbody>\r\n    <tr>\r\n      <td>Authorization</td>\r\n      <td><em>Required</em>. A valid access token from the Spotify Accounts service: see the <a href=\"#\">Web API Authorization Guide</a> for details. The access token must have been issued on behalf of the current user. Modifying the list of artists or users the current user follows requires authorization of the <code class=\"highlighter-rouge\">user-follow-modify</code> scope. See <a href=\"#\">Using Scopes</a>.</td>\r\n    </tr>\r\n    <tr>\r\n      <td>Content-Type</td>\r\n      <td><em>Required if IDs are passed in the request body, otherwise ignored</em>. The content type of the request body: <code class=\"highlighter-rouge\">application/json</code>.</td>\r\n    </tr>\r\n  </tbody>\r\n</table>\r\n\r\n## Body Parameters\r\n\r\n<table>\r\n  <thead>\r\n    <tr>\r\n      <th>Request&nbsp;Body Data</th>\r\n      <th>Value&nbsp;Type</th>\r\n      <th>Value</th>\r\n    </tr>\r\n  </thead>\r\n  <tbody>\r\n    <tr>\r\n      <td>ids</td>\r\n      <td>array of Spotify ID strings</td>\r\n      <td><em>Optional</em>. A JSON array of the artist or user <a href=\"/documentation/web-api/#spotify-uris-and-ids\">Spotify IDs</a>. For example: <code class=\"highlighter-rouge\">{ids:[\"74ASZWbe4lXaubB36ztrGX\", \"08td7MxkoHQkXnWAYD8d6Q\"]}</code>. A maximum of 50 IDs can be sent in one request. <em>Note: if the <code class=\"highlighter-rouge\">ids</code> parameter is present in the query string, any IDs listed here in the body will be ignored.</em></td>\r\n    </tr>\r\n  </tbody>\r\n</table>\r\n## Query parameters\r\n<table>\r\n  <thead>\r\n    <tr>\r\n      <th>Query Parameter</th>\r\n      <th>Value</th>\r\n    </tr>\r\n  </thead>\r\n  <tbody>\r\n    <tr>\r\n      <td>type</td>\r\n      <td><em>Required</em>. The ID type: either <code class=\"highlighter-rouge\">artist</code> or <code class=\"highlighter-rouge\">user</code>.</td>\r\n    </tr>\r\n    <tr>\r\n      <td>ids</td>\r\n      <td><em>Optional</em>. A comma-separated list of the artist or the user <a href=\"#\">Spotify IDs</a>. For example: <code class=\"highlighter-rouge\">ids=74ASZWbe4lXaubB36ztrGX,08td7MxkoHQkXnWAYD8d6Q</code>. A maximum of 50 IDs can be sent in one request.</td>\r\n    </tr>\r\n  </tbody>\r\n</table>\r\n\r\n## Response Format\r\nOn success, the HTTP status code in the response header is 204 No Content and the response body is empty. On error, the header status code is an error code and the response body contains an error object."
					},
					"response": [
						{
							"name": "Unfollow a Playlist",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"description": "Required. A valid access token from the Spotify Accounts service: see the Web API Authorization Guide for details. The access token must have been issued on behalf of the current user. Modifying the list of artists or users the current user follows requires authorization of the user-follow-modify scope. See Using Scopes.\n",
										"key": "Authorization",
										"type": "text",
										"value": "{{jwt}}"
									},
									{
										"description": "Required if IDs are passed in the request body, otherwise ignored. The content type of the request body: application/json.\n",
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{URL}}api/v1/playlists/5e7969965146d92e98ac3ef7/followers",
									"host": [
										"{{URL}}api"
									],
									"path": [
										"v1",
										"playlists",
										"5e7969965146d92e98ac3ef7",
										"followers"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "X-DNS-Prefetch-Control",
									"value": "off"
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=15552000; includeSubDomains"
								},
								{
									"key": "X-Download-Options",
									"value": "noopen"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-XSS-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "X-RateLimit-Limit",
									"value": "1000"
								},
								{
									"key": "X-RateLimit-Remaining",
									"value": "995"
								},
								{
									"key": "Date",
									"value": "Sat, 04 Apr 2020 08:25:45 GMT"
								},
								{
									"key": "X-RateLimit-Reset",
									"value": "1585991899"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Content-Length",
									"value": "0"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "get count of followed playlists",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}api/v1/me/following/playlists/count",
							"host": [
								"{{URL}}api"
							],
							"path": [
								"v1",
								"me",
								"following",
								"playlists",
								"count"
							]
						}
					},
					"response": [
						{
							"name": "get count of followed playlists",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}api/v1/me/following/playlists/count",
									"host": [
										"{{URL}}api"
									],
									"path": [
										"v1",
										"me",
										"following",
										"playlists",
										"count"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "X-DNS-Prefetch-Control",
									"value": "off"
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=15552000; includeSubDomains"
								},
								{
									"key": "X-Download-Options",
									"value": "noopen"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-XSS-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "23"
								},
								{
									"key": "ETag",
									"value": "W/\"17-JPyRl7WzFnd0Ld/JrA2gn7RYpWE\""
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding"
								},
								{
									"key": "Date",
									"value": "Tue, 07 Apr 2020 20:57:14 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"FollowedPlaylists\": 4\n}"
						}
					]
				},
				{
					"name": "Get Artist Followers",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}api/v1/Artists/5e82a48054660672fd699883/followers",
							"host": [
								"{{URL}}api"
							],
							"path": [
								"v1",
								"Artists",
								"5e82a48054660672fd699883",
								"followers"
							]
						}
					},
					"response": [
						{
							"name": "Get Artist Followers",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}api/v1/Artists/5e82a48054660672fd699883/followers",
									"host": [
										"{{URL}}api"
									],
									"path": [
										"v1",
										"Artists",
										"5e82a48054660672fd699883",
										"followers"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "X-DNS-Prefetch-Control",
									"value": "off"
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=15552000; includeSubDomains"
								},
								{
									"key": "X-Download-Options",
									"value": "noopen"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-XSS-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "ETag",
									"value": "W/\"52f-Rs7nprSuDDKdk0EZgV6gfyisoBw\""
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip"
								},
								{
									"key": "Date",
									"value": "Tue, 07 Apr 2020 20:57:51 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								}
							],
							"cookie": [],
							"body": "{\n    \"followers\": [\n        {\n            \"followedUsers\": [\n                \"5e84b966681ae439edfc1d6f\",\n                \"5e82a48054660672fd699883\",\n                \"5e812a3454660672fd699880\"\n            ],\n            \"tracks\": [],\n            \"ownedPlaylists\": [\n                \"5e7969965146d92e98ac3ef7\",\n                \"5e7ac3c7d43a2c49909c549c\",\n                \"5e805a8a3711912168602afa\",\n                \"5e875c15ba6ebe663fdbb2c1\"\n            ],\n            \"followedAlbums\": [\n                \"5e701f4d2672a63a60573a02\",\n                \"5e701fdf2672a63a60573a06\"\n            ],\n            \"followedTracks\": [],\n            \"_id\": \"5e8125dc54660672fd69987f\",\n            \"email\": \"generalmohamed1999@gmail.com\",\n            \"name\": \"Muhammad Ahmad Hesham\",\n            \"dateOfBirth\": \"1999-05-12T00:00:00.000Z\",\n            \"gender\": \"male\",\n            \"type\": \"user\",\n            \"last_login\": \"2020-04-06T10:21:58.141Z\",\n            \"passwordChangedAt\": \"2020-04-01T15:38:48.450Z\",\n            \"googleId\": \"googleId\",\n            \"imageGoogleUrl\": \"https://lh3.googleusercontent.com/a-/AOh14Gga4UgHOVM-hgdnV5Sv8OusgKzhsfmiYv5wEgSwxA\",\n            \"imageUrl\": \"https://zasymphonia.ddns.net/api/v1/images/users/default.png\"\n        },\n        {\n            \"followedUsers\": [\n                \"5e82a48054660672fd699883\",\n                \"5e8b6d866253cb184eaac150\"\n            ],\n            \"tracks\": [],\n            \"ownedPlaylists\": [\n                \"5e806865ef653f5a541e0b1d\",\n                \"5e8069722fcb0d35900c4d64\",\n                \"5e8078b0dbaafc18605cb029\",\n                \"5e8828df838d9835d207016d\"\n            ],\n            \"followedAlbums\": [\n                \"5e794163c01c024ecc3c31d3\"\n            ],\n            \"followedTracks\": [],\n            \"_id\": \"5e812a3454660672fd699880\",\n            \"email\": \"test1@test.com\",\n            \"name\": \"user1\",\n            \"dateOfBirth\": \"1999-06-25T00:00:00.000Z\",\n            \"gender\": \"female\",\n            \"type\": \"user\",\n            \"imageUrl\": \"https://zasymphonia.ddns.net/api/v1/images/users/default.png\"\n        }\n    ],\n    \"followers_count\": 2\n}"
						}
					]
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "library",
			"item": [
				{
					"name": " Check User's Saved Albums",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"description": "*Required*. A valid access token from the Symphonia Accounts service.\n\n",
								"key": "Authorization",
								"type": "text",
								"value": ""
							}
						],
						"url": {
							"raw": "{{URL}}api/v1/me/albums/contains?ids=5e701f4d2672a63a60573a02,5e701fdf2672a63a60573a05",
							"host": [
								"{{URL}}api"
							],
							"path": [
								"v1",
								"me",
								"albums",
								"contains"
							],
							"query": [
								{
									"key": "ids",
									"value": "5e701f4d2672a63a60573a02,5e701fdf2672a63a60573a05",
									"description": "*Required*. A comma-separated list of the Symphonia IDs for the albums. Maximum: 50 IDs."
								}
							]
						},
						"description": "# Description\r\n\r\nCheck if one or more albums is already saved in the current Symphonia user’s ‘Your Music’ library.\r\n\r\n## Response Format\r\n\r\nOn success, the HTTP status code in the response header is `200` OK and the response body contains a JSON array of `true` or `false` values, in the same order in which the `ids` were specified. On error, the header status code is an error code and the response body contains an error object.\r\n\r\n## Request parameters"
					},
					"response": [
						{
							"name": " Check User's Saved Albums",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "*Required*. A valid access token from the Symphonia Accounts service.\n\n",
										"key": "Authorization",
										"type": "text",
										"value": ""
									}
								],
								"url": {
									"raw": "{{URL}}api/v1/me/albums/contains?ids=5e701f4d2672a63a60573a02,5e701fdf2672a63a60573a05",
									"host": [
										"{{URL}}api"
									],
									"path": [
										"v1",
										"me",
										"albums",
										"contains"
									],
									"query": [
										{
											"key": "ids",
											"value": "5e701f4d2672a63a60573a02,5e701fdf2672a63a60573a05",
											"description": "*Required*. A comma-separated list of the Symphonia IDs for the albums. Maximum: 50 IDs."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "X-DNS-Prefetch-Control",
									"value": "off"
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=15552000; includeSubDomains"
								},
								{
									"key": "X-Download-Options",
									"value": "noopen"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-XSS-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "12"
								},
								{
									"key": "ETag",
									"value": "W/\"c-L/azHS94l9YtOYJ8D2PfXJ9IGec\""
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding"
								},
								{
									"key": "Date",
									"value": "Tue, 07 Apr 2020 20:59:11 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "[\n    true,\n    false\n]"
						}
					]
				},
				{
					"name": "Check User's Saved Tracks",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"description": "*Required*. A valid access token from the Symphonia Accounts service.\n\n",
								"key": "Authorization",
								"type": "text",
								"value": ""
							}
						],
						"url": {
							"raw": "{{URL}}api/v1/me/tracks/contains?ids=5e7d2dc03429e24340ff1396,5e7d2ddd3429e24340ff1397,5e7d2dc03429e24340ff1396",
							"host": [
								"{{URL}}api"
							],
							"path": [
								"v1",
								"me",
								"tracks",
								"contains"
							],
							"query": [
								{
									"key": "ids",
									"value": "5e7d2dc03429e24340ff1396,5e7d2ddd3429e24340ff1397,5e7d2dc03429e24340ff1396",
									"description": "*Required*. A comma-separated list of the Symphonia IDs for the albums. Maximum: 50 IDs."
								}
							]
						},
						"description": "# Description\r\n\r\nCheck if one or more tracks is already saved in the current Symphonia user’s ‘Your Music’ library.\r\n\r\n## Response Format\r\n\r\nOn success, the HTTP status code in the response header is `200` OK and the response body contains a JSON array of `true` or `false` values, in the same order in which the `ids` were specified. On error, the header status code is an error code and the response body contains an error object.\r\n\r\n## Request parameters"
					},
					"response": [
						{
							"name": "Check User's Saved Tracks",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "*Required*. A valid access token from the Symphonia Accounts service.\n\n",
										"key": "Authorization",
										"type": "text",
										"value": ""
									}
								],
								"url": {
									"raw": "{{URL}}api/v1/me/tracks/contains?ids=5e7d2dc03429e24340ff1396,5e7d2ddd3429e24340ff1397,5e7d2dc03429e24340ff1396",
									"host": [
										"{{URL}}api"
									],
									"path": [
										"v1",
										"me",
										"tracks",
										"contains"
									],
									"query": [
										{
											"key": "ids",
											"value": "5e7d2dc03429e24340ff1396,5e7d2ddd3429e24340ff1397,5e7d2dc03429e24340ff1396",
											"description": "*Required*. A comma-separated list of the Symphonia IDs for the albums. Maximum: 50 IDs."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "X-DNS-Prefetch-Control",
									"value": "off"
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=15552000; includeSubDomains"
								},
								{
									"key": "X-Download-Options",
									"value": "noopen"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-XSS-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "19"
								},
								{
									"key": "ETag",
									"value": "W/\"13-JshKSuFWpp89J6UEiCGj/zVgvug\""
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding"
								},
								{
									"key": "Date",
									"value": "Tue, 07 Apr 2020 21:01:51 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "[\n    true,\n    false,\n    false\n]"
						}
					]
				},
				{
					"name": "Get Current User's Saved Albums",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"description": "*Required*. A valid access token from the Symphonia Accounts service.\n\n",
								"key": "Authorization",
								"type": "text",
								"value": ""
							}
						],
						"url": {
							"raw": "{{URL}}api/v1/me/albums?limit&offset",
							"host": [
								"{{URL}}api"
							],
							"path": [
								"v1",
								"me",
								"albums"
							],
							"query": [
								{
									"key": "limit",
									"value": null,
									"description": "*Optional*. The maximum number of objects to return. Default: 20. Minimum: 1. Maximum: 50."
								},
								{
									"key": "offset",
									"value": null,
									"description": "*Optional*. The index of the first object to return. Default: 0 (i.e., the first object). Use with `limit` to get the next set of objects."
								}
							]
						},
						"description": "# Description\r\n\r\nGet a list of the albums saved in the current symphonia user’s ‘Your Music’ library.\r\n\r\n## Response Format\r\n\r\nOn success, the HTTP status code in the response header is 200 OK and the response body contains an array of album objects (wrapped in a paging object) in JSON format. Each album object is accompanied by a timestamp (added_at) to show when it was added. There is also an etag in the header that can be used in future conditional requests.\r\nOn error, the header status code is an error code and the response body contains an error object.\r\n\r\n### saved album object\r\n\r\n<table>\r\n  <thead>\r\n    <tr>\r\n      <th>Key</th>\r\n      <th>Value Type</th>\r\n      <th>Value Description</th>\r\n    </tr>\r\n  </thead>\r\n  <tbody>\r\n    <tr>\r\n      <td>added_at</td>\r\n      <td>a timestamp</td>\r\n      <td>The date and time the album was saved.</td>\r\n    </tr>\r\n    <tr>\r\n      <td>album</td>\r\n      <td>a album object</td>\r\n      <td>Information about the album.</td>\r\n    </tr>\r\n  </tbody>\r\n</table>\r\n\r\n### paging object\r\n\r\n<table>\r\n  <thead>\r\n    <tr>\r\n      <th>Key</th>\r\n      <th>Value Type</th>\r\n      <th>Value Description</th>\r\n    </tr>\r\n  </thead>\r\n  <tbody>\r\n    <tr>\r\n      <td>href</td>\r\n      <td>string</td>\r\n      <td>A link to the Web API endpoint returning the full result of the request.</td>\r\n    </tr>\r\n    <tr>\r\n      <td>items</td>\r\n      <td>an array of objects</td>\r\n      <td>The requested data.</td>\r\n    </tr>\r\n    <tr>\r\n      <td>limit</td>\r\n      <td>integer</td>\r\n      <td>The maximum number of items in the response (as set in the query or by default).</td>\r\n    </tr>\r\n    <tr>\r\n      <td>next</td>\r\n      <td>string</td>\r\n      <td>URL to the next page of items. ( <code class=\"highlighter-rouge\">null</code> if none)</td>\r\n    </tr>\r\n    <tr>\r\n      <td>offset</td>\r\n      <td>integer</td>\r\n      <td>The offset of the items returned (as set in the query or by default).</td>\r\n    </tr>\r\n    <tr>\r\n      <td>previous</td>\r\n      <td>string</td>\r\n      <td>URL to the previous page of items. ( <code class=\"highlighter-rouge\">null</code> if none)</td>\r\n    </tr>\r\n    <tr>\r\n      <td>total</td>\r\n      <td>integer</td>\r\n      <td>The total number of items available to return.</td>\r\n    </tr>\r\n  </tbody>\r\n</table>\r\n\r\n<br>\r\n\r\n## Request parameters"
					},
					"response": [
						{
							"name": "Get Current User's Saved Albums",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "*Required*. A valid access token from the Symphonia Accounts service.\n\n",
										"key": "Authorization",
										"type": "text",
										"value": ""
									}
								],
								"url": {
									"raw": "{{URL}}api/v1/me/albums?limit&offset",
									"host": [
										"{{URL}}api"
									],
									"path": [
										"v1",
										"me",
										"albums"
									],
									"query": [
										{
											"key": "limit",
											"value": null,
											"description": "*Optional*. The maximum number of objects to return. Default: 20. Minimum: 1. Maximum: 50."
										},
										{
											"key": "offset",
											"value": null,
											"description": "*Optional*. The index of the first object to return. Default: 0 (i.e., the first object). Use with `limit` to get the next set of objects."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "X-DNS-Prefetch-Control",
									"value": "off"
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=15552000; includeSubDomains"
								},
								{
									"key": "X-Download-Options",
									"value": "noopen"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-XSS-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "756"
								},
								{
									"key": "ETag",
									"value": "W/\"2f4-okAjQushKSGC+E32Pzd3AWbOJa0\""
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding"
								},
								{
									"key": "Date",
									"value": "Tue, 07 Apr 2020 21:02:24 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"Albums\": {\n        \"total\": 2,\n        \"items\": [\n            {\n                \"tracks\": [\n                    \"5e7d334860cd930408a5f995\",\n                    \"5e8a1e0f7937ec4d40c6deba\",\n                    \"5e8a1e727937ec4d40c6debb\"\n                ],\n                \"releaseDate\": \"2020-04-07T21:01:43.290Z\",\n                \"_id\": \"5e701f4d2672a63a60573a02\",\n                \"name\": \"El Pintor\",\n                \"year\": 2014,\n                \"image\": \"https://zasymphonia.ddns.net/api/v1/images/albums/El-Pintor.jpg\",\n                \"artist\": \"5e82a48054660672fd699883\"\n            },\n            {\n                \"tracks\": [\n                    \"5e7d2dc03429e24340ff1396\",\n                    \"5e7d2ddd3429e24340ff1397\",\n                    \"5e7d2e023429e24340ff1398\"\n                ],\n                \"releaseDate\": \"2020-04-07T21:01:43.290Z\",\n                \"_id\": \"5e701fdf2672a63a60573a06\",\n                \"name\": \"The Slow Rush\",\n                \"year\": 2020,\n                \"image\": \"https://zasymphonia.ddns.net/api/v1/images/albums/The-Slow-Rush.jpg\",\n                \"artist\": \"5e8137aa54660672fd699882\"\n            }\n        ],\n        \"limit\": 20,\n        \"offset\": 0,\n        \"next\": null,\n        \"previous\": null,\n        \"href\": \"http://localhost:3000/api/v1/me/albums\"\n    }\n}"
						}
					]
				},
				{
					"name": "Get a User's Saved Tracks",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"description": "*Required*. A valid access token from the Symphonia Accounts service.\n\n",
								"key": "Authorization",
								"type": "text",
								"value": ""
							}
						],
						"url": {
							"raw": "{{URL}}api/v1/me/tracks?limit&offset",
							"host": [
								"{{URL}}api"
							],
							"path": [
								"v1",
								"me",
								"tracks"
							],
							"query": [
								{
									"key": "limit",
									"value": null,
									"description": "*Optional*. The maximum number of objects to return. Default: 20. Minimum: 1. Maximum: 50."
								},
								{
									"key": "offset",
									"value": null,
									"description": "*Optional*. The index of the first object to return. Default: 0 (i.e., the first object). Use with `limit` to get the next set of objects."
								}
							]
						},
						"description": "# Description\r\n\r\nGet a list of the songs saved in the current Symphonia user’s ‘Your Music’ library.\r\n\r\n\r\n## Response Format\r\nOn success, the HTTP status code in the response header is `200` OK and the response body contains an array of saved track objects (wrapped in a paging object) in JSON format. On error, the header status code is an error code and the response body contains an error object.\r\n\r\n\r\n## saved track object\r\n<table>\r\n  <thead>\r\n    <tr>\r\n      <th>Key</th>\r\n      <th>Value Type</th>\r\n      <th>Value Description</th>\r\n    </tr>\r\n  </thead>\r\n  <tbody>\r\n    <tr>\r\n      <td>added_at</td>\r\n      <td>a timestamp</td>\r\n      <td>The date and time the track was saved.</td>\r\n    </tr>\r\n    <tr>\r\n      <td>track</td>\r\n      <td>a track object</td>\r\n      <td>Information about the track.</td>\r\n    </tr>\r\n  </tbody>\r\n</table>\r\n\r\n\r\n### paging object\r\n\r\n<table>\r\n  <thead>\r\n    <tr>\r\n      <th>Key</th>\r\n      <th>Value Type</th>\r\n      <th>Value Description</th>\r\n    </tr>\r\n  </thead>\r\n  <tbody>\r\n    <tr>\r\n      <td>href</td>\r\n      <td>string</td>\r\n      <td>A link to the Web API endpoint returning the full result of the request.</td>\r\n    </tr>\r\n    <tr>\r\n      <td>items</td>\r\n      <td>an array of objects</td>\r\n      <td>The requested data.</td>\r\n    </tr>\r\n    <tr>\r\n      <td>limit</td>\r\n      <td>integer</td>\r\n      <td>The maximum number of items in the response (as set in the query or by default).</td>\r\n    </tr>\r\n    <tr>\r\n      <td>next</td>\r\n      <td>string</td>\r\n      <td>URL to the next page of items. ( <code class=\"highlighter-rouge\">null</code> if none)</td>\r\n    </tr>\r\n    <tr>\r\n      <td>offset</td>\r\n      <td>integer</td>\r\n      <td>The offset of the items returned (as set in the query or by default).</td>\r\n    </tr>\r\n    <tr>\r\n      <td>previous</td>\r\n      <td>string</td>\r\n      <td>URL to the previous page of items. ( <code class=\"highlighter-rouge\">null</code> if none)</td>\r\n    </tr>\r\n    <tr>\r\n      <td>total</td>\r\n      <td>integer</td>\r\n      <td>The total number of items available to return.</td>\r\n    </tr>\r\n  </tbody>\r\n</table>\r\n\r\n<br>\r\n\r\n## Request parameters"
					},
					"response": [
						{
							"name": "Get a User's Saved Tracks",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "*Required*. A valid access token from the Symphonia Accounts service.\n\n",
										"key": "Authorization",
										"type": "text",
										"value": ""
									}
								],
								"url": {
									"raw": "{{URL}}api/v1/me/tracks?limit&offset",
									"host": [
										"{{URL}}api"
									],
									"path": [
										"v1",
										"me",
										"tracks"
									],
									"query": [
										{
											"key": "limit",
											"value": null,
											"description": "*Optional*. The maximum number of objects to return. Default: 20. Minimum: 1. Maximum: 50."
										},
										{
											"key": "offset",
											"value": null,
											"description": "*Optional*. The index of the first object to return. Default: 0 (i.e., the first object). Use with `limit` to get the next set of objects."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "X-DNS-Prefetch-Control",
									"value": "off"
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=15552000; includeSubDomains"
								},
								{
									"key": "X-Download-Options",
									"value": "noopen"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-XSS-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "131"
								},
								{
									"key": "ETag",
									"value": "W/\"83-hF8wwXocZHWzAhGG5Q0GBbiAocQ\""
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding"
								},
								{
									"key": "Date",
									"value": "Tue, 07 Apr 2020 21:02:47 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"tracks\": {\n        \"total\": 0,\n        \"items\": [],\n        \"limit\": 20,\n        \"offset\": 0,\n        \"next\": null,\n        \"previous\": null,\n        \"href\": \"http://localhost:3000/api/v1/me/albums\"\n    }\n}"
						}
					]
				},
				{
					"name": "Remove Albums for Current User",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"description": "*Required*. A valid access token from the Symphonia Accounts service.\n",
								"key": "Authorization",
								"type": "text",
								"value": ""
							},
							{
								"warning": "Key contains invalid whitespace characters.",
								"description": "*Required*  The content type of the request body: ",
								"key": "Content-Type\t",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{URL}api/v1/me/albums",
							"host": [
								"{{URL}api"
							],
							"path": [
								"v1",
								"me",
								"albums"
							]
						},
						"description": "# Description\r\n\r\nRemove one or more albums from the current user’s ‘Your Music’ library.\r\n\r\n\r\n\r\n\r\n# RESPONSE FORMAT\r\nOn success, the HTTP status code in the response header is `200` Success. On error, the header status code is an error code and the response body contains an error object. Trying to remove an album when you do not have the user’s authorization returns error `403` Forbidden.\r\n\r\n\r\n\r\n## Request parameters\r\n\r\n### Body Parameters\r\n<table>\r\n  <thead>\r\n    <tr>\r\n      <th>Request Body Data</th>\r\n      <th>Value Type</th>\r\n      <th>Value</th>\r\n    </tr>\r\n  </thead>\r\n  <tbody>\r\n    <tr>\r\n      <td></td>\r\n      <td>array of Symphonia ID strings</td>\r\n      <td><em>Optional</em>. A JSON array of the Symphonia IDs. For example: <code class=\"highlighter-rouge\">[\"4iV5W9uYEdYUVa79Axb7Rh\", \"1301WleyT98MSxVHPZCA6M\"]</code><br>A maximum of 50 items can be specified in one request.</td>\r\n    </tr>\r\n  </tbody>\r\n</table>\r\n<br>"
					},
					"response": [
						{
							"name": "Remove Albums for Current User",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"description": "*Required*. A valid access token from the Symphonia Accounts service.\n",
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {your access token}"
									},
									{
										"warning": "Key contains invalid whitespace characters.",
										"description": "*Required*  The content type of the request body: ",
										"key": "Content-Type\t",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n    \"6akEvsycLGftJxYudPjmqK\",\n    \"628oezqK2qfmCjC6eXNors\"\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}api/v1/me/albums",
									"host": [
										"{{URL}api"
									],
									"path": [
										"v1",
										"me",
										"albums"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": null,
							"cookie": [],
							"body": "{\n\t\"status\": \"success\"\n}"
						}
					]
				},
				{
					"name": "Remove User's Saved Tracks",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"description": "*Required*. A valid access token from the Symphonia Accounts service.\n\n",
								"key": "Authorization",
								"type": "text",
								"value": ""
							},
							{
								"warning": "Key contains invalid whitespace characters.",
								"description": "*Required*  The content type of the request body: ",
								"key": "Content-Type\t",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{URL}api/v1/me/tracks",
							"host": [
								"{{URL}api"
							],
							"path": [
								"v1",
								"me",
								"tracks"
							]
						},
						"description": "# Description\r\n\r\nRemove one or more tracks from the current user’s ‘Your Music’ library.\r\n\r\n\r\n# RESPONSE FORMAT\r\nOn success, the HTTP status code in the response header is `200` Success. On error, the header status code is an error code and the response body contains an error object. Trying to remove a track when you do not have the user’s authorization returns error `403` Forbidden.\r\n\r\n\r\n\r\n## Request parameters\r\n\r\n### Body Parameters\r\n<table>\r\n  <thead>\r\n    <tr>\r\n      <th>Request Body Data</th>\r\n      <th>Value Type</th>\r\n      <th>Value</th>\r\n    </tr>\r\n  </thead>\r\n  <tbody>\r\n    <tr>\r\n      <td></td>\r\n      <td>array of Symphonia ID strings</td>\r\n      <td><em>Optional</em>. A JSON array of the Symphonia IDs. For example: <code class=\"highlighter-rouge\">[\"4iV5W9uYEdYUVa79Axb7Rh\", \"1301WleyT98MSxVHPZCA6M\"]</code><br>A maximum of 50 items can be specified in one request.</td>\r\n    </tr>\r\n  </tbody>\r\n</table>\r\n<br>"
					},
					"response": [
						{
							"name": "Remove User's Saved Tracks",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"description": "*Required*. A valid access token from the Symphonia Accounts service.\n\n",
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {your access token}"
									},
									{
										"warning": "Key contains invalid whitespace characters.",
										"description": "*Required*  The content type of the request body: ",
										"key": "Content-Type\t",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\"4iV5W9uYEdYUVa79Axb7Rh\", \"1301WleyT98MSxVHPZCA6M\"]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}api/v1/me/tracks",
									"host": [
										"{{URL}api"
									],
									"path": [
										"v1",
										"me",
										"tracks"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": null,
							"cookie": [],
							"body": "{\n\t\"status\": \"success\"\n}"
						}
					]
				},
				{
					"name": "Save Albums for Current User",
					"request": {
						"method": "PUT",
						"header": [
							{
								"description": "*Required*. A valid access token from the Symphonia Accounts service.\n\n",
								"key": "Authorization",
								"type": "text",
								"value": ""
							},
							{
								"warning": "Key contains invalid whitespace characters.",
								"description": "*Required*  The content type of the request body: ",
								"key": "Content-Type\t",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{URL}api/v1/me/albums",
							"host": [
								"{{URL}api"
							],
							"path": [
								"v1",
								"me",
								"albums"
							]
						},
						"description": "# Description\r\n\r\nSave one or more albums to the current user’s ‘Your Music’ library.\r\n\r\n## RESPONSE FORMAT\r\nOn success, the HTTP status code in the response header is `201` Created. On error, the header status code is an error code and the response body contains an error object. Trying to add an album when you do not have the user’s authorization returns error `403` Forbidden.\r\n\r\n\r\n\r\n## Request parameters\r\n\r\n### Body Parameters\r\n<table>\r\n  <thead>\r\n    <tr>\r\n      <th>Request Body Data</th>\r\n      <th>Value Type</th>\r\n      <th>Value</th>\r\n    </tr>\r\n  </thead>\r\n  <tbody>\r\n    <tr>\r\n      <td></td>\r\n      <td>array of Symphonia ID strings</td>\r\n      <td><em>Optional</em>. A JSON array of the Symphonia IDs. For example: <code class=\"highlighter-rouge\">[\"4iV5W9uYEdYUVa79Axb7Rh\", \"1301WleyT98MSxVHPZCA6M\"]</code><br>A maximum of 50 items can be specified in one request.</td>\r\n    </tr>\r\n  </tbody>\r\n</table>\r\n<br>"
					},
					"response": [
						{
							"name": "Save Albums for Current User",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"description": "*Required*. A valid access token from the Symphonia Accounts service.\n\n",
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {your access token}"
									},
									{
										"warning": "Key contains invalid whitespace characters.",
										"description": "*Required*  The content type of the request body: ",
										"key": "Content-Type\t",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n    \"6akEvsycLGftJxYudPjmqK\",\n    \"628oezqK2qfmCjC6eXNors\"\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}api/v1/me/albums",
									"host": [
										"{{URL}api"
									],
									"path": [
										"v1",
										"me",
										"albums"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": null,
							"cookie": [],
							"body": "{\n\t\"status\": \"success\"\n}"
						}
					]
				},
				{
					"name": "Save Tracks for User",
					"request": {
						"method": "PUT",
						"header": [
							{
								"description": "*Required*. A valid access token from the Symphonia Accounts service.\n\n",
								"key": "Authorization",
								"type": "text",
								"value": ""
							},
							{
								"warning": "Key contains invalid whitespace characters.",
								"description": "*Required*  The content type of the request body: ",
								"key": "Content-Type\t",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{URL}api/v1/me/tracks",
							"host": [
								"{{URL}api"
							],
							"path": [
								"v1",
								"me",
								"tracks"
							]
						},
						"description": "# Description\r\n\r\nSave one or more tracks to the current user’s ‘Your Music’ library.\r\n\r\n## RESPONSE FORMAT\r\nOn success, the HTTP status code in the response header is `200` OK. On error, the header status code is an error code and the response body contains an error object. Trying to add a track when you do not have the user’s authorization, or when you have over 10.000 tracks in Your Music, returns error `403` Forbidden.\r\n\r\n\r\n\r\n## Request parameters\r\n\r\n### Body Parameters\r\n<table>\r\n  <thead>\r\n    <tr>\r\n      <th>Request Body Data</th>\r\n      <th>Value Type</th>\r\n      <th>Value</th>\r\n    </tr>\r\n  </thead>\r\n  <tbody>\r\n    <tr>\r\n      <td></td>\r\n      <td>array of Symphonia ID strings</td>\r\n      <td><em>Optional</em>. A JSON array of the Symphonia IDs. For example: <code class=\"highlighter-rouge\">[\"4iV5W9uYEdYUVa79Axb7Rh\", \"1301WleyT98MSxVHPZCA6M\"]</code><br>A maximum of 50 items can be specified in one request.</td>\r\n    </tr>\r\n  </tbody>\r\n</table>\r\n<br>"
					},
					"response": [
						{
							"name": "Save Tracks for User",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"description": "*Required*. A valid access token from the Symphonia Accounts service.\n\n",
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {your access token}"
									},
									{
										"warning": "Key contains invalid whitespace characters.",
										"description": "*Required*  The content type of the request body: ",
										"key": "Content-Type\t",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"ids\":[\"4iV5W9uYEdYUVa79Axb7Rh\", \"1301WleyT98MSxVHPZCA6M\"]}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}api/v1/me/tracks",
									"host": [
										"{{URL}api"
									],
									"path": [
										"v1",
										"me",
										"tracks"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": null,
							"cookie": [],
							"body": "{\n\t\"status\": \"success\"\n}"
						}
					]
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Personalization",
			"item": [
				{
					"name": "Top-Track/Atrists",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}/me/top/:type?limit=inetger&page=inetger&sort=sorting_field&filter=filter_feilds",
							"host": [
								"{{URL}}"
							],
							"path": [
								"me",
								"top",
								":type"
							],
							"query": [
								{
									"key": "limit",
									"value": "inetger"
								},
								{
									"key": "page",
									"value": "inetger"
								},
								{
									"key": "sort",
									"value": "sorting_field"
								},
								{
									"key": "filter",
									"value": "filter_feilds"
								}
							],
							"variable": [
								{
									"key": "type",
									"value": ""
								}
							]
						},
						"description": "## Get a User's Top Artists and Tracks\r\n Get the current user’s top artists or tracks based on calculated affinity.\r\n\r\n\r\n Affinity is a measure of the expected preference a user has for a particular track or artist.  It is based on user behavior, including play history, but does not include actions made while in incognito mode. Light or infrequent users of Spotify may not have sufficient play history to generate a full affinity data set. As a user’s behavior is likely to shift over time, this preference data is available over three time spans. See time_range in the query parameter table for more information. For each time range, the top 50 tracks and artists are available for each user. In the future, it is likely that this restriction will be relaxed. This data is typically updated once each day for each user.\r\n\r\n## Response Format\r\n  On success, the HTTP status code in the response header is 200 OK, the header status code is an error code and the response body contains an error object.\r\n\r\n\r\n## Artist\r\n  | KEY  |  VALUE TYPE |  VALUE DESCRIPTION |\r\n|---|---|---|\r\n| name  |  `string` |  The name of the artist |\r\n| popularity  | `int`  |  The popularity of the artist. The value will be between 0 and 100, with 100 being the most popular. The artist’s popularity is calculated from the popularity of all the artist’s tracks.|\r\n| type  | `string`  |  The object type: `\"artist\"`|\r\n| genres  | `array of strings`  |  A list of the genres the artist is associated with. For example: `\"Prog Rock\"` , `\"Post-Grunge\"`. (If not yet classified, the array is empty.)|\r\n| images  | `array of image objects`  | Images of the artist in various sizes, widest first.|\r\n| followers  | `A followers object`  |  The object type: `\"artist\"` |\r\n| href  | `string`  |  A link to the Web API endpoint providing full details of the artist.\r\n\r\n\r\n## Track\r\n\r\n| KEY               | VALUE TYPE                            | VALUE DESCRIPTION                                                                                                              |\r\n| ----------------- | ------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------ |\r\n| album             | `a simplified album object`             | The album on which the track appears. The album object includes a link in href to full information about the album.            |\r\n| artists           | `an array of simplified artist objects | The artists who performed the track. Each artist object includes a link in href to more detailed information about the artist.` |\r\n| available_markets | `array of strings`                      | A list of the countries in which the track can be played, identified by their ISO 3166-1 alpha-2 code.                         |\r\n| duration_ms       | `integer `                              | The track length in milliseconds.                                                                                              |\r\n| explicit          | `Boolean`                               | Whether or not the track has explicit lyrics ( true = yes it does; false = no it does not OR unknown).                         |\r\n| href              | `string`                                | A link to the Web API endpoint providing full details of the track.                                                            |\r\n| id                | `string`                                | The Symphonia ID for the track.                                                                                                |\r\n| name              | `string`                                | The name of the track.                                                                                                         |\r\n| popularity        | `integer`                              |                                                                                                                                |\r\n| track_number      | `integer`                               | The number of the track. If an album has several discs, the track number is the number on the specified disc.                  |\r\n| type              | `string`                                | The object type: “track”.                                                                                                      |\r\n\r\n\r\n\r\n## paging\r\n\r\n| KEY               | VALUE TYPE                            | VALUE DESCRIPTION                                                                                                              |\r\n| ----------------- | ------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------ |\r\n| href             | `string`            |\r\n| items           | `an array of objects` | The requested data. |\r\n| limit | `integer`                      | \tThe maximum number of items in the response (as set in the query or by default).                         |\r\n| next       | `string `                              | URL to the next page of items. ( null if none)                                                                                              |\r\n| previous          | `string`                               | \tURL to the previous page of items. ( null if none).                         |\r\n| total              | `integer`                                | The total number of items available to return. |\r\n                                                            \r\n                                                            \r\n\r\n## Request Parameters"
					},
					"response": []
				},
				{
					"name": "Get-History",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e97edb76-38b6-4d61-9b83-5fe84038e121",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}api/v1/me/recently-played",
							"host": [
								"{{URL}}api"
							],
							"path": [
								"v1",
								"me",
								"recently-played"
							],
							"query": [
								{
									"key": "limit",
									"value": "inetger",
									"disabled": true
								},
								{
									"key": "page",
									"value": "inetger",
									"disabled": true
								},
								{
									"key": "sort",
									"value": "sorting_field",
									"disabled": true
								},
								{
									"key": "filter",
									"value": "filter_feilds",
									"disabled": true
								}
							]
						},
						"description": "## Get user History \r\n Just get the history of the user in json format .\r\n\r\n## Response Format\r\n  On success, the HTTP status code in the response header is 200, the header status code is an error code and the response body contains an error object."
					},
					"response": [
						{
							"name": "Get-History",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/api/v1/me/recently-played",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"me",
										"recently-played"
									],
									"query": [
										{
											"key": "limit",
											"value": "inetger",
											"disabled": true
										},
										{
											"key": "page",
											"value": "inetger",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "sorting_field",
											"disabled": true
										},
										{
											"key": "filter",
											"value": "filter_feilds",
											"disabled": true
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "X-DNS-Prefetch-Control",
									"value": "off"
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=15552000; includeSubDomains"
								},
								{
									"key": "X-Download-Options",
									"value": "noopen"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-XSS-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "X-RateLimit-Limit",
									"value": "1000"
								},
								{
									"key": "X-RateLimit-Remaining",
									"value": "995"
								},
								{
									"key": "Date",
									"value": "Tue, 07 Apr 2020 14:42:10 GMT"
								},
								{
									"key": "X-RateLimit-Reset",
									"value": "1586274114"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "893"
								},
								{
									"key": "ETag",
									"value": "W/\"37d-Cj7G+3eeE/iikaJOwdspqFBjE+U\""
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"history\": {\n        \"_id\": \"5e8c8eff4baff454840d5495\",\n        \"items\": [\n            {\n                \"_id\": \"5e8c8eff4baff454840d5496\",\n                \"track\": \"5e7d2ddd3429e24340ff1397\",\n                \"played_at\": \"2020-04-07T14:32:31.044Z\",\n                \"context\": {\n                    \"collaborative\": false,\n                    \"images\": [\n                        \"https://zasymphonia.ddns.net/api/v1/images/playlists/playlist13.jpg\"\n                    ],\n                    \"public\": true,\n                    \"tracks\": [\n                        \"5e7d2dc03429e24340ff1396\",\n                        \"5e7d2ddd3429e24340ff1397\",\n                        \"5e7d2e023429e24340ff1398\"\n                    ],\n                    \"followers\": [],\n                    \"_id\": \"5e8a6d96d4be480ab1d91c95\",\n                    \"name\": \"Sleep Sounds: Waterscapes\",\n                    \"owner\": \"5e8125dc54660672fd69987f\",\n                    \"description\": \"White Noise to Drown Out the Sounds of Police Sirens, Honking Trucks, and Overnight Construction Work Because I Live Right Next to the Brooklyn-Queens Expressway Because This Is the Only Studio Apartment I Can Afford\",\n                    \"category\": \"5e8072e5e478cf39b47bd1ef\"\n                },\n                \"contextUrl\": \"https://zasymphonia.ddns.net/api/v1/playlists/5e8a6d96d4be480ab1d91c95/tracks\",\n                \"contextType\": \"playlist\"\n            },\n            {\n                \"_id\": \"5e8298c93c8b02a9402482bd\",\n                \"track\": \"5e7d2dc03429e24340ff1396\",\n                \"played_at\": \"2020-03-31T01:11:37.361Z\",\n                \"contextUrl\": \"https://zasymphonia.ddns.net/api/v1/playlists/5e8a6d96d4be480ab1d91c95/tracks\",\n                \"context\": {\n                    \"collaborative\": false,\n                    \"images\": [\n                        \"https://zasymphonia.ddns.net/api/v1/images/playlists/playlist13.jpg\"\n                    ],\n                    \"public\": true,\n                    \"tracks\": [\n                        \"5e7d2dc03429e24340ff1396\",\n                        \"5e7d2ddd3429e24340ff1397\",\n                        \"5e7d2e023429e24340ff1398\"\n                    ],\n                    \"followers\": [],\n                    \"_id\": \"5e8a6d96d4be480ab1d91c95\",\n                    \"name\": \"Sleep Sounds: Waterscapes\",\n                    \"owner\": \"5e8125dc54660672fd69987f\",\n                    \"description\": \"White Noise to Drown Out the Sounds of Police Sirens, Honking Trucks, and Overnight Construction Work Because I Live Right Next to the Brooklyn-Queens Expressway Because This Is the Only Studio Apartment I Can Afford\",\n                    \"category\": \"5e8072e5e478cf39b47bd1ef\"\n                },\n                \"contextType\": \"playlist\"\n            }\n        ]\n    }\n}"
						}
					]
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Player",
			"item": [
				{
					"name": "Put-Repeat",
					"request": {
						"method": "PATCH",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/api/v1/me/player/repeat",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"me",
								"player",
								"repeat"
							]
						},
						"description": "## Patch user queue to be repeated or not\r\n change the state of the user repeat queue .\r\n\r\n\r\n it toggle the repeat queue property when requested\r\n## Response Format\r\n  On success, the HTTP status code in the response header is 204 no content, the header status code is an error code and the response body contains an error object."
					},
					"response": []
				},
				{
					"name": "Put-Repeat-Once",
					"request": {
						"method": "PATCH",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/api/v1/me/player/repeatOnce",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"me",
								"player",
								"repeatOnce"
							]
						},
						"description": "## Patch user queue to be repeat a specific track or not.\r\n change the state of the user repeat Once queue .\r\n\r\n\r\n it toggle the repeat Once queue property when requested\r\n \r\n ## Response Format\r\n  On success, the HTTP status code in the response header is 204 no content, the header status code is an error code and the response body contains an error object."
					},
					"response": []
				},
				{
					"name": "Put-Shuffle",
					"request": {
						"method": "PATCH",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/api/v1/me/player/shuffle",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"me",
								"player",
								"shuffle"
							]
						},
						"description": "## Patch user queue to be shuffled or not\r\n change the state of the user shuffle queue .\r\n\r\n\r\n it toggle the shuffle queue property when requested\r\n \r\n ## Response Format\r\n  On success, the HTTP status code in the response header is 204 no content, the header status code is an error code and the response body contains an error object."
					},
					"response": []
				},
				{
					"name": "Put-Seek",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Range",
								"value": "bytes=1000000-1209000",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://localhost:3000/api/v1/me/player/seek",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"me",
								"player",
								"seek"
							]
						},
						"description": "## Patch user queue to save seek of current playing track\r\n   just save the seek\r\n\r\n ## Response Format\r\n  On success, the HTTP status code in the response header is 204 no content, the header status code is an error code and the response body contains an error object."
					},
					"response": []
				},
				{
					"name": "Go-Next-Track",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/api/v1/me/player/next",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"me",
								"player",
								"next"
							]
						},
						"description": "## Post user to next track in queue\r\n\r\n it put current and next and previous track in new postions and return all tracks when succes\r\n \r\n \r\n ## Response Format\r\n  On success, the HTTP status code in the response header is 200 OK, the header status code is an error code and the response body contains an error object.\r\n  \r\n## Track_url_in_Queue\r\n  | KEY  |  VALUE TYPE |  VALUE DESCRIPTION |\r\n|---|---|---|\r\n| data  |  Array of string |  The url of tracks in queue |"
					},
					"response": []
				},
				{
					"name": "Go-Previous-Track",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/api/v1/me/player/previous",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"me",
								"player",
								"previous"
							]
						},
						"description": "## Post user to previous track in queue\r\n\r\n it put current and next and previous track in new postions and return all tracks when succes\r\n \r\n ## Response Format\r\n  On success, the HTTP status code in the response header is 200 OK, the header status code is an error code and the response body contains an error object.\r\n  \r\n## Track_url_in_Queue\r\n  | KEY  |  VALUE TYPE |  VALUE DESCRIPTION |\r\n|---|---|---|\r\n| data  |  Array of string |  The url of tracks in queue |"
					},
					"response": []
				},
				{
					"name": "Play_Track",
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {},
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text",
								"disabled": true
							},
							{
								"key": "Range",
								"value": "bytes=800000-8016251",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"contextId\": \"1203809ufhadhf89\",\n\t\"context_type\": \"playlist\",\n\t\"context_url\": \"https://localhost:3000/\",\n\t\"device\": \"Chrome\"\n}",
							"options": {
								"raw": {
									"language": "javascript"
								}
							}
						},
						"url": {
							"raw": "{{URL}}api/v1/me/player/tracks/5e8a1e0f7937ec4d40c6deba",
							"host": [
								"{{URL}}api"
							],
							"path": [
								"v1",
								"me",
								"player",
								"tracks",
								"5e8a1e0f7937ec4d40c6deba"
							]
						},
						"description": "## Get user Track and Play it\r\n\r\n send the track in pakects to be played in partial content \r\n \r\n  \r\n## First Scenario\r\n  | KEY     \t|  VALUE TYPE       |  VALUE DESCRIPTION\t\t\t\t\t\t\t\t\t\t\t|\r\n  |-------------|-------------------|---------------------------------------------------------------|\r\n  | contextId   |  MongoDb ObjectId |  The Id of the context that you want to play that track from  |\r\n  | context_url |  String           |  The Url of the context that you want to play that track from |\r\n  | context_type|  String           |  The type of the context that you want to play that track from|\r\n  | device      |  String           |  The device name that the user use to play the track\t\t\t|\r\n  \r\n - This scenario when the user go to a playlist or almub and try to play a song in that context\r\n\r\n## Secnod Scenario\r\n  | KEY     \t|  VALUE TYPE       |  VALUE DESCRIPTION\t\t\t\t\t\t\t\t\t\t\t|\r\n  |-------------|-------------------|---------------------------------------------------------------|\r\n  | device      |  String           |  The device name that the user use to play the track\t\t\t|\r\n \r\n- This secario when the user use the add to queue feature\t\r\n\r\n## Response Format\r\n  On success, the HTTP status code in the response header is 200 OK or 206 Partial content, the header status code is an error code and the response body contains an error object."
					},
					"response": []
				},
				{
					"name": "Put-Volume",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"volume\": \"100\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/api/v1/me/player/volume",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"me",
								"player",
								"volume"
							]
						},
						"description": "## Patch user queue volume\r\n Just to save the volume progress  .\r\n\r\n## Response Format\r\n  On success, the HTTP status code in the response header is 204 no content, the header status code is an error code and the response body contains an error object."
					},
					"response": [
						{
							"name": "Put-Volume",
							"originalRequest": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"volume\": \"100\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/api/v1/me/player/volume",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"me",
										"player",
										"volume"
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "X-DNS-Prefetch-Control",
									"value": "off"
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=15552000; includeSubDomains"
								},
								{
									"key": "X-Download-Options",
									"value": "noopen"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-XSS-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "X-RateLimit-Limit",
									"value": "1000"
								},
								{
									"key": "X-RateLimit-Remaining",
									"value": "988"
								},
								{
									"key": "Date",
									"value": "Sun, 05 Apr 2020 14:10:24 GMT"
								},
								{
									"key": "X-RateLimit-Reset",
									"value": "1586097230"
								},
								{
									"key": "ETag",
									"value": "W/\"d-XXcxLjB/sjfS0AB6+CxvXcLGrm4\""
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Add-To-Queue",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"track\":\"http://localhost/api/vi/me/player/track/aiojsdfa19281h81h1d\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/me/player/queue",
							"host": [
								"{{URL}}"
							],
							"path": [
								"me",
								"player",
								"queue"
							]
						},
						"description": "## Post user queue to add Track \r\n Just add new Track to the user queue list when the user press add to queue  .\r\n\r\n## Response Format\r\n  On success, the HTTP status code in the response header is 200 OK, the header status code is an error code and the response body contains an error object."
					},
					"response": [
						{
							"name": "Add-To-Queue",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"track\":\"http://localhost/api/vi/me/player/track/aiojsdfa19281h81h1d\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/me/player/queue",
									"host": [
										"{{URL}}"
									],
									"path": [
										"me",
										"player",
										"queue"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "X-DNS-Prefetch-Control",
									"value": "off"
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=15552000; includeSubDomains"
								},
								{
									"key": "X-Download-Options",
									"value": "noopen"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-XSS-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "X-RateLimit-Limit",
									"value": "1000"
								},
								{
									"key": "X-RateLimit-Remaining",
									"value": "987"
								},
								{
									"key": "Date",
									"value": "Sun, 05 Apr 2020 14:12:12 GMT"
								},
								{
									"key": "X-RateLimit-Reset",
									"value": "1586097230"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "291"
								},
								{
									"key": "ETag",
									"value": "W/\"123-GPDS+NATQE9mrMG2f9P8PAxm7lc\""
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"data\": [\n        \"http://localhost:3000/api/v1/me/player/tracks/5e7d2dc03429e24340ff1396\",\n        \"http://localhost:3000/api/v1/me/player/tracks/5e7969965146d92e98ac3ef7\",\n        \"http://localhost:3000/api/v1/me/player/tracks/5e7969965146d92e98ac3ef4\",\n        \"http://localhost/api/vi/me/player/track/aiojsdfa19281h81h1d\"\n    ]\n}"
						}
					]
				},
				{
					"name": "Delete-from-Queue",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"removedTrack\": \"http://localhost/api/vi/me/player/track/aiojsdfa19281h81h1d\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/me/player/queue",
							"host": [
								"{{URL}}"
							],
							"path": [
								"me",
								"player",
								"queue"
							]
						},
						"description": "## Delete track from queue \r\n just remove track from the queue when the user press remove from queue  .\r\n\r\n## Response Format\r\n  On success, the HTTP status code in the response header is 204 no content, the header status code is an error code and the response body contains an error object."
					},
					"response": [
						{
							"name": "Delete-from-Queue",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"removedTrack\": \"http://localhost/api/vi/me/player/track/aiojsdfa19281h81h1d\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/me/player/queue",
									"host": [
										"{{URL}}"
									],
									"path": [
										"me",
										"player",
										"queue"
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "X-DNS-Prefetch-Control",
									"value": "off"
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=15552000; includeSubDomains"
								},
								{
									"key": "X-Download-Options",
									"value": "noopen"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-XSS-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "X-RateLimit-Limit",
									"value": "1000"
								},
								{
									"key": "X-RateLimit-Remaining",
									"value": "986"
								},
								{
									"key": "Date",
									"value": "Sun, 05 Apr 2020 14:13:26 GMT"
								},
								{
									"key": "X-RateLimit-Reset",
									"value": "1586097230"
								},
								{
									"key": "ETag",
									"value": "W/\"d-XXcxLjB/sjfS0AB6+CxvXcLGrm4\""
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Get-Queue",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}/me/player/queue?limit=inetger&page=inetger&sort=sorting_field&filter=filter_feilds",
							"host": [
								"{{URL}}"
							],
							"path": [
								"me",
								"player",
								"queue"
							],
							"query": [
								{
									"key": "limit",
									"value": "inetger"
								},
								{
									"key": "page",
									"value": "inetger"
								},
								{
									"key": "sort",
									"value": "sorting_field"
								},
								{
									"key": "filter",
									"value": "filter_feilds"
								}
							]
						},
						"description": "## Get user Queue \r\n Just get the Queue of the user in json format .\r\n\r\n\r\n## Response Format\r\n  On success, the HTTP status code in the response header is 200 OK , the header status code is an error code and the response body contains an error object."
					},
					"response": [
						{
							"name": "Get-Queue",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}/me/player/queue",
									"host": [
										"{{URL}}"
									],
									"path": [
										"me",
										"player",
										"queue"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "X-DNS-Prefetch-Control",
									"value": "off"
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=15552000; includeSubDomains"
								},
								{
									"key": "X-Download-Options",
									"value": "noopen"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-XSS-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "X-RateLimit-Limit",
									"value": "1000"
								},
								{
									"key": "X-RateLimit-Remaining",
									"value": "982"
								},
								{
									"key": "Date",
									"value": "Sun, 05 Apr 2020 14:15:47 GMT"
								},
								{
									"key": "X-RateLimit-Reset",
									"value": "1586097230"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "ETag",
									"value": "W/\"50c-/OchOerOEvTs3BkGr4F3kJJ67IQ\""
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								}
							],
							"cookie": [],
							"body": "{\n    \"data\": {\n        \"currentlyPlaying\": {\n            \"currentTrack\": \"http://localhost:3000/api/v1/me/player/tracks/5e7d2dc03429e24340ff1396\",\n            \"device\": \"5e88ef4d54142e3db4d01ee5\"\n        },\n        \"queueTracks\": [\n            \"http://localhost:3000/api/v1/me/player/tracks/5e7d2dc03429e24340ff1396\",\n            \"http://localhost:3000/api/v1/me/player/tracks/5e7969965146d92e98ac3ef7\",\n            \"http://localhost:3000/api/v1/me/player/tracks/5e7969965146d92e98ac3ef4\"\n        ],\n        \"previousTrack\": null,\n        \"repeat\": false,\n        \"shuffle\": false,\n        \"play\": false,\n        \"repeatOnce\": false,\n        \"devices\": [\n            {\n                \"_id\": \"5e88eea554142e3db4d01edb\",\n                \"devicesName\": \"Chrome\"\n            },\n            {\n                \"_id\": \"5e88eee7d56ea252c38609f9\",\n                \"devicesName\": \"Chrome\"\n            },\n            {\n                \"_id\": \"5e88eef254142e3db4d01edf\",\n                \"devicesName\": \"Chrome\"\n            },\n            {\n                \"_id\": \"5e88ef4d54142e3db4d01ee5\",\n                \"devicesName\": \"Chrome\"\n            },\n            {\n                \"_id\": \"5e89e659a879619b50cb8c4c\",\n                \"devicesName\": \"Safari\"\n            }\n        ],\n        \"nextTrack\": \"http://localhost:3000/api/v1/me/player/tracks/5e7969965146d92e98ac3ef7\",\n        \"seek\": \"bytes=1000000-1209000\",\n        \"volume\": \"100\"\n    }\n}"
						}
					]
				},
				{
					"name": "Get-Currently-Playing",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}/me/player/currently-playing",
							"host": [
								"{{URL}}"
							],
							"path": [
								"me",
								"player",
								"currently-playing"
							]
						},
						"description": "## Get Currently Playing object from user queue \r\n Just reurn the Currently Playing Object the contain the track_Url and the device currently playing it  .\r\n\r\n## Response Format\r\n  On success, the HTTP status code in the response header is 200 OK, the header status code is an error code and the response body contains an error object."
					},
					"response": [
						{
							"name": "Get-Currently-Playing",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}/me/player/currently-playing",
									"host": [
										"{{URL}}"
									],
									"path": [
										"me",
										"player",
										"currently-playing"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "X-DNS-Prefetch-Control",
									"value": "off"
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=15552000; includeSubDomains"
								},
								{
									"key": "X-Download-Options",
									"value": "noopen"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-XSS-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "X-RateLimit-Limit",
									"value": "1000"
								},
								{
									"key": "X-RateLimit-Remaining",
									"value": "983"
								},
								{
									"key": "Date",
									"value": "Sun, 05 Apr 2020 14:15:02 GMT"
								},
								{
									"key": "X-RateLimit-Reset",
									"value": "1586097230"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "134"
								},
								{
									"key": "ETag",
									"value": "W/\"86-D/1MB152MiSONkq0Ycv2iTxlgvM\""
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"data\": {\n        \"currentTrack\": \"http://localhost:3000/api/v1/me/player/tracks/5e7d2dc03429e24340ff1396\",\n        \"device\": \"5e88ef4d54142e3db4d01ee5\"\n    }\n}"
						}
					]
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Playlists",
			"item": [
				{
					"name": "Get a Playlist",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}api/v1/playlists/5e875bd6ba6ebe663fdbb2c0",
							"host": [
								"{{URL}}api"
							],
							"path": [
								"v1",
								"playlists",
								"5e875bd6ba6ebe663fdbb2c0"
							]
						}
					},
					"response": [
						{
							"name": "Get a Playlist",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}api/v1/playlists/5e875bd6ba6ebe663fdbb2c0",
									"host": [
										"{{URL}}api"
									],
									"path": [
										"v1",
										"playlists",
										"5e875bd6ba6ebe663fdbb2c0"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "X-DNS-Prefetch-Control",
									"value": "off"
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=15552000; includeSubDomains"
								},
								{
									"key": "X-Download-Options",
									"value": "noopen"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-XSS-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "490"
								},
								{
									"key": "ETag",
									"value": "W/\"1ea-Ds2B1TyW+0X/6TgCcF1dxHPNAvk\""
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding"
								},
								{
									"key": "Date",
									"value": "Tue, 07 Apr 2020 21:06:09 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"collaborative\": false,\n        \"images\": [\n            \"https://zasymphonia.ddns.net/api/v1/images/playlists/playlist9.jpg\"\n        ],\n        \"public\": true,\n        \"tracks\": [\n            \"5e8a39f24e11cd46c8bde654\"\n        ],\n        \"followers\": [],\n        \"_id\": \"5e875bd6ba6ebe663fdbb2c0\",\n        \"name\": \"Songs for Coping with Loss\",\n        \"owner\": \"5e812db054660672fd699881\",\n        \"description\": \"Songs for Coping with the Loss of My Debit Card, My Mailbox Key, and My Bike, Which I Tipsily Locked up Somewhere Two Weeks Ago\",\n        \"category\": \"5e883e48c808fd1aa40ad1f8\",\n        \"id\": \"5e875bd6ba6ebe663fdbb2c0\"\n    }\n]"
						}
					]
				},
				{
					"name": "get a Playlist Cover Image",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}api/v1/playlists/5e875bd6ba6ebe663fdbb2c0/images",
							"host": [
								"{{URL}}api"
							],
							"path": [
								"v1",
								"playlists",
								"5e875bd6ba6ebe663fdbb2c0",
								"images"
							]
						}
					},
					"response": [
						{
							"name": "get a Playlist Cover Image",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}api/v1/playlists/5e875bd6ba6ebe663fdbb2c0/images",
									"host": [
										"{{URL}}api"
									],
									"path": [
										"v1",
										"playlists",
										"5e875bd6ba6ebe663fdbb2c0",
										"images"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "X-DNS-Prefetch-Control",
									"value": "off"
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=15552000; includeSubDomains"
								},
								{
									"key": "X-Download-Options",
									"value": "noopen"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-XSS-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "70"
								},
								{
									"key": "ETag",
									"value": "W/\"46-+FJzDUYgv4PiShyobUlabn1mk4g\""
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding"
								},
								{
									"key": "Date",
									"value": "Tue, 07 Apr 2020 21:06:54 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "[\n    \"https://zasymphonia.ddns.net/api/v1/images/playlists/playlist9.jpg\"\n]"
						}
					]
				},
				{
					"name": "Get a Playlist's Tracks",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}api/v1/playlists/5e875bd6ba6ebe663fdbb2c0/tracks",
							"host": [
								"{{URL}}api"
							],
							"path": [
								"v1",
								"playlists",
								"5e875bd6ba6ebe663fdbb2c0",
								"tracks"
							]
						}
					},
					"response": [
						{
							"name": "Get a Playlist's Tracks",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}api/v1/playlists/5e875bd6ba6ebe663fdbb2c0/tracks",
									"host": [
										"{{URL}}api"
									],
									"path": [
										"v1",
										"playlists",
										"5e875bd6ba6ebe663fdbb2c0",
										"tracks"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "X-DNS-Prefetch-Control",
									"value": "off"
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=15552000; includeSubDomains"
								},
								{
									"key": "X-Download-Options",
									"value": "noopen"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-XSS-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "576"
								},
								{
									"key": "ETag",
									"value": "W/\"240-FbIqpF/MuYHjj6zxlW/jHipwgFE\""
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding"
								},
								{
									"key": "Date",
									"value": "Tue, 07 Apr 2020 21:08:16 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"tracks\": [\n            {\n                \"category\": [\n                    \"5e883e48c808fd1aa40ad1f8\"\n                ],\n                \"explicit\": true,\n                \"_id\": \"5e8a39f24e11cd46c8bde654\",\n                \"album\": {\n                    \"tracks\": [\n                        \"5e8a1ea07937ec4d40c6debf\",\n                        \"5e8a37d0d56ea252c3860a1a\",\n                        \"5e8a39f24e11cd46c8bde654\"\n                    ],\n                    \"releaseDate\": \"2020-04-07T21:01:43.290Z\",\n                    \"_id\": \"5e89f33375bcc40cc4b5a736\",\n                    \"name\": \"TRST\",\n                    \"year\": 2012,\n                    \"image\": \"https://zasymphonia.ddns.net/api/v1/images/albums/TRST.jpg\",\n                    \"artist\": \"5e8b6d866253cb184eaac150\"\n                },\n                \"name\": \"Sulk\",\n                \"durationMs\": 30000,\n                \"artist\": null,\n                \"trackPath\": \"assets/tracks/Sulk.mp3\",\n                \"type\": \"track\"\n            }\n        ],\n        \"_id\": \"5e875bd6ba6ebe663fdbb2c0\",\n        \"id\": \"5e875bd6ba6ebe663fdbb2c0\"\n    }\n]"
						}
					]
				},
				{
					"name": "Add Tracks to Playlist",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjVlODhlNmY1Y2NjOTRkNGM1Yzc2ZTgwZCIsImlhdCI6MTU4NjExMDU1NCwiZXhwIjoxNTg2MTE0MTU0fQ.XX_aHR63Nxu1l4C_MPfqa8f8wqoZonNbUrp8vplpbKs",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"tracks\":[\"5e7d2dc03429e24340ff1396\",\"5e7969965146d92e98ac3ef4\"]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/v1/playlists/5e805a8a3711912168602afa/tracks",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"v1",
								"playlists",
								"5e805a8a3711912168602afa",
								"tracks"
							]
						}
					},
					"response": [
						{
							"name": "Add Tracks to Playlist",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"tracks\":[\"5e7d2dc03429e24340ff1396\",\"5e7969965146d92e98ac3ef4\"]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/api/v1/playlists/5e805a8a3711912168602afa/tracks",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"playlists",
										"5e805a8a3711912168602afa",
										"tracks"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "X-DNS-Prefetch-Control",
									"value": "off"
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=15552000; includeSubDomains"
								},
								{
									"key": "X-Download-Options",
									"value": "noopen"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-XSS-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "X-RateLimit-Limit",
									"value": "1000"
								},
								{
									"key": "X-RateLimit-Remaining",
									"value": "999"
								},
								{
									"key": "Date",
									"value": "Sun, 05 Apr 2020 18:23:31 GMT"
								},
								{
									"key": "X-RateLimit-Reset",
									"value": "1586114473"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "313"
								},
								{
									"key": "ETag",
									"value": "W/\"139-RhTNblOBOBk3eCUua/6A5iOJLJg\""
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"collaborative\": true,\n    \"images\": [],\n    \"public\": true,\n    \"tracks\": [\n        \"5e7969965146d92e98ac3ef7\",\n        \"5e7d2dc03429e24340ff1396\",\n        \"5e7969965146d92e98ac3ef4\"\n    ],\n    \"followers\": [],\n    \"_id\": \"5e805a8a3711912168602afa\",\n    \"name\": \"toto_pl\",\n    \"description\": \"it is not my fav\",\n    \"owner\": \"5e7f768ddb66b448b4356322\",\n    \"__v\": 0,\n    \"id\": \"5e805a8a3711912168602afa\"\n}"
						}
					]
				},
				{
					"name": "Remove playlist Tracks",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjVlODhlNmY1Y2NjOTRkNGM1Yzc2ZTgwZCIsImlhdCI6MTU4NjExMTUxMCwiZXhwIjoxNTg2MTE1MTEwfQ.OWVv3wsLgTRwcoISXhLdEYpHWPiuU4yZ0lpbhRw2Cl4",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{URL}}/api/v1/playlists/5e805a8a3711912168602afa/tracks",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"v1",
								"playlists",
								"5e805a8a3711912168602afa",
								"tracks"
							]
						}
					},
					"response": [
						{
							"name": "Remove playlist Tracks",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/api/v1/playlists/5e805a8a3711912168602afa/tracks",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"playlists",
										"5e805a8a3711912168602afa",
										"tracks"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "X-DNS-Prefetch-Control",
									"value": "off"
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=15552000; includeSubDomains"
								},
								{
									"key": "X-Download-Options",
									"value": "noopen"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-XSS-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "X-RateLimit-Limit",
									"value": "1000"
								},
								{
									"key": "X-RateLimit-Remaining",
									"value": "996"
								},
								{
									"key": "Date",
									"value": "Sun, 05 Apr 2020 18:32:16 GMT"
								},
								{
									"key": "X-RateLimit-Reset",
									"value": "1586114473"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "286"
								},
								{
									"key": "ETag",
									"value": "W/\"11e-/wpAfdU8i8q2iMebw8vySEmTNoM\""
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"n\": 1,\n    \"nModified\": 1,\n    \"opTime\": {\n        \"ts\": \"6812297170633359361\",\n        \"t\": 11\n    },\n    \"electionId\": \"7fffffff000000000000000b\",\n    \"ok\": 1,\n    \"$clusterTime\": {\n        \"clusterTime\": \"6812297170633359361\",\n        \"signature\": {\n            \"hash\": \"K24ufZTWLn86IdP5faQYRkUWY2A=\",\n            \"keyId\": \"6797575444376846339\"\n        }\n    },\n    \"operationTime\": \"6812297170633359361\"\n}"
						}
					]
				},
				{
					"name": "Change Playlist Details",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjVlODhlNmY1Y2NjOTRkNGM1Yzc2ZTgwZCIsImlhdCI6MTU4NjExMTUxMCwiZXhwIjoxNTg2MTE1MTEwfQ.OWVv3wsLgTRwcoISXhLdEYpHWPiuU4yZ0lpbhRw2Cl4",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\":\"FavPlaylist\",\n\t\"description\":\"Its my favourite playlist\",\n\t\"public\":\"true\",\n\t\"collaborative\":\"true\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/v1/playlists/5e8917da5722242260b8b36a",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"v1",
								"playlists",
								"5e8917da5722242260b8b36a"
							]
						}
					},
					"response": [
						{
							"name": "Change Playlist Details",
							"originalRequest": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\":\"FavPlaylist\",\n\t\"description\":\"Its my favourite playlist\",\n\t\"public\":\"true\",\n\t\"collaborative\":\"true\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/api/v1/playlists/5e8917da5722242260b8b36a",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"playlists",
										"5e8917da5722242260b8b36a"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "X-DNS-Prefetch-Control",
									"value": "off"
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=15552000; includeSubDomains"
								},
								{
									"key": "X-Download-Options",
									"value": "noopen"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-XSS-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "X-RateLimit-Limit",
									"value": "1000"
								},
								{
									"key": "X-RateLimit-Remaining",
									"value": "999"
								},
								{
									"key": "Date",
									"value": "Sun, 05 Apr 2020 18:42:12 GMT"
								},
								{
									"key": "X-RateLimit-Reset",
									"value": "1586115671"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "246"
								},
								{
									"key": "ETag",
									"value": "W/\"f6-jYjUwD4zkv6RCogrfKXiqPj7P6A\""
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"collaborative\": true,\n    \"images\": [],\n    \"public\": true,\n    \"tracks\": [],\n    \"followers\": [],\n    \"_id\": \"5e8917da5722242260b8b36a\",\n    \"name\": \"FavPlaylist\",\n    \"owner\": \"5e88e6f5ccc94d4c5c76e80d\",\n    \"__v\": 0,\n    \"description\": \"Its my favourite playlist\",\n    \"id\": \"5e8917da5722242260b8b36a\"\n}"
						}
					]
				},
				{
					"name": "Replace Playlist Tracks",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjVlODhlNmY1Y2NjOTRkNGM1Yzc2ZTgwZCIsImlhdCI6MTU4NjExMjczMiwiZXhwIjoxNTg2MTE2MzMyfQ.s12aAkZsLh_lZAY0FiOnTZJo7aEpqPNnBGTeWlHeJx0",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"tracks\":[\"5e7d2dc03429e24340ff1396\",\"5e7969965146d92e98ac3ef7\"]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/v1/playlists/5e8917da5722242260b8b36a/tracks",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"v1",
								"playlists",
								"5e8917da5722242260b8b36a",
								"tracks"
							]
						}
					},
					"response": [
						{
							"name": "Replace Playlist Tracks",
							"originalRequest": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"tracks\":[\"5e7d2dc03429e24340ff1396\",\"5e7969965146d92e98ac3ef7\"]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/api/v1/playlists/5e8917da5722242260b8b36a/tracks",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"playlists",
										"5e8917da5722242260b8b36a",
										"tracks"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "X-DNS-Prefetch-Control",
									"value": "off"
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=15552000; includeSubDomains"
								},
								{
									"key": "X-Download-Options",
									"value": "noopen"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-XSS-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "X-RateLimit-Limit",
									"value": "1000"
								},
								{
									"key": "X-RateLimit-Remaining",
									"value": "999"
								},
								{
									"key": "Date",
									"value": "Sun, 05 Apr 2020 18:55:20 GMT"
								},
								{
									"key": "X-RateLimit-Reset",
									"value": "1586116518"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "299"
								},
								{
									"key": "ETag",
									"value": "W/\"12b-PAKLHgVDsOxKSoItqqtESzXmV1M\""
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"collaborative\": true,\n    \"images\": [],\n    \"public\": true,\n    \"tracks\": [\n        \"5e7d2dc03429e24340ff1396\",\n        \"5e7969965146d92e98ac3ef7\"\n    ],\n    \"followers\": [],\n    \"_id\": \"5e8917da5722242260b8b36a\",\n    \"name\": \"FavPlaylist\",\n    \"owner\": \"5e88e6f5ccc94d4c5c76e80d\",\n    \"__v\": 0,\n    \"description\": \"Its my favourite playlist\",\n    \"id\": \"5e8917da5722242260b8b36a\"\n}"
						}
					]
				},
				{
					"name": "Upload Custom Playlist Cover Image",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjVlODhlNmY1Y2NjOTRkNGM1Yzc2ZTgwZCIsImlhdCI6MTU4NjExMzM5OSwiZXhwIjoxNTg2MTE2OTk5fQ.qEMJ6LjDJfbZe4_UaNNXhM5gv8HD_GKlyUQbPkan3P8",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"images\":\"The Image URL\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/v1/playlists/5e8917da5722242260b8b36a/images",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"v1",
								"playlists",
								"5e8917da5722242260b8b36a",
								"images"
							]
						}
					},
					"response": [
						{
							"name": "Upload Custom Playlist Cover Image",
							"originalRequest": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"images\":\"The Image URL\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/api/v1/playlists/5e8917da5722242260b8b36a/images",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"playlists",
										"5e8917da5722242260b8b36a",
										"images"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "X-DNS-Prefetch-Control",
									"value": "off"
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=15552000; includeSubDomains"
								},
								{
									"key": "X-Download-Options",
									"value": "noopen"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-XSS-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "X-RateLimit-Limit",
									"value": "1000"
								},
								{
									"key": "X-RateLimit-Remaining",
									"value": "999"
								},
								{
									"key": "Date",
									"value": "Sun, 05 Apr 2020 19:06:28 GMT"
								},
								{
									"key": "X-RateLimit-Reset",
									"value": "1586117117"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "314"
								},
								{
									"key": "ETag",
									"value": "W/\"13a-V/obAenUscgOuKRhoLskznoNoYM\""
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"collaborative\": true,\n    \"images\": [\n        \"The Image URL\"\n    ],\n    \"public\": true,\n    \"tracks\": [\n        \"5e7d2dc03429e24340ff1396\",\n        \"5e7969965146d92e98ac3ef7\"\n    ],\n    \"followers\": [],\n    \"_id\": \"5e8917da5722242260b8b36a\",\n    \"name\": \"FavPlaylist\",\n    \"owner\": \"5e88e6f5ccc94d4c5c76e80d\",\n    \"__v\": 0,\n    \"description\": \"Its my favourite playlist\",\n    \"id\": \"5e8917da5722242260b8b36a\"\n}"
						}
					]
				},
				{
					"name": "Get a List of a User's Playlists",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}api/v1/users/5e8125dc54660672fd69987f/playlists",
							"host": [
								"{{URL}}api"
							],
							"path": [
								"v1",
								"users",
								"5e8125dc54660672fd69987f",
								"playlists"
							]
						}
					},
					"response": [
						{
							"name": "Get a List of a User's Playlists",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}api/v1/users/5e8125dc54660672fd69987f/playlists",
									"host": [
										"{{URL}}api"
									],
									"path": [
										"v1",
										"users",
										"5e8125dc54660672fd69987f",
										"playlists"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "X-DNS-Prefetch-Control",
									"value": "off"
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=15552000; includeSubDomains"
								},
								{
									"key": "X-Download-Options",
									"value": "noopen"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-XSS-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "ETag",
									"value": "W/\"aef-hB3x/31lIvONUuDzsf9nOaiAwG8\""
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip"
								},
								{
									"key": "Date",
									"value": "Tue, 07 Apr 2020 21:10:43 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"collaborative\": false,\n        \"images\": [\n            \"https://zasymphonia.ddns.net/api/v1/images/playlists/playlist1.jpg\"\n        ],\n        \"public\": true,\n        \"tracks\": [\n            \"5e7d2dc03429e24340ff1396\",\n            \"5e8a1e767937ec4d40c6debc\",\n            \"5e8a1e9a7937ec4d40c6debe\"\n        ],\n        \"followers\": [\n            \"5e812db054660672fd699881\",\n            \"5e812a3454660672fd699880\"\n        ],\n        \"_id\": \"5e7969965146d92e98ac3ef7\",\n        \"name\": \"Songs to Sing in the Shower\",\n        \"owner\": \"5e8125dc54660672fd69987f\",\n        \"description\": \"My Favorite Public Place to Pretend is My Living Room Mix\",\n        \"category\": \"5e883e48c808fd1aa40ad1f8\",\n        \"id\": \"5e7969965146d92e98ac3ef7\"\n    },\n    {\n        \"collaborative\": false,\n        \"images\": [\n            \"https://zasymphonia.ddns.net/api/v1/images/playlists/playlist2.jpg\"\n        ],\n        \"public\": true,\n        \"tracks\": [\n            \"5e7d2ddd3429e24340ff1397\",\n            \"5e7d2e023429e24340ff1398\",\n            \"5e7d334860cd930408a5f995\",\n            \"5e8a1e0f7937ec4d40c6deba\"\n        ],\n        \"followers\": [\n            \"5e812db054660672fd699881\",\n            \"5e812a3454660672fd699880\"\n        ],\n        \"_id\": \"5e7ac3c7d43a2c49909c549c\",\n        \"name\": \"Young, Wild and Free\",\n        \"owner\": \"5e8125dc54660672fd69987f\",\n        \"description\": \"Soundtrack to My Whimsical, Quirky Life as an Unpaid Intern\",\n        \"category\": \"5e883e48c808fd1aa40ad1f8\",\n        \"id\": \"5e7ac3c7d43a2c49909c549c\"\n    },\n    {\n        \"collaborative\": true,\n        \"images\": [\n            \"https://zasymphonia.ddns.net/api/v1/images/playlists/playlist3.jpg\"\n        ],\n        \"public\": true,\n        \"tracks\": [\n            \"5e8a1ea07937ec4d40c6debf\"\n        ],\n        \"followers\": [\n            \"5e812db054660672fd699881\",\n            \"5e812a3454660672fd699880\"\n        ],\n        \"_id\": \"5e805a8a3711912168602afa\",\n        \"name\": \"Soak Up the Sun\",\n        \"owner\": \"5e8125dc54660672fd69987f\",\n        \"description\": \"My Parents Pay for my Premium Account, My Rent, and Literally Everything Else\",\n        \"category\": \"5e8076e6a9902a4328cc285c\",\n        \"id\": \"5e805a8a3711912168602afa\"\n    },\n    {\n        \"collaborative\": false,\n        \"images\": [\n            \"https://zasymphonia.ddns.net/api/v1/images/playlists/playlist10.jpg\"\n        ],\n        \"public\": true,\n        \"tracks\": [\n            \"5e8a39f24e11cd46c8bde654\",\n            \"5e8a37d0d56ea252c3860a1a\",\n            \"5e8a1ea07937ec4d40c6debf\",\n            \"5e8a1e9a7937ec4d40c6debe\",\n            \"5e8a1e937937ec4d40c6debd\",\n            \"5e8a1e767937ec4d40c6debc\",\n            \"5e8a1e727937ec4d40c6debb\"\n        ],\n        \"followers\": [\n            \"5e812db054660672fd699881\"\n        ],\n        \"_id\": \"5e875c15ba6ebe663fdbb2c1\",\n        \"name\": \"All the Feels\",\n        \"owner\": \"5e8125dc54660672fd69987f\",\n        \"description\": \"I Just Double Texted and Now I Totally Get What Joan Didion Went Through\",\n        \"category\": \"5e8072e5e478cf39b47bd1ef\",\n        \"id\": \"5e875c15ba6ebe663fdbb2c1\"\n    },\n    {\n        \"collaborative\": false,\n        \"images\": [\n            \"https://zasymphonia.ddns.net/api/v1/images/playlists/playlist13.jpg\"\n        ],\n        \"public\": true,\n        \"tracks\": [\n            \"5e7d2dc03429e24340ff1396\",\n            \"5e7d2ddd3429e24340ff1397\",\n            \"5e7d2e023429e24340ff1398\"\n        ],\n        \"followers\": [],\n        \"_id\": \"5e8a6d96d4be480ab1d91c95\",\n        \"name\": \"Sleep Sounds: Waterscapes\",\n        \"owner\": \"5e8125dc54660672fd69987f\",\n        \"description\": \"White Noise to Drown Out the Sounds of Police Sirens, Honking Trucks, and Overnight Construction Work Because I Live Right Next to the Brooklyn-Queens Expressway Because This Is the Only Studio Apartment I Can Afford\",\n        \"category\": \"5e8072e5e478cf39b47bd1ef\",\n        \"id\": \"5e8a6d96d4be480ab1d91c95\"\n    }\n]"
						}
					]
				},
				{
					"name": "Get Current User Playlists",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}api/v1/me/playlists",
							"host": [
								"{{URL}}api"
							],
							"path": [
								"v1",
								"me",
								"playlists"
							]
						}
					},
					"response": [
						{
							"name": "Get Current User Playlists",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}api/v1/me/playlists",
									"host": [
										"{{URL}}api"
									],
									"path": [
										"v1",
										"me",
										"playlists"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "X-DNS-Prefetch-Control",
									"value": "off"
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=15552000; includeSubDomains"
								},
								{
									"key": "X-Download-Options",
									"value": "noopen"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-XSS-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "ETag",
									"value": "W/\"8ab-TkaAqiZ2H8R/V4s2ZUQl4GJ750I\""
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip"
								},
								{
									"key": "Date",
									"value": "Tue, 07 Apr 2020 21:10:57 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								}
							],
							"cookie": [],
							"body": "{\n    \"ownedPlaylists\": [\n        {\n            \"collaborative\": false,\n            \"images\": [\n                \"https://zasymphonia.ddns.net/api/v1/images/playlists/playlist1.jpg\"\n            ],\n            \"public\": true,\n            \"tracks\": [\n                \"5e7d2dc03429e24340ff1396\",\n                \"5e8a1e767937ec4d40c6debc\",\n                \"5e8a1e9a7937ec4d40c6debe\"\n            ],\n            \"followers\": [\n                \"5e812db054660672fd699881\",\n                \"5e812a3454660672fd699880\"\n            ],\n            \"_id\": \"5e7969965146d92e98ac3ef7\",\n            \"name\": \"Songs to Sing in the Shower\",\n            \"owner\": \"5e8125dc54660672fd69987f\",\n            \"description\": \"My Favorite Public Place to Pretend is My Living Room Mix\",\n            \"category\": \"5e883e48c808fd1aa40ad1f8\",\n            \"id\": \"5e7969965146d92e98ac3ef7\"\n        },\n        {\n            \"collaborative\": false,\n            \"images\": [\n                \"https://zasymphonia.ddns.net/api/v1/images/playlists/playlist2.jpg\"\n            ],\n            \"public\": true,\n            \"tracks\": [\n                \"5e7d2ddd3429e24340ff1397\",\n                \"5e7d2e023429e24340ff1398\",\n                \"5e7d334860cd930408a5f995\",\n                \"5e8a1e0f7937ec4d40c6deba\"\n            ],\n            \"followers\": [\n                \"5e812db054660672fd699881\",\n                \"5e812a3454660672fd699880\"\n            ],\n            \"_id\": \"5e7ac3c7d43a2c49909c549c\",\n            \"name\": \"Young, Wild and Free\",\n            \"owner\": \"5e8125dc54660672fd69987f\",\n            \"description\": \"Soundtrack to My Whimsical, Quirky Life as an Unpaid Intern\",\n            \"category\": \"5e883e48c808fd1aa40ad1f8\",\n            \"id\": \"5e7ac3c7d43a2c49909c549c\"\n        },\n        {\n            \"collaborative\": true,\n            \"images\": [\n                \"https://zasymphonia.ddns.net/api/v1/images/playlists/playlist3.jpg\"\n            ],\n            \"public\": true,\n            \"tracks\": [\n                \"5e8a1ea07937ec4d40c6debf\"\n            ],\n            \"followers\": [\n                \"5e812db054660672fd699881\",\n                \"5e812a3454660672fd699880\"\n            ],\n            \"_id\": \"5e805a8a3711912168602afa\",\n            \"name\": \"Soak Up the Sun\",\n            \"owner\": \"5e8125dc54660672fd69987f\",\n            \"description\": \"My Parents Pay for my Premium Account, My Rent, and Literally Everything Else\",\n            \"category\": \"5e8076e6a9902a4328cc285c\",\n            \"id\": \"5e805a8a3711912168602afa\"\n        },\n        {\n            \"collaborative\": false,\n            \"images\": [\n                \"https://zasymphonia.ddns.net/api/v1/images/playlists/playlist10.jpg\"\n            ],\n            \"public\": true,\n            \"tracks\": [\n                \"5e8a39f24e11cd46c8bde654\",\n                \"5e8a37d0d56ea252c3860a1a\",\n                \"5e8a1ea07937ec4d40c6debf\",\n                \"5e8a1e9a7937ec4d40c6debe\",\n                \"5e8a1e937937ec4d40c6debd\",\n                \"5e8a1e767937ec4d40c6debc\",\n                \"5e8a1e727937ec4d40c6debb\"\n            ],\n            \"followers\": [\n                \"5e812db054660672fd699881\"\n            ],\n            \"_id\": \"5e875c15ba6ebe663fdbb2c1\",\n            \"name\": \"All the Feels\",\n            \"owner\": \"5e8125dc54660672fd69987f\",\n            \"description\": \"I Just Double Texted and Now I Totally Get What Joan Didion Went Through\",\n            \"category\": \"5e8072e5e478cf39b47bd1ef\",\n            \"id\": \"5e875c15ba6ebe663fdbb2c1\"\n        }\n    ],\n    \"_id\": \"5e8125dc54660672fd69987f\"\n}"
						}
					]
				},
				{
					"name": "Create Playlist",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjVlODhlNmY1Y2NjOTRkNGM1Yzc2ZTgwZCIsImlhdCI6MTU4NjEyMTk0MCwiZXhwIjoxNTg2MTI1NTQwfQ.utnuUEB0E_mIjaQCWIVWLGTxdohoObD8omW4CMCGeuQ",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"collaborative\": false,\n    \"public\": true,\n    \"name\": \"ppllay\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/v1/users/5e88e6f5ccc94d4c5c76e80d/playlists",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								"5e88e6f5ccc94d4c5c76e80d",
								"playlists"
							]
						}
					},
					"response": [
						{
							"name": "Create Playlist",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"collaborative\": false,\n    \"public\": true,\n    \"name\": \"ppllay\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/api/v1/users/5e88e6f5ccc94d4c5c76e80d/playlists",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"users",
										"5e88e6f5ccc94d4c5c76e80d",
										"playlists"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "X-DNS-Prefetch-Control",
									"value": "off"
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=15552000; includeSubDomains"
								},
								{
									"key": "X-Download-Options",
									"value": "noopen"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-XSS-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "X-RateLimit-Limit",
									"value": "1000"
								},
								{
									"key": "X-RateLimit-Remaining",
									"value": "998"
								},
								{
									"key": "Date",
									"value": "Sun, 05 Apr 2020 21:35:29 GMT"
								},
								{
									"key": "X-RateLimit-Reset",
									"value": "1586125909"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "200"
								},
								{
									"key": "ETag",
									"value": "W/\"c8-BXKcQ286Ixo+7SLSKItBvCmX0hM\""
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"collaborative\": false,\n    \"images\": [],\n    \"public\": true,\n    \"tracks\": [],\n    \"followers\": [],\n    \"_id\": \"5e8a4f22601d0d3b4c0da1f9\",\n    \"name\": \"ppllay\",\n    \"owner\": \"5e88e6f5ccc94d4c5c76e80d\",\n    \"__v\": 0,\n    \"id\": \"5e8a4f22601d0d3b4c0da1f9\"\n}"
						}
					]
				},
				{
					"name": "Get Random Playlists",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjVlODhlNmY1Y2NjOTRkNGM1Yzc2ZTgwZCIsImlhdCI6MTU4NjE4MjM4OCwiZXhwIjoxNTg2MTg1OTg4fQ.qKLR7DcVrh1cs4NA2vfRE1ELA8YKjuQGN2gzyweStvc",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"tracks\":[\"5e7d2dc03429e24340ff1396\",\"5e7d2e023429e24340ff1398\"]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}api/v1/playlists/rand?number=5",
							"host": [
								"{{URL}}api"
							],
							"path": [
								"v1",
								"playlists",
								"rand"
							],
							"query": [
								{
									"key": "number",
									"value": "5"
								}
							]
						}
					},
					"response": [
						{
							"name": "Get Random Playlists",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"tracks\":[\"5e7d2dc03429e24340ff1396\",\"5e7d2e023429e24340ff1398\"]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}api/v1/playlists/rand?number=5",
									"host": [
										"{{URL}}api"
									],
									"path": [
										"v1",
										"playlists",
										"rand"
									],
									"query": [
										{
											"key": "number",
											"value": "5"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "X-DNS-Prefetch-Control",
									"value": "off"
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=15552000; includeSubDomains"
								},
								{
									"key": "X-Download-Options",
									"value": "noopen"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-XSS-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "ETag",
									"value": "W/\"9c3-W+Wns07KvJyrTNjXEVYY471xfHo\""
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip"
								},
								{
									"key": "Date",
									"value": "Tue, 07 Apr 2020 21:11:18 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"_id\": \"5e8a6d96d4be480ab1d91c95\",\n        \"name\": \"Sleep Sounds: Waterscapes\",\n        \"owner\": \"5e8125dc54660672fd69987f\",\n        \"collaborative\": false,\n        \"description\": \"White Noise to Drown Out the Sounds of Police Sirens, Honking Trucks, and Overnight Construction Work Because I Live Right Next to the Brooklyn-Queens Expressway Because This Is the Only Studio Apartment I Can Afford\",\n        \"public\": true,\n        \"followers\": [],\n        \"images\": [\n            \"https://zasymphonia.ddns.net/api/v1/images/playlists/playlist13.jpg\"\n        ],\n        \"tracks\": [\n            \"5e7d2dc03429e24340ff1396\",\n            \"5e7d2ddd3429e24340ff1397\",\n            \"5e7d2e023429e24340ff1398\"\n        ],\n        \"category\": \"5e8072e5e478cf39b47bd1ef\"\n    },\n    {\n        \"_id\": \"5e805a8a3711912168602afa\",\n        \"name\": \"Soak Up the Sun\",\n        \"owner\": \"5e8125dc54660672fd69987f\",\n        \"collaborative\": true,\n        \"description\": \"My Parents Pay for my Premium Account, My Rent, and Literally Everything Else\",\n        \"public\": true,\n        \"followers\": [\n            \"5e812db054660672fd699881\",\n            \"5e812a3454660672fd699880\"\n        ],\n        \"images\": [\n            \"https://zasymphonia.ddns.net/api/v1/images/playlists/playlist3.jpg\"\n        ],\n        \"tracks\": [\n            \"5e8a1ea07937ec4d40c6debf\"\n        ],\n        \"category\": \"5e8076e6a9902a4328cc285c\"\n    },\n    {\n        \"_id\": \"5e7ac3c7d43a2c49909c549c\",\n        \"name\": \"Young, Wild and Free\",\n        \"owner\": \"5e8125dc54660672fd69987f\",\n        \"collaborative\": false,\n        \"description\": \"Soundtrack to My Whimsical, Quirky Life as an Unpaid Intern\",\n        \"public\": true,\n        \"followers\": [\n            \"5e812db054660672fd699881\",\n            \"5e812a3454660672fd699880\"\n        ],\n        \"images\": [\n            \"https://zasymphonia.ddns.net/api/v1/images/playlists/playlist2.jpg\"\n        ],\n        \"tracks\": [\n            \"5e7d2ddd3429e24340ff1397\",\n            \"5e7d2e023429e24340ff1398\",\n            \"5e7d334860cd930408a5f995\",\n            \"5e8a1e0f7937ec4d40c6deba\"\n        ],\n        \"category\": \"5e883e48c808fd1aa40ad1f8\"\n    },\n    {\n        \"_id\": \"5e7969965146d92e98ac3ef7\",\n        \"name\": \"Songs to Sing in the Shower\",\n        \"owner\": \"5e8125dc54660672fd69987f\",\n        \"collaborative\": false,\n        \"description\": \"My Favorite Public Place to Pretend is My Living Room Mix\",\n        \"public\": true,\n        \"followers\": [\n            \"5e812db054660672fd699881\",\n            \"5e812a3454660672fd699880\"\n        ],\n        \"images\": [\n            \"https://zasymphonia.ddns.net/api/v1/images/playlists/playlist1.jpg\"\n        ],\n        \"tracks\": [\n            \"5e7d2dc03429e24340ff1396\",\n            \"5e8a1e767937ec4d40c6debc\",\n            \"5e8a1e9a7937ec4d40c6debe\"\n        ],\n        \"category\": \"5e883e48c808fd1aa40ad1f8\"\n    },\n    {\n        \"_id\": \"5e882913838d9835d207016e\",\n        \"name\": \"Top Party Jams\",\n        \"owner\": \"5e812db054660672fd699881\",\n        \"collaborative\": false,\n        \"description\": \"Songs I Put on to Look “With It” When I’d Rather Be Listening to Yanni on a Windy Moor\",\n        \"public\": true,\n        \"followers\": [],\n        \"images\": [\n            \"https://zasymphonia.ddns.net/api/v1/images/playlists/playlist12.jpg\"\n        ],\n        \"tracks\": [\n            \"5e8a1e727937ec4d40c6debb\",\n            \"5e8a37d0d56ea252c3860a1a\"\n        ],\n        \"category\": \"5e8072e5e478cf39b47bd1ef\"\n    }\n]"
						}
					]
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "recommendations",
			"item": [
				{
					"name": "Get Recommendation Genres",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"description": "access_token",
								"key": "Authorization",
								"type": "text",
								"value": "{{jwt}}",
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
							}
						],
						"url": {
							"raw": "{{URL}}api/v1/recommendations/available-genre-seeds",
							"host": [
								"{{URL}}api"
							],
							"path": [
								"v1",
								"recommendations",
								"available-genre-seeds"
							],
							"query": [
								{
									"key": "country",
									"value": "{{country_code}}",
									"description": "\tOptional. A country: an ISO 3166-1 alpha-2 country code. Provide this parameter if you want to narrow the list of returned categories to those relevant to a particular country. If omitted, the returned items will be globally relevant.",
									"disabled": true
								},
								{
									"key": "locale",
									"value": "{{language}}",
									"disabled": true
								}
							]
						},
						"description": "#description \nretreives the names of categories recommended"
					},
					"response": [
						{
							"name": "Get Recommendation Genres",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "access_token",
										"key": "Authorization",
										"type": "text",
										"value": "{{jwt}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									}
								],
								"url": {
									"raw": "{{URL}}api/v1/recommendations/available-genre-seeds",
									"host": [
										"{{URL}}api"
									],
									"path": [
										"v1",
										"recommendations",
										"available-genre-seeds"
									],
									"query": [
										{
											"key": "country",
											"value": "{{country_code}}",
											"description": "\tOptional. A country: an ISO 3166-1 alpha-2 country code. Provide this parameter if you want to narrow the list of returned categories to those relevant to a particular country. If omitted, the returned items will be globally relevant.",
											"disabled": true
										},
										{
											"key": "locale",
											"value": "{{language}}",
											"disabled": true
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "X-DNS-Prefetch-Control",
									"value": "off"
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=15552000; includeSubDomains"
								},
								{
									"key": "X-Download-Options",
									"value": "noopen"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-XSS-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "70"
								},
								{
									"key": "ETag",
									"value": "W/\"46-vPXHfqw1sxFJmvOHeMA3RrR6ukc\""
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding"
								},
								{
									"key": "Date",
									"value": "Tue, 07 Apr 2020 21:12:27 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"genres\": [\n        \"Psychedelic-pop\",\n        \"Indie-rock\",\n        \"Alternative\",\n        \"Electronic\"\n    ]\n}"
						}
					]
				},
				{
					"name": "Get Random Recommendation",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"description": "access_token",
								"key": "Authorization",
								"type": "text",
								"value": "{{jwt}}",
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
							}
						],
						"url": {
							"raw": "{{URL}}api/v1/recommendations/?sort=name&limit=2&offset=1",
							"host": [
								"{{URL}}api"
							],
							"path": [
								"v1",
								"recommendations",
								""
							],
							"query": [
								{
									"key": "country",
									"value": "{{country_code}}",
									"description": "\tOptional. A country: an ISO 3166-1 alpha-2 country code. Provide this parameter if you want to narrow the list of returned categories to those relevant to a particular country. If omitted, the returned items will be globally relevant.",
									"disabled": true
								},
								{
									"key": "locale",
									"value": "{{language}}",
									"disabled": true
								},
								{
									"key": "sort",
									"value": "name"
								},
								{
									"key": "limit",
									"value": "2"
								},
								{
									"key": "offset",
									"value": "1"
								}
							]
						},
						"description": "# Description\ngets tracks based on some query paramters\n# Request Parameters\n\n## Header  Parameters\n<table>\n  <thead>\n    <tr>\n      <th>Header Field</th>\n      <th>Value</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>Authorization</td>\n      <td><strong>Required</strong>. A valid access token from the Spotify Accounts service: see the <a href=\"/documentation/general/guides/authorization-guide/\">Web API Authorization Guide</a> for details.</td>\n    </tr>\n  </tbody>\n</table>\n\n## Query Parameters\n<table>\n  <thead>\n    <tr>\n      <th>Query Parameter</th>\n      <th>Value</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>limit</td>\n      <td><em>Optional</em>.the maximum number of the returned tracks.</td>\n    </tr>\n    <tr>\n      <td>offset</td>\n      <td>how many tracks to skip from the beggining.</td>\n    </tr>\n    <tr>\n      <td>sort</td>\n      <td>the property it should be sorted by.</td>\n    </tr>\n  </tbody>\n</table>\n\n# Response Format\nOn success, the HTTP status code in the response header is 200 OK and the response body contains a category object in JSON format. On error, the header status code is an error code and the response body contains an error object."
					},
					"response": [
						{
							"name": "Get Random Recommendation",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "access_token",
										"key": "Authorization",
										"type": "text",
										"value": "{{jwt}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									}
								],
								"url": {
									"raw": "{{URL}}api/v1/recommendations/?sort=name&limit=2&offset=1",
									"host": [
										"{{URL}}api"
									],
									"path": [
										"v1",
										"recommendations",
										""
									],
									"query": [
										{
											"key": "country",
											"value": "{{country_code}}",
											"description": "\tOptional. A country: an ISO 3166-1 alpha-2 country code. Provide this parameter if you want to narrow the list of returned categories to those relevant to a particular country. If omitted, the returned items will be globally relevant.",
											"disabled": true
										},
										{
											"key": "locale",
											"value": "{{language}}",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "name"
										},
										{
											"key": "limit",
											"value": "2"
										},
										{
											"key": "offset",
											"value": "1"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "X-DNS-Prefetch-Control",
									"value": "off"
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=15552000; includeSubDomains"
								},
								{
									"key": "X-Download-Options",
									"value": "noopen"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-XSS-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "634"
								},
								{
									"key": "ETag",
									"value": "W/\"27a-WFr1zqb/GUd+RhuVHvN1Pf6EGIM\""
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding"
								},
								{
									"key": "Date",
									"value": "Tue, 07 Apr 2020 21:12:52 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"tracks\": [\n        {\n            \"category\": [\n                \"5e8076e6a9902a4328cc285c\"\n            ],\n            \"explicit\": true,\n            \"_id\": \"5e8a1e937937ec4d40c6debd\",\n            \"album\": \"5e794163c01c024ecc3c31d3\",\n            \"name\": \"BATTLES\",\n            \"durationMs\": 30000,\n            \"artist\": {\n                \"_id\": \"5e84b966681ae439edfc1d6f\",\n                \"name\": \"Minuit Machine\",\n                \"type\": \"artist\"\n            },\n            \"trackPath\": \"assets/tracks/BATTLES.mp3\",\n            \"type\": \"track\"\n        },\n        {\n            \"category\": [\n                \"5e8076e6a9902a4328cc285c\"\n            ],\n            \"explicit\": true,\n            \"_id\": \"5e8a1e9a7937ec4d40c6debe\",\n            \"album\": \"5e794163c01c024ecc3c31d3\",\n            \"name\": \"Black is my anger\",\n            \"durationMs\": 31000,\n            \"artist\": {\n                \"_id\": \"5e84b966681ae439edfc1d6f\",\n                \"name\": \"Minuit Machine\",\n                \"type\": \"artist\"\n            },\n            \"trackPath\": \"assets/tracks/Black-is-my-anger.mp3\",\n            \"type\": \"track\"\n        }\n    ]\n}"
						}
					]
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Search",
			"item": [
				{
					"name": "Search",
					"request": {
						"method": "GET",
						"header": [
							{
								"description": "*Required*. A valid access token from the Symphonia Accounts service.",
								"key": "Authorization",
								"type": "text",
								"value": ""
							}
						],
						"url": {
							"raw": "{{URL}}api/v1/search?q\t&type&market\t&limit\t&offset",
							"host": [
								"{{URL}}api"
							],
							"path": [
								"v1",
								"search"
							],
							"query": [
								{
									"key": "q\t",
									"value": null,
									"description": "*Required*.\nSearch query keywords and optional field filters and operators.\nFor example:\nq=roadhouse%20blues."
								},
								{
									"key": "type",
									"value": null,
									"description": "*Required*.\nA comma-separated list of item types to search across.\nValid types are: *album* , *artist*, *playlist*, and *track*.\nSearch results include hits from all the specified item types.\nFor example: q=name:abacab&type=album,track returns both albums and tracks with “abacab” included in their name."
								},
								{
									"key": "market\t",
									"value": null,
									"description": "*Optional*.\nAn ISO 3166-1 alpha-2 country code or the string from_token.\nIf a country code is specified, only artists, albums, and tracks with content that is playable in that market is returned."
								},
								{
									"key": "limit\t",
									"value": null,
									"description": "*Optional*.\nMaximum number of results to return.\nDefault: 20\nMinimum: 1\nMaximum: 50\nNote: The limit is applied within each type, not on the total response.\nFor example, if the limit value is 3 and the type is artist,album, the response contains 3 artists and 3 albums"
								},
								{
									"key": "offset",
									"value": null,
									"description": "*Optional*.\nThe index of the first result to return.\nDefault: 0 (the first result).\nMaximum offset (including limit): 2,000.\nUse with limit to get the next page of search results."
								}
							]
						},
						"description": "# Search for an Item \r\nGet Symphonia Catalog information about artists, albums, tracks or playlists that match a keyword string.\r\n\r\n# Writing a Query - Guidelines\r\n**Encode spaces** with the hex code %20 or +.\r\n\r\n**Keyword matching**: Matching of search keywords is not case-sensitive. Operators, however, should be specified in uppercase. Unless surrounded by double quotation marks, keywords are matched in any order. For example: `q=roadhouse&20blues` matches both “Blues Roadhouse” and “Roadhouse of the Blues”. `q=\"roadhouse&20blues\"` matches “My Roadhouse Blues” but not “Roadhouse of the Blues”.\r\n\r\nSearching for **playlists** returns results where the query keyword(s) match any part of the playlist’s name or description. Only popular public playlists are returned. \r\n\r\n**Operator**: The operator NOT can be used to exclude results. \r\n\r\nFor example: `q=roadhouse%20NOT%20blues` returns items that match “roadhouse” but excludes those that also contain the keyword “blues”. Similarly, the OR operator can be used to broaden the search: q=roadhouse%20OR%20blues returns all the results that include either of the terms. Only one OR operator can be used in a query. \r\n\r\nNote: Operators must be specified in uppercase. Otherwise, they are handled as normal keywords to be matched. \r\n\r\n**Field filters**: By default, results are returned when a match is found in any field of the target object type. Searches can be made more specific by specifying an `album`, `artist` or `track` field filter. \r\n\r\nFor example: The query `q=album:gold%20artist:abba&type=album` returns only albums with the text “gold” in the album name and the text “abba” in the artist name. \r\n\r\nTo limit the results to a particular `year`, use the field filter year with album, artist, and track searches. \r\n\r\nFor example: `q=bob%20year:2014` \r\n\r\nOr with a date range. For example: `q=bob%20year:1980-2020` \r\n\r\nTo retrieve only albums released in the last two weeks, use the field filter tag:new in album searches. To retrieve only albums with the lowest 10% popularity, use the field filter tag:hipster in album searches. Note: This field filter only works with album searches. \r\n\r\nDepending on object types being searched for, other field filters, include genre (applicable to tracks and artists), `upc`, and `isrc`. For example: `q=lil%20genre:%22southern%20hip%20hop%22&type=artist`. Use double quotation marks around the genre keyword string if it contains spaces.\r\n\r\n\r\n# Response\r\n\r\n**On success**: \r\nIn the response header the HTTP status code is 200 OK.\r\nThe response body contains an array of artist objects, simplified album objects, and/or track objects wrapped in a paging object in JSON.\r\n\r\n**On error**:\r\nThe header status code is an error code.\r\nThe response body contains an error object.\r\n\r\n# Request parameters"
					},
					"response": [
						{
							"name": "Search",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "*Required*. A valid access token from the Symphonia Accounts service.",
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {your access token}"
									}
								],
								"url": {
									"raw": "{{URL}}api/v1/search?q=tania bowra&type=artist",
									"host": [
										"{{URL}}api"
									],
									"path": [
										"v1",
										"search"
									],
									"query": [
										{
											"key": "q",
											"value": "tania bowra",
											"description": "**Required**.\nSearch query keywords and optional field filters and operators.\nFor example:\nq=roadhouse%20blues."
										},
										{
											"key": "type",
											"value": "artist",
											"description": "**Required**.\nA comma-separated list of item types to search across.\nValid types are: *album* , *artist*, *playlist*, and *track*.\nSearch results include hits from all the specified item types.\nFor example: q=name:abacab&type=album,track returns both albums and tracks with “abacab” included in their name."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n    \"artists\": {\n        \"href\": \"https://api.symphonia.com/v1/search?query=tania+bowra&offset=0&limit=20&type=artist\",\n        \"items\": [\n            {\n                \"genres\": [],\n                \"href\": \"https://api.symphonia.com/v1/artists/08td7MxkoHQkXnWAYD8d6Q\",\n                \"id\": \"08td7MxkoHQkXnWAYD8d6Q\",\n                \"images\": [\n                    {\n                        \"height\": 640,\n                        \"url\": \"https://i.scdn.co/image/f2798ddab0c7b76dc2d270b65c4f67ddef7f6718\",\n                        \"width\": 640\n                    },\n                    {\n                        \"height\": 300,\n                        \"url\": \"https://i.scdn.co/image/b414091165ea0f4172089c2fc67bb35aa37cfc55\",\n                        \"width\": 300\n                    },\n                    {\n                        \"height\": 64,\n                        \"url\": \"https://i.scdn.co/image/8522fc78be4bf4e83fea8e67bb742e7d3dfe21b4\",\n                        \"width\": 64\n                    }\n                ],\n                \"name\": \"Tania Bowra\",\n                \"popularity\": 0,\n                \"type\": \"artist\"\n            }\n        ],\n        \"limit\": 20,\n        \"next\": null,\n        \"offset\": 0,\n        \"previous\": null,\n        \"total\": 1\n    }\n}"
						}
					]
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Tracks",
			"item": [
				{
					"name": "Get Several Tracks",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"description": "**Required**. A valid access token from the Symphonia Accounts service.",
								"key": "Authorization",
								"type": "text",
								"value": "",
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
							}
						],
						"url": {
							"raw": "{{URL}}api/v1/users/tracks?ids=5e7d2dc03429e24340ff1396,5e7d2ddd3429e24340ff1397",
							"host": [
								"{{URL}}api"
							],
							"path": [
								"v1",
								"users",
								"tracks"
							],
							"query": [
								{
									"key": "ids",
									"value": "5e7d2dc03429e24340ff1396,5e7d2ddd3429e24340ff1397",
									"description": "*Required*. A comma-separated list of the Spotify IDs for the tracks. Maximum: 50 IDs."
								}
							]
						},
						"description": "# Description\r\n\r\nGet Symphonia catalog information for multiple tracks based on their Symphonia IDs.\r\n\r\n# Response Format\r\n\r\nOn success, the HTTP status code in the response header is `200` OK and the response body contains an object whose key is tracks and whose value is an array of track objects in JSON format. Objects are returned in the order requested. If an object is not found, a null value is returned in the appropriate position. Duplicate ids in the query will result in duplicate objects in the response. On error, the header status code is an error code and the response body contains an error object.\r\n\r\n\r\n## Track object\r\n\r\n| KEY               | VALUE TYPE                            | VALUE DESCRIPTION                                                                                                              |\r\n| ----------------- | ------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------ |\r\n| album             | a simplified album object             | The album on which the track appears. The album object includes a link in href to full information about the album.            |\r\n| artists           | an array of simplified artist objects | The artists who performed the track. Each artist object includes a link in href to more detailed information about the artist. |\r\n| available_markets | array of strings                      | A list of the countries in which the track can be played, identified by their ISO 3166-1 alpha-2 code.                         |\r\n| duration_ms       | integer                               | The track length in milliseconds.                                                                                              |\r\n| explicit          | Boolean                               | Whether or not the track has explicit lyrics ( true = yes it does; false = no it does not OR unknown).                         |\r\n| href              | string                                | A link to the Web API endpoint providing full details of the track.                                                            |\r\n| id                | string                                | The Symphonia ID for the track.                                                                                                |\r\n| name              | string                                | The name of the track.                                                                                                         |\r\n| popularity        | integer                               |  The popularity of the track. The value will be between 0 and 100, with 100 being the most popular.The popularity of a track is a value between 0 and 100, with 100 being the most popular. The popularity is calculated by algorithm and is based, in the most part, on the total number of plays the track has had and how recent those plays are.                                                                                                                              |\r\n| type              | string                                | The object type: “track”.                                                                                                      |\r\n\r\n\r\n## Request parameters"
					},
					"response": [
						{
							"name": "Get Several Tracks",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "**Required**. A valid access token from the Symphonia Accounts service.",
										"key": "Authorization",
										"type": "text",
										"value": "",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									}
								],
								"url": {
									"raw": "{{URL}}api/v1/users/tracks?ids=5e7d2dc03429e24340ff1396,5e7d2ddd3429e24340ff1397",
									"host": [
										"{{URL}}api"
									],
									"path": [
										"v1",
										"users",
										"tracks"
									],
									"query": [
										{
											"key": "ids",
											"value": "5e7d2dc03429e24340ff1396,5e7d2ddd3429e24340ff1397",
											"description": "*Required*. A comma-separated list of the Spotify IDs for the tracks. Maximum: 50 IDs."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "X-DNS-Prefetch-Control",
									"value": "off"
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=15552000; includeSubDomains"
								},
								{
									"key": "X-Download-Options",
									"value": "noopen"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-XSS-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "961"
								},
								{
									"key": "ETag",
									"value": "W/\"3c1-yXGmWo6NM7vhq7I7Nji3FUimrzg\""
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding"
								},
								{
									"key": "Date",
									"value": "Tue, 07 Apr 2020 21:14:27 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"category\": [\n            {\n                \"icons\": [\n                    {\n                        \"url\": \"https://zasymphonia.ddns.net/api/v1/browse/categories/images/Psychedelic-pop.jpg\",\n                        \"width\": 300,\n                        \"height\": 300\n                    }\n                ],\n                \"_id\": \"5e8072e5e478cf39b47bd1ef\",\n                \"name\": \"Psychedelic pop\",\n                \"id\": \"Psychedelic-pop\",\n                \"type\": \"category\",\n                \"href\": \"totot\"\n            }\n        ],\n        \"explicit\": false,\n        \"_id\": \"5e7d2dc03429e24340ff1396\",\n        \"album\": \"5e701fdf2672a63a60573a06\",\n        \"name\": \"Instant Destiny\",\n        \"durationMs\": 30000,\n        \"artist\": \"5e8137aa54660672fd699882\",\n        \"trackPath\": \"assets/tracks/Instant-Destiny.mp3\",\n        \"type\": \"track\"\n    },\n    {\n        \"category\": [\n            {\n                \"icons\": [\n                    {\n                        \"url\": \"https://zasymphonia.ddns.net/api/v1/browse/categories/images/Psychedelic-pop.jpg\",\n                        \"width\": 300,\n                        \"height\": 300\n                    }\n                ],\n                \"_id\": \"5e8072e5e478cf39b47bd1ef\",\n                \"name\": \"Psychedelic pop\",\n                \"id\": \"Psychedelic-pop\",\n                \"type\": \"category\",\n                \"href\": \"totot\"\n            }\n        ],\n        \"explicit\": false,\n        \"_id\": \"5e7d2ddd3429e24340ff1397\",\n        \"album\": \"5e701fdf2672a63a60573a06\",\n        \"name\": \"Borderline\",\n        \"durationMs\": 30000,\n        \"artist\": \"5e8137aa54660672fd699882\",\n        \"trackPath\": \"assets/tracks/Borderline.mp3\",\n        \"type\": \"track\"\n    }\n]"
						}
					]
				},
				{
					"name": "Get track",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
								"description": "*Required*. A valid access token from the Symphonia Accounts service.\n",
								"key": "Authorization",
								"type": "text",
								"value": ""
							}
						],
						"url": {
							"raw": "{{URL}}api/v1/users/track/5e7d2dc03429e24340ff1396",
							"host": [
								"{{URL}}api"
							],
							"path": [
								"v1",
								"users",
								"track",
								"5e7d2dc03429e24340ff1396"
							]
						},
						"description": "# Description\r\n\r\nGet Symphonia catalog information for a single track identified by its unique Symphonia ID.\r\n\r\n# Response\r\n\r\nOn success, the HTTP status code in the response header is `200` OK and the response body contains a track object in JSON format. On error, the header status code is an error code and the response body contains an error object.\r\n\r\n\r\n## Track object\r\n\r\n| KEY               | VALUE TYPE                            | VALUE DESCRIPTION                                                                                                              |\r\n| ----------------- | ------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------ |\r\n| album             | an album object             | The album on which the track appears. The album object includes a link in href to full information about the album.            |\r\n| artists           | an array of artist objects | The artists who performed the track. Each artist object includes a link in href to more detailed information about the artist. |\r\n| available_markets | array of strings                      | A list of the countries in which the track can be played, identified by their ISO 3166-1 alpha-2 code.                         |\r\n| duration_ms       | integer                               | The track length in milliseconds.                                                                                              |\r\n| explicit          | Boolean                               | Whether or not the track has explicit lyrics ( true = yes it does; false = no it does not OR unknown).                         |\r\n| href              | string                                | A link to the Web API endpoint providing full details of the track.                                                            |\r\n| id                | string                                | The Symphonia ID for the track.                                                                                                |\r\n| name              | string                                | The name of the track.                                                                                                         |\r\n| popularity        | integer                               |\tThe popularity of the track. The value will be between 0 and 100, with 100 being the most popular.The popularity of a track is a value between 0 and 100, with 100 being the most popular. The popularity is calculated by algorithm and is based, in the most part, on the total number of plays the track has had and how recent those plays are.                                                                                                                                |\r\n| type              | string                                | The object type: “track”.                                                                                                      |\r\n\r\n\r\n## Request parameters"
					},
					"response": [
						{
							"name": "Get track",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"description": "*Required*. A valid access token from the Symphonia Accounts service.\n",
										"key": "Authorization",
										"type": "text",
										"value": ""
									}
								],
								"url": {
									"raw": "{{URL}}api/v1/users/track/5e7d2dc03429e24340ff1396",
									"host": [
										"{{URL}}api"
									],
									"path": [
										"v1",
										"users",
										"track",
										"5e7d2dc03429e24340ff1396"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "X-DNS-Prefetch-Control",
									"value": "off"
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=15552000; includeSubDomains"
								},
								{
									"key": "X-Download-Options",
									"value": "noopen"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-XSS-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "484"
								},
								{
									"key": "ETag",
									"value": "W/\"1e4-zx9il8q4e0X8dlSCsRvnML0Tclg\""
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding"
								},
								{
									"key": "Date",
									"value": "Tue, 07 Apr 2020 21:13:29 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"category\": [\n        {\n            \"icons\": [\n                {\n                    \"url\": \"https://zasymphonia.ddns.net/api/v1/browse/categories/images/Psychedelic-pop.jpg\",\n                    \"width\": 300,\n                    \"height\": 300\n                }\n            ],\n            \"_id\": \"5e8072e5e478cf39b47bd1ef\",\n            \"name\": \"Psychedelic pop\",\n            \"id\": \"Psychedelic-pop\",\n            \"type\": \"category\",\n            \"href\": \"totot\"\n        }\n    ],\n    \"explicit\": false,\n    \"_id\": \"5e7d2dc03429e24340ff1396\",\n    \"album\": \"5e701fdf2672a63a60573a06\",\n    \"name\": \"Instant Destiny\",\n    \"durationMs\": 30000,\n    \"artist\": \"5e8137aa54660672fd699882\",\n    \"trackPath\": \"assets/tracks/Instant-Destiny.mp3\",\n    \"type\": \"track\"\n}"
						}
					]
				},
				{
					"name": "Add track",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
								"key": "Authorization",
								"value": "",
								"description": "*Required*. A valid access token from the Symphonia Accounts service",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": "*Required*. The content type of the request body:",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"plague\",\n\t\"durationMs\": \"21354\",\n\t\"category\": \"5e7d2c5918b08d30dc0af3c5\",\n\t\"artist\": \"5e7d2ad6491be620ac9ea056\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}api/v1/users/tracks",
							"host": [
								"{{URL}}api"
							],
							"path": [
								"v1",
								"users",
								"tracks"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Users",
			"item": [
				{
					"name": "Register",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e3622365-7b25-4c71-b2be-a9f4316ed5c2",
								"exec": [
									"pm.environment.set(\"jwt\", pm.response.json().token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text",
								"description": "<em>Required </em> The content type of the request body:"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"etsh\",\n\t\"email\": \"test133@test.com\",\n\t\"emailConfirm\": \"test133@test.com\",\n\t\"password\": \"password\",\n\t\"dateOfBirth\": \"1999-04-30\",\n\t\"gender\": \"male\",\n\t\"type\": \"artist\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}api/v1/users/signup",
							"host": [
								"{{URL}}api"
							],
							"path": [
								"v1",
								"users",
								"signup"
							]
						},
						"description": "# Description\r\n\r\nRegister a new user into the application providing his/her essential information\r\n\r\n## Response Format\r\n\r\nOn success, the HTTP status code in the response header is 201 Created. The response body contains the token that will be used to authorize the user and user object. On error, the header status code is an error code and the response body contains an error object. \r\n\r\n\r\n### user object \r\n\r\n<table>\r\n  <thead>\r\n    <tr>\r\n      <th>Key</th>\r\n      <th>Value Type</th>\r\n      <th>Value Description</th>\r\n    </tr>\r\n  </thead>\r\n  <tbody>\r\n    <tr>\r\n      <td>name</td>\r\n      <td>string</td>\r\n      <td>The name that the user provided for himself.</td>\r\n    </tr>\r\n    <tr>\r\n      <td>email</td>\r\n      <td>string</td>\r\n      <td>The email the user provided.</td>\r\n    </tr>\r\n    <tr>\r\n      <td>_id</td>\r\n      <td>string</td>\r\n      <td>The Symphonia ID used to identify the user in our application.</td>\r\n    </tr>\r\n  </tbody>\r\n</table>\r\n\r\n## Request parameters\r\n\r\n### Body parameters\r\n\r\n<table>\r\n  <thead>\r\n    <tr>\r\n      <th>Key</th>\r\n      <th>Value Type</th>\r\n      <th>Value Description</th>\r\n    </tr>\r\n  </thead>\r\n  <tbody>\r\n    <tr>\r\n      <td>name</td>\r\n      <td>string</td>\r\n      <td><em>Required: </em> The name that the user provided for himself.</td>\r\n    </tr>\r\n    <tr>\r\n      <td>email</td>\r\n      <td>string</td>\r\n      <td><em>Required: </em> The email the user provided.</td>\r\n    </tr>\r\n    <tr>\r\n      <td>password</td>\r\n      <td>string</td>\r\n      <td><em>Required: </em> The user password.</td>\r\n    </tr>\r\n    <tr>\r\n      <td>passwordConfirm</td>\r\n      <td>string</td>\r\n      <td><em>Required: </em> The user password confirmation.</td>\r\n    </tr>\r\n    <tr>\r\n      <td>DateOfBirth</td>\r\n      <td>date</td>\r\n      <td><em>Required: </em> The date of birth for the user.</td>\r\n    </tr>\r\n    <tr>\r\n      <td>Gender</td>\r\n      <td>string</td>\r\n      <td><em>Required: </em> The gender of the user should be <code>\"male\"</code> or <code>\"female\"</code> only.</td>\r\n    </tr>\r\n  </tbody>\r\n</table>"
					},
					"response": [
						{
							"name": "Register",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text",
										"description": "<em>Required </em> The content type of the request body:"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"etsh\",\n\t\"email\": \"test133@test.com\",\n\t\"emailConfirm\": \"test133@test.com\",\n\t\"password\": \"password\",\n\t\"dateOfBirth\": \"1999-04-30\",\n\t\"gender\": \"male\",\n\t\"type\": \"artist\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}api/v1/users/signup",
									"host": [
										"{{URL}}api"
									],
									"path": [
										"v1",
										"users",
										"signup"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "X-DNS-Prefetch-Control",
									"value": "off"
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=15552000; includeSubDomains"
								},
								{
									"key": "X-Download-Options",
									"value": "noopen"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-XSS-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "631"
								},
								{
									"key": "ETag",
									"value": "W/\"277-I0gi2BIl3n8rrO44Os1wxRInW0c\""
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding"
								},
								{
									"key": "Date",
									"value": "Tue, 07 Apr 2020 21:15:38 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjVlOGNlZDdhMmI3ODNlMjgzOGY5ZDVlNCIsImlhdCI6MTU4NjI5NDEzOCwiZXhwIjoxNzU5MDk0MTM4fQ.7EZNfwQxPyyV1KMyiqWF8AyvOAcI2UhJnvh4aWx7BeI\",\n    \"user\": {\n        \"queue\": {\n            \"currentlyPlaying\": {\n                \"currentTrack\": null\n            },\n            \"queueTracks\": [],\n            \"previousTrack\": null,\n            \"repeat\": false,\n            \"shuffle\": false,\n            \"play\": false,\n            \"repeatOnce\": false,\n            \"devices\": []\n        },\n        \"ownedPlaylists\": [],\n        \"followedAlbums\": [],\n        \"followedTracks\": [],\n        \"_id\": \"5e8ced7a2b783e2838f9d5e4\",\n        \"email\": \"test133@test.com\",\n        \"name\": \"etsh\",\n        \"dateOfBirth\": \"1999-04-30T00:00:00.000Z\",\n        \"gender\": \"male\",\n        \"type\": \"artist\",\n        \"imageUrl\": \"http://localhost:3000/api/v1/images/users/default.png\"\n    }\n}"
						}
					]
				},
				{
					"name": "login",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "62db18ff-cd68-4678-ae37-f8e321474c96",
								"exec": [
									"pm.environment.set(\"jwt\", pm.response.json().token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json",
								"description": "<em>Required </em> The content type of the request body:"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"email\": \"generalmohamed1999@gmail.com\",\n\t\"password\": \"password\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}api/v1/users/login",
							"host": [
								"{{URL}}api"
							],
							"path": [
								"v1",
								"users",
								"login"
							]
						},
						"description": "# Description\r\n\r\nlogin the Symphonia user into the application providing his/her registered email\r\n\r\n# Response Format\r\n\r\nOn success, the HTTP status code in the response header is `200`. The response body contains the token that will be used to authorize the user and user object. On error, the header status code is an error code and the response body contains an error object. \r\n\r\n# Example\r\n\r\n## user object \r\n\r\n<table>\r\n  <thead>\r\n    <tr>\r\n      <th>Key</th>\r\n      <th>Value Type</th>\r\n      <th>Value Description</th>\r\n    </tr>\r\n  </thead>\r\n  <tbody>\r\n    <tr>\r\n      <td>name</td>\r\n      <td>string</td>\r\n      <td>The name that the user provided for himself.</td>\r\n    </tr>\r\n    <tr>\r\n      <td>email</td>\r\n      <td>string</td>\r\n      <td>The email the user provided.</td>\r\n    </tr>\r\n    <tr>\r\n      <td>_id</td>\r\n      <td>string</td>\r\n      <td>The Symphonia ID used to identify the user in our application.</td>\r\n    </tr>\r\n  </tbody>\r\n</table>\r\n\r\n# Request parameters\r\n\r\n## Body parameters\r\n\r\n<table>\r\n  <thead>\r\n    <tr>\r\n      <th>Key</th>\r\n      <th>Value Type</th>\r\n      <th>Value Description</th>\r\n    </tr>\r\n  </thead>\r\n  <tbody>\r\n    <tr>\r\n      <td>email</td>\r\n      <td>string</td>\r\n      <td><em>Required: </em> The email the user provided.</td>\r\n    </tr>\r\n    <tr>\r\n      <td>password</td>\r\n      <td>string</td>\r\n      <td><em>Required: </em> The user password.</td>\r\n    </tr>\r\n  </tbody>\r\n</table>"
					},
					"response": [
						{
							"name": "login",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json",
										"description": "<em>Required </em> The content type of the request body:"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"email\": \"generalmohamed1999@gmail.com\",\n\t\"password\": \"password\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}api/v1/users/login",
									"host": [
										"{{URL}}api"
									],
									"path": [
										"v1",
										"users",
										"login"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "X-DNS-Prefetch-Control",
									"value": "off"
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=15552000; includeSubDomains"
								},
								{
									"key": "X-Download-Options",
									"value": "noopen"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-XSS-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "ETag",
									"value": "W/\"446-OoGp4+ThrDCQYdZYl8QS8Po/XGM\""
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip"
								},
								{
									"key": "Date",
									"value": "Tue, 07 Apr 2020 21:16:00 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								}
							],
							"cookie": [],
							"body": "{\n    \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjVlODEyNWRjNTQ2NjA2NzJmZDY5OTg3ZiIsImlhdCI6MTU4NjI5NDE2MCwiZXhwIjoxNzU5MDk0MTYwfQ.n6sRqtFl441iXP9cb9YAm7oWFm7NJ33zTrUxBDgRy4A\",\n    \"user\": {\n        \"queue\": {\n            \"currentlyPlaying\": {\n                \"currentTrack\": null\n            },\n            \"queueTracks\": [],\n            \"previousTrack\": null,\n            \"repeat\": false,\n            \"shuffle\": false,\n            \"play\": false,\n            \"repeatOnce\": false,\n            \"devices\": [\n                {\n                    \"_id\": \"5e8a5a78b2859207bf1fc2e8\",\n                    \"devicesName\": \"chrome\"\n                }\n            ]\n        },\n        \"ownedPlaylists\": [\n            \"5e7969965146d92e98ac3ef7\",\n            \"5e7ac3c7d43a2c49909c549c\",\n            \"5e805a8a3711912168602afa\",\n            \"5e875c15ba6ebe663fdbb2c1\"\n        ],\n        \"followedAlbums\": [\n            \"5e701f4d2672a63a60573a02\",\n            \"5e701fdf2672a63a60573a06\"\n        ],\n        \"followedTracks\": [],\n        \"_id\": \"5e8125dc54660672fd69987f\",\n        \"email\": \"generalmohamed1999@gmail.com\",\n        \"name\": \"Muhammad Ahmad Hesham\",\n        \"dateOfBirth\": \"1999-05-12T00:00:00.000Z\",\n        \"gender\": \"male\",\n        \"type\": \"user\",\n        \"last_login\": \"2020-04-07T21:16:00.918Z\",\n        \"passwordChangedAt\": \"2020-04-01T15:38:48.450Z\",\n        \"googleId\": \"googleId\",\n        \"imageGoogleUrl\": \"https://lh3.googleusercontent.com/a-/AOh14Gga4UgHOVM-hgdnV5Sv8OusgKzhsfmiYv5wEgSwxA\",\n        \"imageUrl\": \"https://zasymphonia.ddns.net/api/v1/images/users/default.png\"\n    }\n}"
						}
					]
				},
				{
					"name": "update password",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"passwordCurrent\": \"newpassword\",\n\t\"password\": \"password\",\n\t\"passwordConfirm\": \"password\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}api/v1/users/updatepassword",
							"host": [
								"{{URL}}api"
							],
							"path": [
								"v1",
								"users",
								"updatepassword"
							]
						}
					},
					"response": [
						{
							"name": "update password",
							"originalRequest": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {your access token}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"passwordCurrent\": \"password\",\n\t\"password\": \"newpassword\",\n\t\"passwordConfirm\": \"newpassword\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}api/v1/users/updatepassword",
									"host": [
										"{{URL}}api"
									],
									"path": [
										"v1",
										"users",
										"updatepassword"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "X-DNS-Prefetch-Control",
									"value": "off"
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=15552000; includeSubDomains"
								},
								{
									"key": "X-Download-Options",
									"value": "noopen"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-XSS-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "X-RateLimit-Limit",
									"value": "1000"
								},
								{
									"key": "X-RateLimit-Remaining",
									"value": "999"
								},
								{
									"key": "Date",
									"value": "Sun, 29 Mar 2020 16:35:28 GMT"
								},
								{
									"key": "X-RateLimit-Reset",
									"value": "1585503326"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "453"
								},
								{
									"key": "ETag",
									"value": "W/\"1c5-1Q2P1P6u8hNJlcJfxpbyNTU6QZA\""
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjVlODBiMzQxYjE5YTI0MDg0Y2I5YjdlNyIsImlhdCI6MTU4NTQ5OTczMiwiZXhwIjoxNTg1NTAzMzMyfQ._YoFcWRISVlkTXUA0s8qaxf7N0L3A2ZIwfVEwLq5joU\",\n    \"user\": {\n        \"_id\": \"5e80b341b19a24084cb9b7e7\",\n        \"email\": \"test29@test.com\",\n        \"name\": \"etsh\",\n        \"dateOfBirth\": \"1999-12-31T00:00:00.000Z\",\n        \"gender\": \"male\",\n        \"type\": \"artist\",\n        \"last_login\": \"2020-03-29T16:33:58.024Z\",\n        \"passwordChangedAt\": \"2020-03-29T16:35:31.242Z\"\n    }\n}"
						}
					]
				},
				{
					"name": "Forgot Password",
					"request": {
						"method": "POST",
						"header": [
							{
								"description": "<em>Required </em> The content type of the request body:",
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"email\": \"generalmohamed1999@gmail.com\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}api/v1/users/forgotpassword",
							"host": [
								"{{URL}}api"
							],
							"path": [
								"v1",
								"users",
								"forgotpassword"
							]
						},
						"description": "# Description\r\n\r\nwhen a user forgets his password he provides his email so we can help him get into his account.\r\n\r\n# Response Format\r\n\r\nOn success, the HTTP status code in the response header is `200`. The response body contains a message telling the user to check his email inbox. On error, the header status code is an error code and the response body contains an error object. \r\n\r\n\r\n# Request parameters\r\n\r\n## Body parameters\r\n\r\n<table>\r\n  <thead>\r\n    <tr>\r\n      <th>Key</th>\r\n      <th>Value Type</th>\r\n      <th>Value Description</th>\r\n    </tr>\r\n  </thead>\r\n  <tbody>\r\n    <tr>\r\n      <td>email</td>\r\n      <td>string</td>\r\n      <td><em>Required: </em> The registered user email in Symphonia application.</td>\r\n    </tr>\r\n  </tbody>\r\n</table>"
					},
					"response": [
						{
							"name": "Forgot Password",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "<em>Required </em> The content type of the request body:",
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"email\": \"test@test.com\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}api/v1/users/forgotpassword",
									"host": [
										"{{URL}}api"
									],
									"path": [
										"v1",
										"users",
										"forgotpassword"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "nginx/1.14.0 (Ubuntu)"
								},
								{
									"key": "Date",
									"value": "Mon, 30 Mar 2020 18:00:47 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "53"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "X-DNS-Prefetch-Control",
									"value": "off"
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=15552000; includeSubDomains"
								},
								{
									"key": "X-Download-Options",
									"value": "noopen"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-XSS-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "X-RateLimit-Limit",
									"value": "1000"
								},
								{
									"key": "X-RateLimit-Remaining",
									"value": "999"
								},
								{
									"key": "X-RateLimit-Reset",
									"value": "1585591549"
								},
								{
									"key": "ETag",
									"value": "W/\"35-7vJh+jMVY1tC+XB9d74hwdymChI\""
								}
							],
							"cookie": [],
							"body": "{\n    \"status\": \"success\",\n    \"message\": \"Token sent to email!\"\n}"
						}
					]
				},
				{
					"name": "Reset_Password",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json",
								"description": "<em>Required </em> The content type of the request body:"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"password\": \"newpassword\",\n\t\"passwordConfirm\": \"newpassword\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}api/v1/users/resetpassword/:{token}",
							"host": [
								"{{URL}}api"
							],
							"path": [
								"v1",
								"users",
								"resetpassword",
								":{token}"
							],
							"variable": [
								{
									"key": "{token}",
									"value": "f31c2eb07635197b475353b52140f202dbc6962045bc64929b0c3d2b0ec4b0c6",
									"description": "*required: *  A valid Token that the server sent it to the user email."
								}
							]
						},
						"description": "# Description\r\n\r\nThe user using the provided token can send the new password for the account to be set.\r\n\r\n# Response Format\r\n\r\nOn success, the HTTP status code in the response header is `200`. The response body contains the access token for the user. On error, the header status code is an error code and the response body contains an error object. \r\n\r\n\r\n# Request parameters\r\n\r\n## Body parameters\r\n\r\n<table>\r\n  <thead>\r\n    <tr>\r\n      <th>Key</th>\r\n      <th>Value Type</th>\r\n      <th>Value Description</th>\r\n    </tr>\r\n  </thead>\r\n  <tbody>\r\n    <tr>\r\n      <td>password</td>\r\n      <td>string</td>\r\n      <td><em>Required: </em> The new account password.</td>\r\n    </tr>\r\n    <tr>\r\n      <td>passwordConfirm</td>\r\n      <td>string</td>\r\n      <td><em>Required: </em> The new account password confirmation.</td>\r\n    </tr>\r\n  </tbody>\r\n</table>"
					},
					"response": [
						{
							"name": "Reset_Password",
							"originalRequest": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json",
										"description": "<em>Required </em> The content type of the request body:"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"password\": \"newpassword\",\n\t\"passwordConfirm\": \"newpassword\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}api/v1/users/resetpassword/:{token}",
									"host": [
										"{{URL}}api"
									],
									"path": [
										"v1",
										"users",
										"resetpassword",
										":{token}"
									],
									"variable": [
										{
											"key": "{token}",
											"value": "f31c2eb07635197b475353b52140f202dbc6962045bc64929b0c3d2b0ec4b0c6",
											"description": "*required: *  A valid Token that the server sent it to the user email."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "nginx/1.14.0 (Ubuntu)"
								},
								{
									"key": "Date",
									"value": "Mon, 30 Mar 2020 18:04:05 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "439"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "X-DNS-Prefetch-Control",
									"value": "off"
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=15552000; includeSubDomains"
								},
								{
									"key": "X-Download-Options",
									"value": "noopen"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-XSS-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "X-RateLimit-Limit",
									"value": "1000"
								},
								{
									"key": "X-RateLimit-Remaining",
									"value": "998"
								},
								{
									"key": "X-RateLimit-Reset",
									"value": "1585591549"
								},
								{
									"key": "ETag",
									"value": "W/\"1b7-BD8v2w/mff0a8RmfAdR2ttOuNro\""
								}
							],
							"cookie": [],
							"body": "{\n    \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjVlODEyNWRjNTQ2NjA2NzJmZDY5OTg3ZiIsImlhdCI6MTU4NTU5MTQ0NSwiZXhwIjoxNTg1NTk1MDQ1fQ.L4QXscxpTpadxkA3T0dGMdSbS3Cp1NLBBaHEgtjntH0\",\n    \"user\": {\n        \"_id\": \"5e8125dc54660672fd69987f\",\n        \"email\": \"generalmohamed1999@gmail.com\",\n        \"name\": \"nigga\",\n        \"dateOfBirth\": \"1999-05-12T00:00:00.000Z\",\n        \"gender\": \"male\",\n        \"type\": \"artist\",\n        \"last_login\": \"2020-03-30T11:17:32.422Z\",\n        \"passwordChangedAt\": \"2020-03-30T18:04:04.533Z\"\n    }\n}"
						}
					]
				},
				{
					"name": "Apply_Artist",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
								"key": "Authorization",
								"value": "",
								"type": "text",
								"description": "*Required*. A valid access token from the Symphonia Accounts service."
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text",
								"description": "<em>Required </em> The content type of the request body:"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{URL}}api/v1/users/applyartist",
							"host": [
								"{{URL}}api"
							],
							"path": [
								"v1",
								"users",
								"applyartist"
							]
						}
					},
					"response": [
						{
							"name": "Apply_Artist",
							"originalRequest": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {your access token}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"type\": \"artist\"\n}"
								},
								"url": {
									"raw": "{{URL}}api/v1/users/applyartist",
									"host": [
										"{{URL}}api"
									],
									"path": [
										"v1",
										"users",
										"applyartist"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n\t\"status\": \"succes\",\n\t\"message\": \"You are now an artist\"\n}\n\n\n"
						}
					]
				},
				{
					"name": "Google-OAuth",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{URL}}api/v1/users/auth/google",
							"host": [
								"{{URL}}api"
							],
							"path": [
								"v1",
								"users",
								"auth",
								"google"
							]
						}
					},
					"response": [
						{
							"name": "Google-OAuth",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{URL}}api/v1/users/auth/google",
									"host": [
										"{{URL}}api"
									],
									"path": [
										"v1",
										"users",
										"auth",
										"google"
									]
								}
							},
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n\t\"status\": \"success\",\n\t\"message\": \"Authenticated with google\"\n}"
						}
					]
				},
				{
					"name": "Facebook-Auth",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}api/v1/users/auth/facebook",
							"host": [
								"{{URL}}api"
							],
							"path": [
								"v1",
								"users",
								"auth",
								"facebook"
							]
						}
					},
					"response": [
						{
							"name": "Facebook-Auth",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}api/v1/users/auth/facebook",
									"host": [
										"{{URL}}api"
									],
									"path": [
										"v1",
										"users",
										"auth",
										"facebook"
									]
								}
							},
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n    \"status\": \"success\",\n    \"message\": \"Authenticated with facebook\"\n}"
						}
					]
				},
				{
					"name": "Check email existence",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"email\": \"test29@test.com\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}api/v1/users/email-exist",
							"host": [
								"{{URL}}api"
							],
							"path": [
								"v1",
								"users",
								"email-exist"
							]
						}
					},
					"response": [
						{
							"name": "Check if email exists in the database",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"email\": \"test29@test.com\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}api/v1/users/email-exist",
									"host": [
										"{{URL}}api"
									],
									"path": [
										"v1",
										"users",
										"email-exist"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "X-DNS-Prefetch-Control",
									"value": "off"
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=15552000; includeSubDomains"
								},
								{
									"key": "X-Download-Options",
									"value": "noopen"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-XSS-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "X-RateLimit-Limit",
									"value": "1000"
								},
								{
									"key": "X-RateLimit-Remaining",
									"value": "996"
								},
								{
									"key": "Date",
									"value": "Fri, 03 Apr 2020 20:32:09 GMT"
								},
								{
									"key": "X-RateLimit-Reset",
									"value": "1585949332"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "31"
								},
								{
									"key": "ETag",
									"value": "W/\"1f-InAREvGHtGmbIvvXUJT/WV24CmA\""
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"exists\": true,\n    \"type\": \"artist\"\n}"
						}
					]
				},
				{
					"name": "Premium",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}/me/checkout-session",
							"host": [
								"{{URL}}"
							],
							"path": [
								"me",
								"checkout-session"
							]
						},
						"description": "## Get user Cridet card sesssion\r\n\r\n return information from the session that the user use to pay the premium subscribtion\r\n## Response Format\r\n  On success, the HTTP status code in the response header is 200 OK, the header status code is an error code and the response body contains an error object."
					},
					"response": [
						{
							"name": "Premium",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}/me/checkout-session",
									"host": [
										"{{URL}}"
									],
									"path": [
										"me",
										"checkout-session"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "X-DNS-Prefetch-Control",
									"value": "off"
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=15552000; includeSubDomains"
								},
								{
									"key": "X-Download-Options",
									"value": "noopen"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-XSS-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "X-RateLimit-Limit",
									"value": "1000"
								},
								{
									"key": "X-RateLimit-Remaining",
									"value": "967"
								},
								{
									"key": "Date",
									"value": "Sun, 05 Apr 2020 14:22:35 GMT"
								},
								{
									"key": "X-RateLimit-Reset",
									"value": "1586097230"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "828"
								},
								{
									"key": "ETag",
									"value": "W/\"33c-CN5AUcwAIsmbBcFI7rAiMWQvAS0\""
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"session\": {\n        \"id\": \"cs_test_ZbI888pzQWoVMZjtGrKSU2mVEFyaPpbwEeZ4LMUengwGfjrcjXNoVmWX\",\n        \"object\": \"checkout.session\",\n        \"billing_address_collection\": null,\n        \"cancel_url\": \"http://localhost:3000/\",\n        \"client_reference_id\": \"mohamed.ahmed999@eng-st.cu.edu.eg\",\n        \"customer\": null,\n        \"customer_email\": \"mohamed.ahmed999@eng-st.cu.edu.eg\",\n        \"display_items\": [\n            {\n                \"amount\": 10000,\n                \"currency\": \"usd\",\n                \"custom\": {\n                    \"description\": \"remove advs and get locked songs\",\n                    \"images\": [\n                        \"http://localhost:3000/img/defult\"\n                    ],\n                    \"name\": \"Premium Subscription\"\n                },\n                \"quantity\": 1,\n                \"type\": \"custom\"\n            }\n        ],\n        \"livemode\": false,\n        \"locale\": null,\n        \"metadata\": {},\n        \"mode\": \"payment\",\n        \"payment_intent\": \"pi_1GUZMvJfsNM64j5dNoOMub5j\",\n        \"payment_method_types\": [\n            \"card\"\n        ],\n        \"setup_intent\": null,\n        \"shipping\": null,\n        \"shipping_address_collection\": null,\n        \"submit_type\": null,\n        \"subscription\": null,\n        \"success_url\": \"http://localhost:3000/api/v1/me\"\n    }\n}"
						}
					]
				},
				{
					"name": "Get-Current-User-Profile",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}api/v1/me",
							"host": [
								"{{URL}}api"
							],
							"path": [
								"v1",
								"me"
							]
						},
						"description": "## Get user Pfofile (private) \r\n Just get informations about the user .\r\n\r\n\r\n## Response Format\r\n  On success, the HTTP status code in the response header is 200 OK , the header status code is an error code and the response body contains an error object."
					},
					"response": [
						{
							"name": "Current user profile who used google Oauth",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}api/v1/me",
									"host": [
										"{{URL}}api"
									],
									"path": [
										"v1",
										"me"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "X-DNS-Prefetch-Control",
									"value": "off"
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=15552000; includeSubDomains"
								},
								{
									"key": "X-Download-Options",
									"value": "noopen"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-XSS-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "X-RateLimit-Limit",
									"value": "1000"
								},
								{
									"key": "X-RateLimit-Remaining",
									"value": "999"
								},
								{
									"key": "Date",
									"value": "Mon, 06 Apr 2020 10:22:49 GMT"
								},
								{
									"key": "X-RateLimit-Reset",
									"value": "1586172161"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "ETag",
									"value": "W/\"792-1IwAO0yeLpNN01gTqrGFgzcMmlI\""
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								}
							],
							"cookie": [],
							"body": "{\n    \"queue\": {\n        \"currentlyPlaying\": {\n            \"currentTrack\": null\n        },\n        \"queueTracks\": [],\n        \"previousTrack\": null,\n        \"repeat\": false,\n        \"shuffle\": false,\n        \"play\": false,\n        \"repeatOnce\": false,\n        \"devices\": [\n            {\n                \"_id\": \"5e8a5a78b2859207bf1fc2e8\",\n                \"devicesName\": \"Chrome\"\n            },\n            {\n                \"_id\": \"5e8a5b0db2859207bf1fc2e9\",\n                \"devicesName\": \"Chrome\"\n            },\n            {\n                \"_id\": \"5e8a5b4fb2859207bf1fc2ea\",\n                \"devicesName\": \"Chrome\"\n            },\n            {\n                \"_id\": \"5e8a6ac9ed210008a53e2f7d\",\n                \"devicesName\": \"Chrome\"\n            },\n            {\n                \"_id\": \"5e8a6ae3ed210008a53e2f7e\",\n                \"devicesName\": \"Chrome\"\n            },\n            {\n                \"_id\": \"5e8a6d85d4be480ab1d91c94\",\n                \"devicesName\": \"Chrome\"\n            },\n            {\n                \"_id\": \"5e8a6da9d4be480ab1d91c96\",\n                \"devicesName\": \"Chrome\"\n            },\n            {\n                \"_id\": \"5e8a719c5fbcf40b07c12f53\",\n                \"devicesName\": \"Chrome\"\n            },\n            {\n                \"_id\": \"5e8a71c45fbcf40b07c12f54\",\n                \"devicesName\": \"Chrome\"\n            },\n            {\n                \"_id\": \"5e8a71c45fbcf40b07c12f55\",\n                \"devicesName\": \"Chrome\"\n            },\n            {\n                \"_id\": \"5e8a71c45fbcf40b07c12f56\",\n                \"devicesName\": \"Chrome\"\n            },\n            {\n                \"_id\": \"5e8a71c45fbcf40b07c12f57\",\n                \"devicesName\": \"Chrome\"\n            },\n            {\n                \"_id\": \"5e8a71c55fbcf40b07c12f58\",\n                \"devicesName\": \"Chrome\"\n            },\n            {\n                \"_id\": \"5e8a71c55fbcf40b07c12f59\",\n                \"devicesName\": \"Chrome\"\n            },\n            {\n                \"_id\": \"5e8a71c55fbcf40b07c12f5a\",\n                \"devicesName\": \"Chrome\"\n            },\n            {\n                \"_id\": \"5e8a71c65fbcf40b07c12f5b\",\n                \"devicesName\": \"Chrome\"\n            },\n            {\n                \"_id\": \"5e8a71c65fbcf40b07c12f5c\",\n                \"devicesName\": \"Chrome\"\n            },\n            {\n                \"_id\": \"5e8a71c75fbcf40b07c12f5d\",\n                \"devicesName\": \"Chrome\"\n            },\n            {\n                \"_id\": \"5e8a71c75fbcf40b07c12f5e\",\n                \"devicesName\": \"Chrome\"\n            },\n            {\n                \"_id\": \"5e8a71cf5fbcf40b07c12f5f\",\n                \"devicesName\": \"Chrome\"\n            },\n            {\n                \"_id\": \"5e8a7d9af30cd40c365b8cb6\",\n                \"devicesName\": \"Chrome\"\n            },\n            {\n                \"_id\": \"5e8a7dc4f30cd40c365b8cb7\",\n                \"devicesName\": \"Chrome\"\n            }\n        ]\n    },\n    \"followedUsers\": [],\n    \"tracks\": [],\n    \"ownedPlaylists\": [\n        \"5e8a6d96d4be480ab1d91c95\"\n    ],\n    \"followedAlbums\": [],\n    \"_id\": \"5e8125dc54660672fd69987f\",\n    \"email\": \"generalmohamed1999@gmail.com\",\n    \"name\": \"nigga\",\n    \"dateOfBirth\": \"1999-05-12T00:00:00.000Z\",\n    \"gender\": \"male\",\n    \"type\": \"artist\",\n    \"__v\": 25,\n    \"last_login\": \"2020-04-06T10:21:58.141Z\",\n    \"imageGoogleUrl\": \"https://lh3.googleusercontent.com/a-/AOh14Gga4UgHOVM-hgdnV5Sv8OusgKzhsfmiYv5wEgSwxA\",\n    \"playlists\": [],\n    \"imageUrl\": \"http://zasymphonia.ddns.net/api/v1/images/users/default.png\"\n}"
						},
						{
							"name": "Current user profile normal with signup",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}api/v1/me",
									"host": [
										"{{URL}}api"
									],
									"path": [
										"v1",
										"me"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "X-DNS-Prefetch-Control",
									"value": "off"
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=15552000; includeSubDomains"
								},
								{
									"key": "X-Download-Options",
									"value": "noopen"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-XSS-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "X-RateLimit-Limit",
									"value": "1000"
								},
								{
									"key": "X-RateLimit-Remaining",
									"value": "997"
								},
								{
									"key": "Date",
									"value": "Mon, 06 Apr 2020 10:25:02 GMT"
								},
								{
									"key": "X-RateLimit-Reset",
									"value": "1586172161"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "ETag",
									"value": "W/\"702-nj20bEvyW6z/ntxk7hvk1kLe9LY\""
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								}
							],
							"cookie": [],
							"body": "{\n    \"queue\": {\n        \"currentlyPlaying\": {\n            \"currentTrack\": \"http://ec2-54-197-122-205.compute-1.amazonaws.com/api/v1/me/player/tracks/5e7d2dc03429e24340ff1396\",\n            \"device\": \"5e8a6b01ed210008a53e2f7f\"\n        },\n        \"queueTracks\": [],\n        \"previousTrack\": null,\n        \"repeat\": false,\n        \"shuffle\": false,\n        \"play\": false,\n        \"repeatOnce\": false,\n        \"devices\": [\n            {\n                \"_id\": \"5e8a107fdf9ed11c1cc2de92\"\n            },\n            {\n                \"_id\": \"5e8a10c3df9ed11c1cc2de95\"\n            },\n            {\n                \"_id\": \"5e8a10cbd56ea252c3860a0a\"\n            },\n            {\n                \"_id\": \"5e8a113bdf9ed11c1cc2de97\"\n            },\n            {\n                \"_id\": \"5e8a1144d56ea252c3860a0c\"\n            },\n            {\n                \"_id\": \"5e8a1185d56ea252c3860a0e\"\n            },\n            {\n                \"_id\": \"5e8a118cdf9ed11c1cc2de99\"\n            },\n            {\n                \"_id\": \"5e8a1d9373973e2554164b1c\"\n            },\n            {\n                \"_id\": \"5e8a206cd021d52aecca8cf7\"\n            },\n            {\n                \"_id\": \"5e8a20a81688d1074869b9d0\"\n            },\n            {\n                \"_id\": \"5e8a2100d56ea252c3860a16\"\n            },\n            {\n                \"_id\": \"5e8a29a7d56ea252c3860a18\"\n            },\n            {\n                \"_id\": \"5e8a29b152566818b8f6822f\"\n            },\n            {\n                \"_id\": \"5e8a29e97e47b03d0428d140\"\n            },\n            {\n                \"_id\": \"5e8a2a7aa8350f239c4b48a4\"\n            },\n            {\n                \"_id\": \"5e8a2a9af04fa83bd860fae7\"\n            },\n            {\n                \"_id\": \"5e8a4d8d7b6f286c4816cbe5\"\n            },\n            {\n                \"_id\": \"5e8a4f39b4d0ab6f38e74f0d\"\n            },\n            {\n                \"_id\": \"5e8a4f4db4d0ab6f38e74f0f\"\n            },\n            {\n                \"_id\": \"5e8a4f4fb4d0ab6f38e74f11\"\n            },\n            {\n                \"_id\": \"5e8a5bc7b2859207bf1fc2eb\"\n            },\n            {\n                \"_id\": \"5e8a5c53b2859207bf1fc2ed\"\n            },\n            {\n                \"_id\": \"5e8a5ce9ed210008a53e2f7b\"\n            },\n            {\n                \"_id\": \"5e8a6578834519135aea4399\"\n            },\n            {\n                \"_id\": \"5e8a65e3834519135aea439b\"\n            },\n            {\n                \"_id\": \"5e8a667c94163072d0c444fb\"\n            },\n            {\n                \"_id\": \"5e8a66b4fbb91d735d629352\"\n            },\n            {\n                \"_id\": \"5e8a66f8ae59df73fc63fbb7\"\n            },\n            {\n                \"_id\": \"5e8a67d4a4ae9f757d0dc54c\"\n            },\n            {\n                \"_id\": \"5e8a67eda4ae9f757d0dc54e\"\n            },\n            {\n                \"_id\": \"5e8a6b01ed210008a53e2f7f\"\n            },\n            {\n                \"_id\": \"5e8a9aaef30cd40c365b8cb8\",\n                \"devicesName\": \"Chrome\"\n            }\n        ]\n    },\n    \"followedUsers\": [],\n    \"tracks\": [],\n    \"ownedPlaylists\": [],\n    \"followedAlbums\": [],\n    \"_id\": \"5e80b341b19a24084cb9b7e7\",\n    \"email\": \"test29@test.com\",\n    \"name\": \"etsh\",\n    \"dateOfBirth\": \"1999-12-31T00:00:00.000Z\",\n    \"gender\": \"male\",\n    \"type\": \"artist\",\n    \"__v\": 35,\n    \"last_login\": \"2020-04-06T10:24:53.658Z\",\n    \"playlists\": [],\n    \"imageUrl\": \"http://zasymphonia.ddns.net/api/v1/images/users/default.png\"\n}"
						}
					]
				},
				{
					"name": "Get-User-Public-Profile",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}api/v1/me/5e812a3454660672fd699880",
							"host": [
								"{{URL}}api"
							],
							"path": [
								"v1",
								"me",
								"5e812a3454660672fd699880"
							]
						},
						"description": "## Get user Pfofile (public) \r\n Just get informations about the user .\r\n\r\n\r\n## Response Format\r\n  On success, the HTTP status code in the response header is 200 OK , the header status code is an error code and the response body contains an error object."
					},
					"response": [
						{
							"name": "Get-User-Public-Profile",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}api/v1/me/5e812a3454660672fd699880",
									"host": [
										"{{URL}}api"
									],
									"path": [
										"v1",
										"me",
										"5e812a3454660672fd699880"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "X-DNS-Prefetch-Control",
									"value": "off"
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=15552000; includeSubDomains"
								},
								{
									"key": "X-Download-Options",
									"value": "noopen"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-XSS-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "498"
								},
								{
									"key": "ETag",
									"value": "W/\"1f2-nPB95enFaK2vB+NulY9x5bgTGIo\""
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding"
								},
								{
									"key": "Date",
									"value": "Tue, 07 Apr 2020 21:18:03 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"followedUsers\": [\n        \"5e82a48054660672fd699883\",\n        \"5e8b6d866253cb184eaac150\"\n    ],\n    \"tracks\": [],\n    \"ownedPlaylists\": [\n        \"5e806865ef653f5a541e0b1d\",\n        \"5e8069722fcb0d35900c4d64\",\n        \"5e8078b0dbaafc18605cb029\",\n        \"5e8828df838d9835d207016d\"\n    ],\n    \"followedAlbums\": [\n        \"5e794163c01c024ecc3c31d3\"\n    ],\n    \"followedTracks\": [],\n    \"_id\": \"5e812a3454660672fd699880\",\n    \"email\": \"test1@test.com\",\n    \"name\": \"user1\",\n    \"dateOfBirth\": \"1999-06-25T00:00:00.000Z\",\n    \"gender\": \"female\",\n    \"type\": \"user\",\n    \"imageUrl\": \"https://zasymphonia.ddns.net/api/v1/images/users/default.png\"\n}"
						}
					]
				},
				{
					"name": "update user data",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"nigga\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}api/v1/me/",
							"host": [
								"{{URL}}api"
							],
							"path": [
								"v1",
								"me",
								""
							]
						}
					},
					"response": [
						{
							"name": "update all user data",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"email\": \"test25@test.com\",\n\t\"gender\": \"male\",\n\t\"dateOfBirth\": \"1999-05-31\",\n\t\"phone\": \"1216595487\",\n\t\"name\": \"nice\"\n\t\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}api/v1/me/",
									"host": [
										"{{URL}}api"
									],
									"path": [
										"v1",
										"me",
										""
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "X-DNS-Prefetch-Control",
									"value": "off"
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=15552000; includeSubDomains"
								},
								{
									"key": "X-Download-Options",
									"value": "noopen"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-XSS-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "X-RateLimit-Limit",
									"value": "1000"
								},
								{
									"key": "X-RateLimit-Remaining",
									"value": "999"
								},
								{
									"key": "Date",
									"value": "Mon, 06 Apr 2020 12:23:04 GMT"
								},
								{
									"key": "X-RateLimit-Reset",
									"value": "1586179275"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "ETag",
									"value": "W/\"746-uxb8H/QUWe6FQH1Ds6JLNTiPG+Q\""
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								}
							],
							"cookie": [],
							"body": "{\n    \"queue\": {\n        \"currentlyPlaying\": {\n            \"currentTrack\": \"http://ec2-54-197-122-205.compute-1.amazonaws.com/api/v1/me/player/tracks/5e7d2dc03429e24340ff1396\",\n            \"device\": \"5e8a6b01ed210008a53e2f7f\"\n        },\n        \"queueTracks\": [],\n        \"previousTrack\": null,\n        \"repeat\": false,\n        \"shuffle\": false,\n        \"play\": false,\n        \"repeatOnce\": false,\n        \"devices\": [\n            {\n                \"_id\": \"5e8a107fdf9ed11c1cc2de92\"\n            },\n            {\n                \"_id\": \"5e8a10c3df9ed11c1cc2de95\"\n            },\n            {\n                \"_id\": \"5e8a10cbd56ea252c3860a0a\"\n            },\n            {\n                \"_id\": \"5e8a113bdf9ed11c1cc2de97\"\n            },\n            {\n                \"_id\": \"5e8a1144d56ea252c3860a0c\"\n            },\n            {\n                \"_id\": \"5e8a1185d56ea252c3860a0e\"\n            },\n            {\n                \"_id\": \"5e8a118cdf9ed11c1cc2de99\"\n            },\n            {\n                \"_id\": \"5e8a1d9373973e2554164b1c\"\n            },\n            {\n                \"_id\": \"5e8a206cd021d52aecca8cf7\"\n            },\n            {\n                \"_id\": \"5e8a20a81688d1074869b9d0\"\n            },\n            {\n                \"_id\": \"5e8a2100d56ea252c3860a16\"\n            },\n            {\n                \"_id\": \"5e8a29a7d56ea252c3860a18\"\n            },\n            {\n                \"_id\": \"5e8a29b152566818b8f6822f\"\n            },\n            {\n                \"_id\": \"5e8a29e97e47b03d0428d140\"\n            },\n            {\n                \"_id\": \"5e8a2a7aa8350f239c4b48a4\"\n            },\n            {\n                \"_id\": \"5e8a2a9af04fa83bd860fae7\"\n            },\n            {\n                \"_id\": \"5e8a4d8d7b6f286c4816cbe5\"\n            },\n            {\n                \"_id\": \"5e8a4f39b4d0ab6f38e74f0d\"\n            },\n            {\n                \"_id\": \"5e8a4f4db4d0ab6f38e74f0f\"\n            },\n            {\n                \"_id\": \"5e8a4f4fb4d0ab6f38e74f11\"\n            },\n            {\n                \"_id\": \"5e8a5bc7b2859207bf1fc2eb\"\n            },\n            {\n                \"_id\": \"5e8a5c53b2859207bf1fc2ed\"\n            },\n            {\n                \"_id\": \"5e8a5ce9ed210008a53e2f7b\"\n            },\n            {\n                \"_id\": \"5e8a6578834519135aea4399\"\n            },\n            {\n                \"_id\": \"5e8a65e3834519135aea439b\"\n            },\n            {\n                \"_id\": \"5e8a667c94163072d0c444fb\"\n            },\n            {\n                \"_id\": \"5e8a66b4fbb91d735d629352\"\n            },\n            {\n                \"_id\": \"5e8a66f8ae59df73fc63fbb7\"\n            },\n            {\n                \"_id\": \"5e8a67d4a4ae9f757d0dc54c\"\n            },\n            {\n                \"_id\": \"5e8a67eda4ae9f757d0dc54e\"\n            },\n            {\n                \"_id\": \"5e8a6b01ed210008a53e2f7f\"\n            },\n            {\n                \"_id\": \"5e8a9aaef30cd40c365b8cb8\",\n                \"devicesName\": \"Chrome\"\n            }\n        ]\n    },\n    \"followedUsers\": [],\n    \"tracks\": [],\n    \"ownedPlaylists\": [],\n    \"followedAlbums\": [],\n    \"_id\": \"5e80b341b19a24084cb9b7e7\",\n    \"email\": \"test25@test.com\",\n    \"name\": \"nice\",\n    \"dateOfBirth\": \"1999-05-31T00:00:00.000Z\",\n    \"gender\": \"male\",\n    \"type\": \"artist\",\n    \"__v\": 35,\n    \"last_login\": \"2020-04-06T11:57:33.763Z\",\n    \"passwordChangedAt\": \"2020-03-29T16:53:43.598Z\",\n    \"playlists\": [],\n    \"imageUrl\": \"http://zasymphonia.ddns.net/api/v1/images/users/default.png\",\n    \"phone\": \"1216595487\"\n}"
						},
						{
							"name": "update one user data only",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"email\": \"test29@test.com\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}api/v1/me/",
									"host": [
										"{{URL}}api"
									],
									"path": [
										"v1",
										"me",
										""
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "X-DNS-Prefetch-Control",
									"value": "off"
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=15552000; includeSubDomains"
								},
								{
									"key": "X-Download-Options",
									"value": "noopen"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-XSS-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "X-RateLimit-Limit",
									"value": "1000"
								},
								{
									"key": "X-RateLimit-Remaining",
									"value": "998"
								},
								{
									"key": "Date",
									"value": "Mon, 06 Apr 2020 12:25:57 GMT"
								},
								{
									"key": "X-RateLimit-Reset",
									"value": "1586179275"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "ETag",
									"value": "W/\"746-QT/Lwpu/iZCGkQw+2ZTYZW+MuXg\""
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								}
							],
							"cookie": [],
							"body": "{\n    \"queue\": {\n        \"currentlyPlaying\": {\n            \"currentTrack\": \"http://ec2-54-197-122-205.compute-1.amazonaws.com/api/v1/me/player/tracks/5e7d2dc03429e24340ff1396\",\n            \"device\": \"5e8a6b01ed210008a53e2f7f\"\n        },\n        \"queueTracks\": [],\n        \"previousTrack\": null,\n        \"repeat\": false,\n        \"shuffle\": false,\n        \"play\": false,\n        \"repeatOnce\": false,\n        \"devices\": [\n            {\n                \"_id\": \"5e8a107fdf9ed11c1cc2de92\"\n            },\n            {\n                \"_id\": \"5e8a10c3df9ed11c1cc2de95\"\n            },\n            {\n                \"_id\": \"5e8a10cbd56ea252c3860a0a\"\n            },\n            {\n                \"_id\": \"5e8a113bdf9ed11c1cc2de97\"\n            },\n            {\n                \"_id\": \"5e8a1144d56ea252c3860a0c\"\n            },\n            {\n                \"_id\": \"5e8a1185d56ea252c3860a0e\"\n            },\n            {\n                \"_id\": \"5e8a118cdf9ed11c1cc2de99\"\n            },\n            {\n                \"_id\": \"5e8a1d9373973e2554164b1c\"\n            },\n            {\n                \"_id\": \"5e8a206cd021d52aecca8cf7\"\n            },\n            {\n                \"_id\": \"5e8a20a81688d1074869b9d0\"\n            },\n            {\n                \"_id\": \"5e8a2100d56ea252c3860a16\"\n            },\n            {\n                \"_id\": \"5e8a29a7d56ea252c3860a18\"\n            },\n            {\n                \"_id\": \"5e8a29b152566818b8f6822f\"\n            },\n            {\n                \"_id\": \"5e8a29e97e47b03d0428d140\"\n            },\n            {\n                \"_id\": \"5e8a2a7aa8350f239c4b48a4\"\n            },\n            {\n                \"_id\": \"5e8a2a9af04fa83bd860fae7\"\n            },\n            {\n                \"_id\": \"5e8a4d8d7b6f286c4816cbe5\"\n            },\n            {\n                \"_id\": \"5e8a4f39b4d0ab6f38e74f0d\"\n            },\n            {\n                \"_id\": \"5e8a4f4db4d0ab6f38e74f0f\"\n            },\n            {\n                \"_id\": \"5e8a4f4fb4d0ab6f38e74f11\"\n            },\n            {\n                \"_id\": \"5e8a5bc7b2859207bf1fc2eb\"\n            },\n            {\n                \"_id\": \"5e8a5c53b2859207bf1fc2ed\"\n            },\n            {\n                \"_id\": \"5e8a5ce9ed210008a53e2f7b\"\n            },\n            {\n                \"_id\": \"5e8a6578834519135aea4399\"\n            },\n            {\n                \"_id\": \"5e8a65e3834519135aea439b\"\n            },\n            {\n                \"_id\": \"5e8a667c94163072d0c444fb\"\n            },\n            {\n                \"_id\": \"5e8a66b4fbb91d735d629352\"\n            },\n            {\n                \"_id\": \"5e8a66f8ae59df73fc63fbb7\"\n            },\n            {\n                \"_id\": \"5e8a67d4a4ae9f757d0dc54c\"\n            },\n            {\n                \"_id\": \"5e8a67eda4ae9f757d0dc54e\"\n            },\n            {\n                \"_id\": \"5e8a6b01ed210008a53e2f7f\"\n            },\n            {\n                \"_id\": \"5e8a9aaef30cd40c365b8cb8\",\n                \"devicesName\": \"Chrome\"\n            }\n        ]\n    },\n    \"followedUsers\": [],\n    \"tracks\": [],\n    \"ownedPlaylists\": [],\n    \"followedAlbums\": [],\n    \"_id\": \"5e80b341b19a24084cb9b7e7\",\n    \"email\": \"test29@test.com\",\n    \"name\": \"etsh\",\n    \"dateOfBirth\": \"1999-05-31T00:00:00.000Z\",\n    \"gender\": \"male\",\n    \"type\": \"artist\",\n    \"__v\": 35,\n    \"last_login\": \"2020-04-06T11:57:33.763Z\",\n    \"passwordChangedAt\": \"2020-03-29T16:53:43.598Z\",\n    \"playlists\": [],\n    \"imageUrl\": \"http://zasymphonia.ddns.net/api/v1/images/users/default.png\",\n    \"phone\": \"1216595487\"\n}"
						}
					]
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Devices",
			"item": [
				{
					"name": "Delete-Device",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"deviceId\": \"5e88ef4d54142e3db4d01ee5\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/me/player/devices",
							"host": [
								"{{URL}}"
							],
							"path": [
								"me",
								"player",
								"devices"
							]
						},
						"description": "## Delete user device \r\n just delete the user device from the devices list when the user disconnect .\r\n\r\n## Response Format\r\n  On success, the HTTP status code in the response header is 204 no content, the header status code is an error code and the response body contains an error object."
					},
					"response": [
						{
							"name": "Delete-Device",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"deviceId\": \"5e88ef4d54142e3db4d01ee5\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/me/player/devices",
									"host": [
										"{{URL}}"
									],
									"path": [
										"me",
										"player",
										"devices"
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "X-DNS-Prefetch-Control",
									"value": "off"
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=15552000; includeSubDomains"
								},
								{
									"key": "X-Download-Options",
									"value": "noopen"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-XSS-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "X-RateLimit-Limit",
									"value": "1000"
								},
								{
									"key": "X-RateLimit-Remaining",
									"value": "965"
								},
								{
									"key": "Date",
									"value": "Sun, 05 Apr 2020 14:24:13 GMT"
								},
								{
									"key": "X-RateLimit-Reset",
									"value": "1586097230"
								},
								{
									"key": "ETag",
									"value": "W/\"d-XXcxLjB/sjfS0AB6+CxvXcLGrm4\""
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Put-Device",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"device\": \"Safari\" \n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/api/v1/me/player/devices",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"me",
								"player",
								"devices"
							]
						},
						"description": "## Patch user queue to be add devices list\r\n Just add new device to the user devices list  .\r\n\r\n## Response Format\r\n  On success, the HTTP status code in the response header is 204 no content, the header status code is an error code and the response body contains an error object."
					},
					"response": [
						{
							"name": "Put-Device",
							"originalRequest": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"device\": \"Safari\" \n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/api/v1/me/player/devices",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"me",
										"player",
										"devices"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "X-DNS-Prefetch-Control",
									"value": "off"
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=15552000; includeSubDomains"
								},
								{
									"key": "X-Download-Options",
									"value": "noopen"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-XSS-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "X-RateLimit-Limit",
									"value": "1000"
								},
								{
									"key": "X-RateLimit-Remaining",
									"value": "989"
								},
								{
									"key": "Date",
									"value": "Sun, 05 Apr 2020 14:08:24 GMT"
								},
								{
									"key": "X-RateLimit-Reset",
									"value": "1586097230"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "688"
								},
								{
									"key": "ETag",
									"value": "W/\"2b0-fe03BNM2WCL0CMZO+PDjW3BFQpE\""
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"devices\": [\n        {\n            \"_id\": \"5e88eea554142e3db4d01edb\",\n            \"devicesName\": \"Chrome\"\n        },\n        {\n            \"_id\": \"5e88eee7d56ea252c38609f9\",\n            \"devicesName\": \"Chrome\"\n        },\n        {\n            \"_id\": \"5e88eef254142e3db4d01edf\",\n            \"devicesName\": \"Chrome\"\n        },\n \n        {\n            \"_id\": \"5e88ef4d54142e3db4d01ee5\",\n            \"devicesName\": \"Chrome\"\n        },\n        {\n            \"_id\": \"5e89e659a879619b50cb8c4c\",\n            \"devicesName\": \"Safari\"\n        }\n    ]\n}"
						}
					]
				},
				{
					"name": "Get-Devices",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}/me/player/devices",
							"host": [
								"{{URL}}"
							],
							"path": [
								"me",
								"player",
								"devices"
							]
						},
						"description": "## Get user queue devices list\r\n Just return devices list of user current queue  .\r\n\r\n## Response Format\r\n  On success, the HTTP status code in the response header is 200 OK , the header status code is an error code and the response body contains an error object."
					},
					"response": [
						{
							"name": "Get-Devices",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}/me/player/devices",
									"host": [
										"{{URL}}"
									],
									"path": [
										"me",
										"player",
										"devices"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "X-DNS-Prefetch-Control",
									"value": "off"
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=15552000; includeSubDomains"
								},
								{
									"key": "X-Download-Options",
									"value": "noopen"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-XSS-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "X-RateLimit-Limit",
									"value": "1000"
								},
								{
									"key": "X-RateLimit-Remaining",
									"value": "984"
								},
								{
									"key": "Date",
									"value": "Sun, 05 Apr 2020 14:14:21 GMT"
								},
								{
									"key": "X-RateLimit-Reset",
									"value": "1586097230"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "685"
								},
								{
									"key": "ETag",
									"value": "W/\"2ad-rqZEEu9LYKdpPkawmPyjKFH92YQ\""
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"data\": [\n        {\n            \"_id\": \"5e88eea554142e3db4d01edb\",\n            \"devicesName\": \"Chrome\"\n        },\n        {\n            \"_id\": \"5e88eee7d56ea252c38609f9\",\n            \"devicesName\": \"Chrome\"\n        },\n        {\n            \"_id\": \"5e88eef254142e3db4d01edf\",\n            \"devicesName\": \"Chrome\"\n        },\n        {\n            \"_id\": \"5e88ef4d54142e3db4d01ee5\",\n            \"devicesName\": \"Chrome\"\n        },\n        {\n            \"_id\": \"5e89e659a879619b50cb8c4c\",\n            \"devicesName\": \"Safari\"\n        }\n    ]\n}"
						}
					]
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "267dd67b-c3e1-4db6-ad6c-7845b37c8a41",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "9f627c1e-01e4-49ff-a6c6-16166a69b1da",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"protocolProfileBehavior": {}
}