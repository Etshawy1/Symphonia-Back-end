{
	"info": {
		"_postman_id": "a8e36ff4-890f-4487-91e4-01ab00a3e324",
		"name": "Symphonia",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Album",
			"item": [
				{
					"name": "Get an Album's Tracks",
					"request": {
						"method": "GET",
						"header": [
							{
								"description": "*Required*. A valid access token from the Symphonia Accounts service.\n",
								"key": "Authorization",
								"type": "text",
								"value": ""
							}
						],
						"url": {
							"raw": "{{URL}}api/v1/albums/:{id}/tracks?limit&offset&market",
							"host": [
								"{{URL}}api"
							],
							"path": [
								"v1",
								"albums",
								":{id}",
								"tracks"
							],
							"query": [
								{
									"key": "limit",
									"value": null,
									"description": "*Optional*. The maximum number of tracks to return. Default: 20. Minimum: 1. Maximum: 50."
								},
								{
									"key": "offset",
									"value": null,
									"description": "*Optional*. The index of the first track to return. Default: 0 (the first object). Use with limit to get the next set of tracks."
								},
								{
									"key": "market",
									"value": null,
									"description": "*Optional*. An ISO 3166-1 alpha-2 country code or the string from_token. Provide this parameter if you want to apply Track Relinking."
								}
							],
							"variable": [
								{
									"description": "The Symphonia ID for the album.",
									"key": "{id}",
									"value": ""
								}
							]
						},
						"description": "# Description\r\nGet Symphonia catalog information about an album’s tracks. Optional parameters can be used to limit the number of tracks returned.\r\n\r\n## Response Format \r\nOn success, the HTTP status code in the response header is `200` OK and the response body contains an array of track objects (wrapped in a paging object) in JSON format. On error, the header status code is an error code and the response body contains an error object. \r\n\r\n### track object\r\n\r\n<table>\r\n  <thead>\r\n    <tr>\r\n      <th>Key</th>\r\n      <th>Value Type</th>\r\n      <th>Value Description</th>\r\n    </tr>\r\n  </thead>\r\n  <tbody>\r\n    <tr>\r\n      <td>album</td>\r\n      <td>an album object</a></td>\r\n      <td>The album on which the track appears. The album object includes a link in <code class=\"highlighter-rouge\">href</code> to full information about the album.</td>\r\n    </tr>\r\n    <tr>\r\n      <td>artists</td>\r\n      <td>an array of artist objects</td>\r\n      <td>The artists who performed the track. Each artist object includes a link in <code class=\"highlighter-rouge\">href</code> to more detailed information about the artist.</td>\r\n    </tr>\r\n    <tr>\r\n      <td>available_markets</td>\r\n      <td>array of strings</td>\r\n      <td>A list of the countries in which the track can be played, identified by their <a href=\"http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2\">ISO 3166-1 alpha-2</a> code.</td>\r\n    </tr>\r\n    <tr>\r\n      <td>duration_ms</td>\r\n      <td>integer</td>\r\n      <td>The track length in milliseconds.</td>\r\n    </tr>\r\n    <tr>\r\n      <td>explicit</td>\r\n      <td>Boolean</td>\r\n      <td>Whether or not the track has explicit lyrics ( <code class=\"highlighter-rouge\">true</code> = yes it does; <code class=\"highlighter-rouge\">false</code> = no it does not OR unknown).</td>\r\n    </tr>\r\n    <tr>\r\n      <td>href</td>\r\n      <td>string</td>\r\n      <td>A link to the Web API endpoint providing full details of the track.</td>\r\n    </tr>\r\n    <tr>\r\n      <td>id</td>\r\n      <td>string</td>\r\n      <td>The Symphonia ID for the track.</td>\r\n    </tr>\r\n    <tr>\r\n      <td>name</td>\r\n      <td>string</td>\r\n      <td>The name of the track.</td>\r\n    </tr>\r\n    <tr>\r\n      <td>popularity</td>\r\n      <td>integer</td>\r\n      <td>The popularity of the track. The value will be between 0 and 100, with 100 being the most popular.<br />The popularity of a track is a value between 0 and 100, with 100 being the most popular. The popularity is calculated by algorithm and is based, in the most part, on the total number of plays the track has had and how recent those plays are.</td>\r\n    </tr>\r\n    <tr>\r\n      <td>type</td>\r\n      <td>string</td>\r\n      <td>The object type: “track”.</td>\r\n    </tr>\r\n  </tbody>\r\n</table>\r\n\r\n### paging object\r\n\r\n<table>\r\n  <thead>\r\n    <tr>\r\n      <th>Key</th>\r\n      <th>Value Type</th>\r\n      <th>Value Description</th>\r\n    </tr>\r\n  </thead>\r\n  <tbody>\r\n    <tr>\r\n      <td>href</td>\r\n      <td>string</td>\r\n      <td>A link to the Web API endpoint returning the full result of the request.</td>\r\n    </tr>\r\n    <tr>\r\n      <td>items</td>\r\n      <td>an array of objects</td>\r\n      <td>The requested data.</td>\r\n    </tr>\r\n    <tr>\r\n      <td>limit</td>\r\n      <td>integer</td>\r\n      <td>The maximum number of items in the response (as set in the query or by default).</td>\r\n    </tr>\r\n    <tr>\r\n      <td>next</td>\r\n      <td>string</td>\r\n      <td>URL to the next page of items. ( <code class=\"highlighter-rouge\">null</code> if none)</td>\r\n    </tr>\r\n    <tr>\r\n      <td>offset</td>\r\n      <td>integer</td>\r\n      <td>The offset of the items returned (as set in the query or by default).</td>\r\n    </tr>\r\n    <tr>\r\n      <td>previous</td>\r\n      <td>string</td>\r\n      <td>URL to the previous page of items. ( <code class=\"highlighter-rouge\">null</code> if none)</td>\r\n    </tr>\r\n    <tr>\r\n      <td>total</td>\r\n      <td>integer</td>\r\n      <td>The total number of items available to return.</td>\r\n    </tr>\r\n  </tbody>\r\n</table>\r\n\r\n<br>\r\n\r\n## Request parameters"
					},
					"response": [
						{
							"name": "Get an Album's Tracks",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {your access token}",
										"description": "*Required*. A valid access token from the Symphonia Accounts service.\n",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{URL}}api/v1/albums/:{id}/tracks?limit=2",
									"host": [
										"{{URL}}api"
									],
									"path": [
										"v1",
										"albums",
										":{id}",
										"tracks"
									],
									"query": [
										{
											"key": "limit",
											"value": "2",
											"description": "Optional. The maximum number of tracks to return. Default: 20. Minimum: 1. Maximum: 50."
										}
									],
									"variable": [
										{
											"key": "{id}",
											"value": "6akEvsycLGftJxYudPjmqK",
											"description": "The Symphonia ID for the album."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\r\n  \"href\": \"https://api.symphonia.com/v1/albums/6akEvsycLGftJxYudPjmqK/tracks?offset=0&limit=2\",\r\n  \"items\": [ {\r\n    \"artists\": [ {\r\n      \"href\": \"https://api.symphonia.com/v1/artists/08td7MxkoHQkXnWAYD8d6Q\",\r\n      \"id\": \"08td7MxkoHQkXnWAYD8d6Q\",\r\n      \"name\": \"Tania Bowra\",\r\n      \"type\": \"artist\"\r\n    } ],\r\n    \"available_markets\": [ \"AD\", \"AR\", \"AT\", \"AU\", \"BE\", \"BG\", \"BO\", \"BR\", \"CA\", \"CH\", \"CL\", \"CO\", \"CR\", \"CY\", \"CZ\", \"DE\", \"DK\", \"DO\", \"EC\", \"EE\", \"ES\", \"FI\", \"FR\", \"GB\", \"GR\", \"GT\", \"HK\", \"HN\", \"HU\", \"IE\", \"IS\", \"IT\", \"LI\", \"LT\", \"LU\", \"LV\", \"MC\", \"MT\", \"MX\", \"MY\", \"NI\", \"NL\", \"NO\", \"NZ\", \"PA\", \"PE\", \"PH\", \"PL\", \"PT\", \"PY\", \"RO\", \"SE\", \"SG\", \"SI\", \"SK\", \"SV\", \"TR\", \"TW\", \"US\", \"UY\" ],\r\n    \"duration_ms\": 276773,\r\n    \"explicit\": false,\r\n    \"href\": \"https://api.symphonia.com/v1/tracks/2TpxZ7JUBn3uw46aR7qd6V\",\r\n    \"id\": \"2TpxZ7JUBn3uw46aR7qd6V\",\r\n    \"name\": \"All I Want\",\r\n    \"type\": \"track\"\r\n  }, {\r\n    \"artists\": [ {\r\n      \"href\": \"https://api.symphonia.com/v1/artists/08td7MxkoHQkXnWAYD8d6Q\",\r\n      \"id\": \"08td7MxkoHQkXnWAYD8d6Q\",\r\n      \"name\": \"Tania Bowra\",\r\n      \"type\": \"artist\"\r\n    } ],\r\n    \"available_markets\": [ \"AD\", \"AR\", \"AT\", \"AU\", \"BE\", \"BG\", \"BO\", \"BR\", \"CA\", \"CH\", \"CL\", \"CO\", \"CR\", \"CY\", \"CZ\", \"DE\", \"DK\", \"DO\", \"EC\", \"EE\", \"ES\", \"FI\", \"FR\", \"GB\", \"GR\", \"GT\", \"HK\", \"HN\", \"HU\", \"IE\", \"IS\", \"IT\", \"LI\", \"LT\", \"LU\", \"LV\", \"MC\", \"MT\", \"MX\", \"MY\", \"NI\", \"NL\", \"NO\", \"NZ\", \"PA\", \"PE\", \"PH\", \"PL\", \"PT\", \"PY\", \"RO\", \"SE\", \"SG\", \"SI\", \"SK\", \"SV\", \"TR\", \"TW\", \"US\", \"UY\" ],\r\n    \"duration_ms\": 247680,\r\n    \"explicit\": false,\r\n    \"href\": \"https://api.symphonia.com/v1/tracks/4PjcfyZZVE10TFd9EKA72r\",\r\n    \"id\": \"4PjcfyZZVE10TFd9EKA72r\",\r\n    \"name\": \"Someday\",\r\n    \"type\": \"track\"\r\n  } ],\r\n  \"limit\": 2,\r\n  \"next\": \"https://api.symphonia.com/v1/albums/6akEvsycLGftJxYudPjmqK/tracks?offset=2&limit=2\",\r\n  \"offset\": 0,\r\n  \"previous\": null,\r\n  \"total\": 11\r\n}\r\n"
						}
					]
				},
				{
					"name": "Get an Album",
					"request": {
						"method": "GET",
						"header": [
							{
								"description": "*Required*. A valid access token from the Symphonia Accounts service.\n",
								"key": "Authorization",
								"type": "text",
								"value": ""
							}
						],
						"url": {
							"raw": "{{URL}}api/v1/users/albums/:{id}?market",
							"host": [
								"{{URL}}api"
							],
							"path": [
								"v1",
								"users",
								"albums",
								":{id}"
							],
							"query": [
								{
									"key": "market",
									"value": null,
									"description": "*Optional*. An ISO 3166-1 alpha-2 country code or the string from_token. "
								}
							],
							"variable": [
								{
									"description": "The Symphonia ID for the album.",
									"key": "{id}",
									"value": ""
								}
							]
						},
						"description": "# Description\nGet Symphonia catalog information for a single album.\n\n## Response Format \nOn success, the HTTP status code in the response header is `200` OK and the response body contains an album object in JSON format. On error, the header status code is an error code and the response body contains an error object. \n\n\n### album object\n\n<table>\n  <thead>\n    <tr>\n      <th>Key</th>\n      <th>Value Type</th>\n      <th>Value Description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>album_type</td>\n      <td>string</td>\n      <td>The type of the album: one of <code class=\"highlighter-rouge\">\"album\"</code> , <code class=\"highlighter-rouge\">\"single\"</code> , or <code class=\"highlighter-rouge\">\"compilation\"</code>.</td>\n    </tr>\n    <tr>\n      <td>artists</td>\n      <td>array of artist objects</td>\n      <td>The artists of the album. Each artist object includes a link in <code class=\"highlighter-rouge\">href</code> to more detailed information about the artist.</td>\n    </tr>\n    <tr>\n      <td>available_markets</td>\n      <td>array of strings</td>\n      <td>The markets in which the album is available: <a href=\"http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2\">ISO 3166-1 alpha-2 country codes</a>. Note that an album is considered available in a market when at least 1 of its tracks is available in that market.</td>\n    </tr>\n    <tr>\n      <td>copyrights</td>\n      <td>array of copyright objects</td>\n      <td>The copyright statements of the album.</td>\n    </tr>\n    <tr>\n      <td>genres</td>\n      <td>array of strings</td>\n      <td>A list of the genres used to classify the album. For example: <code class=\"highlighter-rouge\">\"Prog Rock\"</code> , <code class=\"highlighter-rouge\">\"Post-Grunge\"</code>. (If not yet classified, the array is empty.)</td>\n    </tr>\n    <tr>\n      <td>href</td>\n      <td>string</td>\n      <td>A link to the Web API endpoint providing full details of the album.</td>\n    </tr>\n    <tr>\n      <td>id</td>\n      <td>string</td>\n      <td>The Symphonia ID for the album.</td>\n    </tr>\n    <tr>\n      <td>images</td>\n      <td>array of image objects</td>\n      <td>The cover art for the album in various sizes, widest first.</td>\n    </tr>\n    <tr>\n      <td>label</td>\n      <td>string</td>\n      <td>The label for the album.</td>\n    </tr>\n    <tr>\n      <td>name</td>\n      <td>string</td>\n      <td>The name of the album. In case of an album takedown, the value may be an empty string.</td>\n    </tr>\n    <tr>\n      <td>popularity</td>\n      <td>integer</td>\n      <td>The popularity of the album. The value will be between 0 and 100, with 100 being the most popular. The popularity is calculated from the popularity of the album’s individual tracks.</td>\n    </tr>\n    <tr>\n      <td>release_date</td>\n      <td>string</td>\n      <td>The date the album was first released, for example <code class=\"highlighter-rouge\">\"1981-12-15\"</code>. Depending on the precision, it might be shown as <code class=\"highlighter-rouge\">\"1981\"</code> or <code class=\"highlighter-rouge\">\"1981-12\"</code>.</td>\n    </tr>\n    <tr>\n      <td>release_date_precision</td>\n      <td>string</td>\n      <td>The precision with which <code class=\"highlighter-rouge\">release_date</code> value is known: <code class=\"highlighter-rouge\">\"year\"</code> , <code class=\"highlighter-rouge\">\"month\"</code> , or <code class=\"highlighter-rouge\">\"day\"</code>.</td>\n    </tr>\n    <tr>\n      <td>tracks</td>\n      <td>array of track objects inside a paging object</td>\n      <td>The tracks of the album.</td>\n    </tr>\n    <tr>\n      <td>type</td>\n      <td>string</td>\n      <td>The object type: “album”</td>\n    </tr>\n  </tbody>\n</table>\n\n<br>\n\n## Request parameters"
					},
					"response": [
						{
							"name": "Get an Album",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {your access token}",
										"description": "*Required*. A valid access token from the Symphonia Accounts service.\n",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{URL}}api/v1/users/albums/:{id}",
									"host": [
										"{{URL}}api"
									],
									"path": [
										"v1",
										"users",
										"albums",
										":{id}"
									],
									"variable": [
										{
											"key": "{id}",
											"value": "0sNOF9WDwhWunNAHPD3Baj",
											"description": "The Symphonia ID for the album."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\r\n  \"album_type\" : \"album\",\r\n  \"artists\" : [ {\r\n    \"href\" : \"https://api.symphonia.com/v1/artists/2BTZIqw0ntH9MvilQ3ewNY\",\r\n    \"id\" : \"2BTZIqw0ntH9MvilQ3ewNY\",\r\n    \"name\" : \"Cyndi Lauper\",\r\n    \"type\" : \"artist\"\r\n  } ],\r\n  \"available_markets\" : [ \"AD\", \"AR\", \"AT\", \"AU\", \"BE\", \"BG\", \"BO\", \"BR\", \"CA\", \"CH\", \"CL\", \"CO\", \"CR\", \"CY\", \"CZ\", \"DE\", \"DK\", \"DO\", \"EC\", \"EE\", \"ES\", \"FI\", \"FR\", \"GB\", \"GR\", \"GT\", \"HK\", \"HN\", \"HU\", \"IE\", \"IS\", \"IT\", \"LI\", \"LT\", \"LU\", \"LV\", \"MC\", \"MT\", \"MX\", \"MY\", \"NI\", \"NL\", \"NO\", \"NZ\", \"PA\", \"PE\", \"PH\", \"PT\", \"PY\", \"RO\", \"SE\", \"SG\", \"SI\", \"SK\", \"SV\", \"TW\", \"UY\" ],\r\n  \"copyrights\" : [ {\r\n    \"text\" : \"(P) 2000 Sony Music Entertainment Inc.\",\r\n    \"type\" : \"P\"\r\n  } ],\r\n  \"genres\" : [ ],\r\n  \"href\" : \"https://api.symphonia.com/v1/albums/0sNOF9WDwhWunNAHPD3Baj\",\r\n  \"id\" : \"0sNOF9WDwhWunNAHPD3Baj\",\r\n  \"images\" : [ {\r\n    \"height\" : 640,\r\n    \"url\" : \"https://i.scdn.co/image/07c323340e03e25a8e5dd5b9a8ec72b69c50089d\",\r\n    \"width\" : 640\r\n  }, {\r\n    \"height\" : 300,\r\n    \"url\" : \"https://i.scdn.co/image/8b662d81966a0ec40dc10563807696a8479cd48b\",\r\n    \"width\" : 300\r\n  }, {\r\n    \"height\" : 64,\r\n    \"url\" : \"https://i.scdn.co/image/54b3222c8aaa77890d1ac37b3aaaa1fc9ba630ae\",\r\n    \"width\" : 64\r\n  } ],\r\n  \"name\" : \"She's So Unusual\",\r\n  \"popularity\" : 39,\r\n  \"release_date\" : \"1983\",\r\n  \"release_date_precision\" : \"year\",\r\n  \"tracks\" : {\r\n    \"href\" : \"https://api.symphonia.com/v1/albums/0sNOF9WDwhWunNAHPD3Baj/tracks?offset=0&limit=50\",\r\n    \"items\" : [ {\r\n      \"artists\" : [ {\r\n        \"href\" : \"https://api.symphonia.com/v1/artists/2BTZIqw0ntH9MvilQ3ewNY\",\r\n        \"id\" : \"2BTZIqw0ntH9MvilQ3ewNY\",\r\n        \"name\" : \"Cyndi Lauper\",\r\n        \"type\" : \"artist\"\r\n      } ],\r\n      \"available_markets\" : [ \"AD\", \"AR\", \"AT\", \"AU\", \"BE\", \"BG\", \"BO\", \"BR\", \"CA\", \"CH\", \"CL\", \"CO\", \"CR\", \"CY\", \"CZ\", \"DE\", \"DK\", \"DO\", \"EC\", \"EE\", \"ES\", \"FI\", \"FR\", \"GB\", \"GR\", \"GT\", \"HK\", \"HN\", \"HU\", \"IE\", \"IS\", \"IT\", \"LI\", \"LT\", \"LU\", \"LV\", \"MC\", \"MT\", \"MX\", \"MY\", \"NI\", \"NL\", \"NO\", \"NZ\", \"PA\", \"PE\", \"PH\", \"PT\", \"PY\", \"RO\", \"SE\", \"SG\", \"SI\", \"SK\", \"SV\", \"TW\", \"UY\" ],\r\n      \"duration_ms\" : 305560,\r\n      \"explicit\" : false,\r\n      \"href\" : \"https://api.symphonia.com/v1/tracks/3f9zqUnrnIq0LANhmnaF0V\",\r\n      \"id\" : \"3f9zqUnrnIq0LANhmnaF0V\",\r\n      \"name\" : \"Money Changes Everything\",\r\n      \"type\" : \"track\"\r\n    }, {\r\n      ...\r\n    } ],\r\n    \"limit\" : 50,\r\n    \"next\" : null,\r\n    \"offset\" : 0,\r\n    \"previous\" : null,\r\n    \"total\" : 13\r\n  },\r\n  \"type\" : \"album\"\r\n}"
						}
					]
				},
				{
					"name": "Create Album",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "",
								"description": "*Required*. A valid access token from the Symphonia Accounts service",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": "*Required*. The content type of the request body:",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{URL}}api/v1/albums",
							"host": [
								"{{URL}}api"
							],
							"path": [
								"v1",
								"albums"
							]
						},
						"description": "# Description\nCreate an Album for a Symphonia Artist. (The Album will be empty until you add tracks.)\n\n## Response Format \nOn success, the response body contains the created Album object in JSON format and the HTTP status code in the response header is `200` OK or `201` Created.\nOn error, the header status code is an error code and the response body contains an error object. Trying to create a playlist when you do not have the Artist’s authorization returns error `403` Forbidden.\n\n### album object\n\n<table>\n  <thead>\n    <tr>\n      <th>Key</th>\n      <th>Value Type</th>\n      <th>Value Description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>album_type</td>\n      <td>string</td>\n      <td>The type of the album: one of <code class=\"highlighter-rouge\">\"album\"</code> , <code class=\"highlighter-rouge\">\"single\"</code> , or <code class=\"highlighter-rouge\">\"compilation\"</code>.</td>\n    </tr>\n    <tr>\n      <td>artists</td>\n      <td>array of artist objects</td>\n      <td>The artists of the album. Each artist object includes a link in <code class=\"highlighter-rouge\">href</code> to more detailed information about the artist.</td>\n    </tr>\n    <tr>\n      <td>available_markets</td>\n      <td>array of strings</td>\n      <td>The markets in which the album is available: <a href=\"http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2\">ISO 3166-1 alpha-2 country codes</a>. Note that an album is considered available in a market when at least 1 of its tracks is available in that market.</td>\n    </tr>\n    <tr>\n      <td>copyrights</td>\n      <td>array of copyright objects</td>\n      <td>The copyright statements of the album.</td>\n    </tr>\n    <tr>\n      <td>genres</td>\n      <td>array of strings</td>\n      <td>A list of the genres used to classify the album. For example: <code class=\"highlighter-rouge\">\"Prog Rock\"</code> , <code class=\"highlighter-rouge\">\"Post-Grunge\"</code>. (If not yet classified, the array is empty.)</td>\n    </tr>\n    <tr>\n      <td>href</td>\n      <td>string</td>\n      <td>A link to the Web API endpoint providing full details of the album.</td>\n    </tr>\n    <tr>\n      <td>id</td>\n      <td>string</td>\n      <td>The Symphonia ID for the album.</td>\n    </tr>\n    <tr>\n      <td>images</td>\n      <td>array of image objects</td>\n      <td>The cover art for the album in various sizes, widest first.</td>\n    </tr>\n    <tr>\n      <td>label</td>\n      <td>string</td>\n      <td>The label for the album.</td>\n    </tr>\n    <tr>\n      <td>name</td>\n      <td>string</td>\n      <td>The name of the album. In case of an album takedown, the value may be an empty string.</td>\n    </tr>\n    <tr>\n      <td>popularity</td>\n      <td>integer</td>\n      <td>The popularity of the album. The value will be between 0 and 100, with 100 being the most popular. The popularity is calculated from the popularity of the album’s individual tracks.</td>\n    </tr>\n    <tr>\n      <td>release_date</td>\n      <td>string</td>\n      <td>The date the album was first released, for example <code class=\"highlighter-rouge\">\"1981-12-15\"</code>. Depending on the precision, it might be shown as <code class=\"highlighter-rouge\">\"1981\"</code> or <code class=\"highlighter-rouge\">\"1981-12\"</code>.</td>\n    </tr>\n    <tr>\n      <td>release_date_precision</td>\n      <td>string</td>\n      <td>The precision with which <code class=\"highlighter-rouge\">release_date</code> value is known: <code class=\"highlighter-rouge\">\"year\"</code> , <code class=\"highlighter-rouge\">\"month\"</code> , or <code class=\"highlighter-rouge\">\"day\"</code>.</td>\n    </tr>\n    <tr>\n      <td>tracks</td>\n      <td>array of track objects inside a paging object</td>\n      <td>The tracks of the album.</td>\n    </tr>\n    <tr>\n      <td>type</td>\n      <td>string</td>\n      <td>The object type: “album”</td>\n    </tr>\n  </tbody>\n</table>\n\n<br>\n\n## Request parameters\n\n### Body Parameters\n\n<table>\n  <thead>\n    <tr>\n      <th>Request Body Data</th>\n      <th>Value Type</th>\n      <th>Value</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>Artists</td>\n      <td>array of artists ids</td>\n      <td><em>Required</em>. The `ids` for the album artists, for example <code class=\"highlighter-rouge\">{\"ids\":[\"sdfSDFW234sdF\", \"SDFHWfsd34DFsgw\"]</code> .</td>\n    </tr>\n    <tr>\n      <td>name</td>\n      <td>string</td>\n      <td><em>Required</em>. The name for the new Album, for example <code class=\"highlighter-rouge\">\"Crimewave\"</code> . This name does not need to be unique.</td>\n    </tr>\n    <tr>\n      <td>available_markets</td>\n      <td>array of strings</td>\n      <td>The markets in which the album is available: <a href=\"http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2\">ISO 3166-1 alpha-2 country codes</a>. Note that an album is considered available in a market when at least 1 of its tracks is available in that market.</td>\n    </tr>\n    <tr>\n      <td>copyrights</td>\n      <td>array of copyright objects</td>\n      <td>The copyright statements of the album.</td>\n    </tr>\n    <tr>\n      <td>genres</td>\n      <td>array of strings</td>\n      <td>A list of the genres used to classify the album. For example: <code class=\"highlighter-rouge\">\"Prog Rock\"</code> , <code class=\"highlighter-rouge\">\"Post-Grunge\"</code>. (If not yet classified, the array is empty.)</td>\n    </tr>\n    <tr>\n      <td>image</td>\n      <td>jpeg image</td>\n      <td>The cover art for the album.</td>\n    </tr>\n    <tr>\n      <td>label</td>\n      <td>string</td>\n      <td>The label for the album.</td>\n    </tr>\n    <tr>\n      <td>release_date</td>\n      <td>string</td>\n      <td>The date the album was first released, for example <code class=\"highlighter-rouge\">\"1981-12-15\"</code>. Depending on the precision, it might be shown as <code class=\"highlighter-rouge\">\"1981\"</code> or <code class=\"highlighter-rouge\">\"1981-12\"</code>.</td>\n    </tr>\n    <tr>\n      <td>release_date_precision</td>\n      <td>string</td>\n      <td>The precision with which <code class=\"highlighter-rouge\">release_date</code> value is known: <code class=\"highlighter-rouge\">\"year\"</code> , <code class=\"highlighter-rouge\">\"month\"</code> , or <code class=\"highlighter-rouge\">\"day\"</code>.</td>\n    </tr>\n  </tbody>\n</table>\n<br>"
					},
					"response": []
				},
				{
					"name": "Get Several Albums",
					"request": {
						"method": "GET",
						"header": [
							{
								"description": "*Required*. A valid access token from the Symphonia Accounts service.\n",
								"key": "Authorization",
								"type": "text",
								"value": ""
							}
						],
						"url": {
							"raw": "{{URL}}api/v1/albums?ids=&market=",
							"host": [
								"{{URL}}api"
							],
							"path": [
								"v1",
								"albums"
							],
							"query": [
								{
									"key": "ids",
									"value": "",
									"description": "*Required*. A comma-separated list of the Symphonia IDs for the albums. Maximum: 20 IDs.\n"
								},
								{
									"key": "market",
									"value": "",
									"description": "*Optional*. An ISO 3166-1 alpha-2 country code or the string from_token."
								}
							]
						},
						"description": "# Description\r\nGet Symphonia catalog information for multiple albums identified by their Symphonia IDs.\r\n\r\n## Response Format\r\n\r\nOn success, the HTTP status code in the response header is `200` OK and the response body contains an object whose key is `\"albums\"` and whose value is an array of album objects in JSON format. \r\nObjects are returned in the order requested. If an object is not found, a `null` value is returned in the appropriate position. Duplicate `ids` in the query will result in duplicate objects in the response. On error, the header status code is an error code and the response body contains an error object.\r\n\r\n### album object\r\n\r\n<table>\r\n  <thead>\r\n    <tr>\r\n      <th>Key</th>\r\n      <th>Value Type</th>\r\n      <th>Value Description</th>\r\n    </tr>\r\n  </thead>\r\n  <tbody>\r\n    <tr>\r\n      <td>album_type</td>\r\n      <td>string</td>\r\n      <td>The type of the album: one of <code class=\"highlighter-rouge\">\"album\"</code> , <code class=\"highlighter-rouge\">\"single\"</code> , or <code class=\"highlighter-rouge\">\"compilation\"</code>.</td>\r\n    </tr>\r\n    <tr>\r\n      <td>artists</td>\r\n      <td>array of artist objects</td>\r\n      <td>The artists of the album. Each artist object includes a link in <code class=\"highlighter-rouge\">href</code> to more detailed information about the artist.</td>\r\n    </tr>\r\n    <tr>\r\n      <td>available_markets</td>\r\n      <td>array of strings</td>\r\n      <td>The markets in which the album is available: <a href=\"http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2\">ISO 3166-1 alpha-2 country codes</a>. Note that an album is considered available in a market when at least 1 of its tracks is available in that market.</td>\r\n    </tr>\r\n    <tr>\r\n      <td>copyrights</td>\r\n      <td>array of copyright objects</td>\r\n      <td>The copyright statements of the album.</td>\r\n    </tr>\r\n    <tr>\r\n      <td>genres</td>\r\n      <td>array of strings</td>\r\n      <td>A list of the genres used to classify the album. For example: <code class=\"highlighter-rouge\">\"Prog Rock\"</code> , <code class=\"highlighter-rouge\">\"Post-Grunge\"</code>. (If not yet classified, the array is empty.)</td>\r\n    </tr>\r\n    <tr>\r\n      <td>href</td>\r\n      <td>string</td>\r\n      <td>A link to the Web API endpoint providing full details of the album.</td>\r\n    </tr>\r\n    <tr>\r\n      <td>id</td>\r\n      <td>string</td>\r\n      <td>The Symphonia ID for the album.</td>\r\n    </tr>\r\n    <tr>\r\n      <td>images</td>\r\n      <td>array of image objects</td>\r\n      <td>The cover art for the album in various sizes, widest first.</td>\r\n    </tr>\r\n    <tr>\r\n      <td>label</td>\r\n      <td>string</td>\r\n      <td>The label for the album.</td>\r\n    </tr>\r\n    <tr>\r\n      <td>name</td>\r\n      <td>string</td>\r\n      <td>The name of the album. In case of an album takedown, the value may be an empty string.</td>\r\n    </tr>\r\n    <tr>\r\n      <td>popularity</td>\r\n      <td>integer</td>\r\n      <td>The popularity of the album. The value will be between 0 and 100, with 100 being the most popular. The popularity is calculated from the popularity of the album’s individual tracks.</td>\r\n    </tr>\r\n    <tr>\r\n      <td>release_date</td>\r\n      <td>string</td>\r\n      <td>The date the album was first released, for example <code class=\"highlighter-rouge\">\"1981-12-15\"</code>. Depending on the precision, it might be shown as <code class=\"highlighter-rouge\">\"1981\"</code> or <code class=\"highlighter-rouge\">\"1981-12\"</code>.</td>\r\n    </tr>\r\n    <tr>\r\n      <td>release_date_precision</td>\r\n      <td>string</td>\r\n      <td>The precision with which <code class=\"highlighter-rouge\">release_date</code> value is known: <code class=\"highlighter-rouge\">\"year\"</code> , <code class=\"highlighter-rouge\">\"month\"</code> , or <code class=\"highlighter-rouge\">\"day\"</code>.</td>\r\n    </tr>\r\n    <tr>\r\n      <td>tracks</td>\r\n      <td>array of track objects inside a paging object</td>\r\n      <td>The tracks of the album.</td>\r\n    </tr>\r\n    <tr>\r\n      <td>type</td>\r\n      <td>string</td>\r\n      <td>The object type: “album”</td>\r\n    </tr>\r\n  </tbody>\r\n</table>\r\n\r\n<br>\r\n\r\n## Request parameters"
					},
					"response": [
						{
							"name": "Get Several Albums",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {your access token}",
										"description": "*Required*. A valid access token from the Symphonia Accounts service.\n",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{URL}}api/v1/albums?ids=41MnTivkwTO3UUJ8DrqEJJ,6JWc4iAiJ9FjyK0B59ABb4,6UXCm6bOO4gFlDQZV5yL37",
									"host": [
										"{{URL}}api"
									],
									"path": [
										"v1",
										"albums"
									],
									"query": [
										{
											"key": "ids",
											"value": "41MnTivkwTO3UUJ8DrqEJJ,6JWc4iAiJ9FjyK0B59ABb4,6UXCm6bOO4gFlDQZV5yL37",
											"description": "Required. A comma-separated list of the Spotify IDs for the albums. Maximum: 20 IDs.\n"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\r\n  \"albums\" : [ {\r\n    \"album_type\" : \"album\",\r\n    \"artists\" : [ {\r\n      \"href\" : \"https://api.symphonia.com/v1/artists/53A0W3U0s8diEn9RhXQhVz\",\r\n      \"id\" : \"53A0W3U0s8diEn9RhXQhVz\",\r\n      \"name\" : \"Keane\",\r\n      \"type\" : \"artist\"\r\n    } ],\r\n    \"available_markets\" : [ \"AD\", \"AR\", \"AT\", \"AU\", \"BE\", \"BG\", \"BO\", \"BR\", \"CH\", \"CL\", \"CO\", \"CR\", \"CY\", \"CZ\", \"DE\", \"DK\", \"DO\", \"EC\", \"EE\", \"ES\", \"FI\", \"FR\", \"GB\", \"GR\", \"GT\", \"HK\", \"HN\", \"HU\", \"IE\", \"IS\", \"IT\", \"LI\", \"LT\", \"LU\", \"LV\", \"MC\", \"MT\", \"MY\", \"NI\", \"NL\", \"NO\", \"NZ\", \"PA\", \"PE\", \"PH\", \"PL\", \"PT\", \"PY\", \"RO\", \"SE\", \"SG\", \"SI\", \"SK\", \"SV\", \"TR\", \"TW\", \"UY\" ],\r\n    \"copyrights\" : [ {\r\n      \"text\" : \"(C) 2013 Universal Island Records, a division of Universal Music Operations Limited\",\r\n      \"type\" : \"C\"\r\n    }, {\r\n      \"text\" : \"(P) 2013 Universal Island Records, a division of Universal Music Operations Limited\",\r\n      \"type\" : \"P\"\r\n    } ],\r\n    \"genres\" : [ ],\r\n    \"href\" : \"https://api.symphonia.com/v1/albums/41MnTivkwTO3UUJ8DrqEJJ\",\r\n    \"id\" : \"41MnTivkwTO3UUJ8DrqEJJ\",\r\n    \"images\" : [ {\r\n      \"height\" : 640,\r\n      \"url\" : \"https://i.scdn.co/image/89b92c6b59131776c0cd8e5df46301ffcf36ed69\",\r\n      \"width\" : 640\r\n    }, {\r\n      \"height\" : 300,\r\n      \"url\" : \"https://i.scdn.co/image/eb6f0b2594d81f8d9dced193f3e9a3bc4318aedc\",\r\n      \"width\" : 300\r\n    }, {\r\n      \"height\" : 64,\r\n      \"url\" : \"https://i.scdn.co/image/21e1ebcd7ebd3b679d9d5084bba1e163638b103a\",\r\n      \"width\" : 64\r\n    } ],\r\n    \"name\" : \"The Best Of Keane (Deluxe Edition)\",\r\n    \"popularity\" : 65,\r\n    \"release_date\" : \"2013-11-08\",\r\n    \"release_date_precision\" : \"day\",\r\n    \"tracks\" : {\r\n      \"href\" : \"https://api.symphonia.com/v1/albums/41MnTivkwTO3UUJ8DrqEJJ/tracks?offset=0&limit=50\",\r\n      \"items\" : [ {\r\n        \"artists\" : [ {\r\n          \"href\" : \"https://api.symphonia.com/v1/artists/53A0W3U0s8diEn9RhXQhVz\",\r\n          \"id\" : \"53A0W3U0s8diEn9RhXQhVz\",\r\n          \"name\" : \"Keane\",\r\n          \"type\" : \"artist\"\r\n        } ],\r\n        \"available_markets\" : [ \"AD\", \"AR\", \"AT\", \"AU\", \"BE\", \"BG\", \"BO\", \"BR\", \"CH\", \"CL\", \"CO\", \"CR\", \"CY\", \"CZ\", \"DE\", \"DK\", \"DO\", \"EC\", \"EE\", \"ES\", \"FI\", \"FR\", \"GB\", \"GR\", \"GT\", \"HK\", \"HN\", \"HU\", \"IE\", \"IS\", \"IT\", \"LI\", \"LT\", \"LU\", \"LV\", \"MC\", \"MT\", \"MY\", \"NI\", \"NL\", \"NO\", \"NZ\", \"PA\", \"PE\", \"PH\", \"PL\", \"PT\", \"PY\", \"RO\", \"SE\", \"SG\", \"SI\", \"SK\", \"SV\", \"TR\", \"TW\", \"UY\" ],\r\n        \"duration_ms\" : 215986,\r\n        \"explicit\" : false,\r\n        \"href\" : \"https://api.symphonia.com/v1/tracks/4r9PmSmbAOOWqaGWLf6M9Q\",\r\n        \"id\" : \"4r9PmSmbAOOWqaGWLf6M9Q\",\r\n        \"name\" : \"Everybody's Changing\",\r\n        \"type\" : \"track\"\r\n      }, {\r\n        \"artists\" : [ {\r\n          \"href\" : \"https://api.symphonia.com/v1/artists/53A0W3U0s8diEn9RhXQhVz\",\r\n          \"id\" : \"53A0W3U0s8diEn9RhXQhVz\",\r\n          \"name\" : \"Keane\",\r\n          \"type\" : \"artist\"\r\n        } ],\r\n        \"available_markets\" : [ \"AD\", \"AR\", \"AT\", \"AU\", \"BE\", \"BG\", \"BO\", \"BR\", \"CH\", \"CL\", \"CO\", \"CR\", \"CY\", \"CZ\", \"DE\", \"DK\", \"DO\", \"EC\", \"EE\", \"ES\", \"FI\", \"FR\", \"GB\", \"GR\", \"GT\", \"HK\", \"HN\", \"HU\", \"IE\", \"IS\", \"IT\", \"LI\", \"LT\", \"LU\", \"LV\", \"MC\", \"MT\", \"MY\", \"NI\", \"NL\", \"NO\", \"NZ\", \"PA\", \"PE\", \"PH\", \"PL\", \"PT\", \"PY\", \"RO\", \"SE\", \"SG\", \"SI\", \"SK\", \"SV\", \"TR\", \"TW\", \"UY\" ],\r\n        \"duration_ms\" : 235880,\r\n        \"explicit\" : false,\r\n        \"href\" : \"https://api.symphonia.com/v1/tracks/0HJQD8uqX2Bq5HVdLnd3ep\",\r\n        \"id\" : \"0HJQD8uqX2Bq5HVdLnd3ep\",\r\n        \"name\" : \"Somewhere Only We Know\",\r\n        \"type\" : \"track\"\r\n      }, {\r\n        ...\r\n      }],\r\n      \"limit\" : 50,\r\n      \"next\" : null,\r\n      \"offset\" : 0,\r\n      \"previous\" : null,\r\n      \"total\" : 9\r\n    },\r\n    \"type\" : \"album\"\r\n  } ]\r\n}"
						}
					]
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Artists",
			"item": [
				{
					"name": "Get an Artist",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "",
								"description": "*Required*. A valid access token from the Symphonia Accounts service.\n",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{URL}}api/v1/artists/:{id}",
							"host": [
								"{{URL}}api"
							],
							"path": [
								"v1",
								"artists",
								":{id}"
							],
							"variable": [
								{
									"id": "e8b617ac-95b6-424e-bfec-e093ecd7b1bf",
									"key": "{id}",
									"value": "",
									"type": "string",
									"description": "The Symphonia ID for the artist."
								}
							]
						},
						"description": "# Description\r\n\r\nGet Symphonia catalog information for a single artist identified by their unique Symphonia ID.\r\n\r\n## Response Format\r\n\r\nOn success, the HTTP status code in the response header is `200` OK and the response body contains an artist object in JSON format. On error, the header status code is an error code and the response body contains an error object.\r\n\r\n\r\n### artist object \r\n\r\n<table>\r\n  <thead>\r\n    <tr>\r\n      <th>Key</th>\r\n      <th>Value Type</th>\r\n      <th>Value Description</th>\r\n    </tr>\r\n  </thead>\r\n  <tbody>\r\n    <tr>\r\n      <td>followers</td>\r\n      <td>A followers object</td>\r\n      <td>Information about the followers of the artist.</td>\r\n    </tr>\r\n    <tr>\r\n      <td>genres</td>\r\n      <td>array of strings</td>\r\n      <td>A list of the genres the artist is associated with. For example: <code class=\"highlighter-rouge\">\"Prog Rock\"</code> , <code class=\"highlighter-rouge\">\"Post-Grunge\"</code>. (If not yet classified, the array is empty.)</td>\r\n    </tr>\r\n    <tr>\r\n      <td>href</td>\r\n      <td>string</td>\r\n      <td>A link to the Web API endpoint providing full details of the artist.</td>\r\n    </tr>\r\n    <tr>\r\n      <td>id</td>\r\n      <td>string</td>\r\n      <td>The Symphonia ID for the artist.</td>\r\n    </tr>\r\n    <tr>\r\n      <td>images</td>\r\n      <td>array of image objects</td>\r\n      <td>Images of the artist in various sizes, widest first.</td>\r\n    </tr>\r\n    <tr>\r\n      <td>name</td>\r\n      <td>string</td>\r\n      <td>The name of the artist</td>\r\n    </tr>\r\n    <tr>\r\n      <td>popularity</td>\r\n      <td>int</td>\r\n      <td>The popularity of the artist. The value will be between 0 and 100, with 100 being the most popular. The artist’s popularity is calculated from the popularity of all the artist’s tracks.</td>\r\n    </tr>\r\n    <tr>\r\n      <td>type</td>\r\n      <td>string</td>\r\n      <td>The object type: <code class=\"highlighter-rouge\">\"artist\"</code></td>\r\n    </tr>\r\n  </tbody>\r\n</table>\r\n\r\n# Request Parameters"
					},
					"response": [
						{
							"name": "Get an artist",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {your access token}",
										"description": "**Required**. A valid access token from the Symphonia Accounts service.\n",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{URL}}api/v1/artists/:{id}",
									"host": [
										"{{URL}}api"
									],
									"path": [
										"v1",
										"artists",
										":{id}"
									],
									"variable": [
										{
											"key": "{id}",
											"value": "0OdUWJ0sBjDrqHygGUXeCF",
											"description": "The Symphonia ID for the artist."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": null,
							"cookie": [],
							"body": "{\n    \"followers\": {\n        \"href\": null,\n        \"total\": 306565\n    },\n    \"genres\": [\n        \"indie folk\",\n        \"indie pop\"\n    ],\n    \"href\": \"https://api.symphonia.com/v1/artists/0OdUWJ0sBjDrqHygGUXeCF\",\n    \"id\": \"0OdUWJ0sBjDrqHygGUXeCF\",\n    \"images\": [\n        {\n            \"height\": 816,\n            \"url\": \"https://i.scdn.co/image/eb266625dab075341e8c4378a177a27370f91903\",\n            \"width\": 1000\n        },\n        {\n            \"height\": 522,\n            \"url\": \"https://i.scdn.co/image/2f91c3cace3c5a6a48f3d0e2fd21364d4911b332\",\n            \"width\": 640\n        },\n        {\n            \"height\": 163,\n            \"url\": \"https://i.scdn.co/image/2efc93d7ee88435116093274980f04ebceb7b527\",\n            \"width\": 200\n        },\n        {\n            \"height\": 52,\n            \"url\": \"https://i.scdn.co/image/4f25297750dfa4051195c36809a9049f6b841a23\",\n            \"width\": 64\n        }\n    ],\n    \"name\": \"Band of Horses\",\n    \"popularity\": 59,\n    \"type\": \"artist\"\n}"
						}
					]
				},
				{
					"name": "Get an Artist's Albums",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "",
								"description": "*Required*. A valid access token from the Symphonia Accounts service.\n",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{URL}}api/v1/artists/:{id}/albums?include_groups=&country&limit&offset",
							"host": [
								"{{URL}}api"
							],
							"path": [
								"v1",
								"artists",
								":{id}",
								"albums"
							],
							"query": [
								{
									"key": "include_groups",
									"value": "",
									"description": "<em>Optional</em>. A comma-separated list of keywords that will be used to filter the response. If not supplied, all album types will be returned. Valid values are:<br />- <code class=\"highlighter-rouge\">album</code><br />- <code class=\"highlighter-rouge\">single</code><br />- <code class=\"highlighter-rouge\">appears_on</code><br />- <code class=\"highlighter-rouge\">compilation</code><br />For example: <code class=\"highlighter-rouge\">include_groups=album,single</code>."
								},
								{
									"key": "country",
									"value": null,
									"description": "<em>Optional</em>. An <a href=\"http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2\">ISO 3166-1 alpha-2 country code</a> or the string <code class=\"highlighter-rouge\">from_token</code>.<br />Supply this parameter to limit the response to one particular geographical market. For example, for albums available in Sweden: <code class=\"highlighter-rouge\">country=SE</code>.<br /><em>If not given, results will be returned for all countries and you are likely to get duplicate results per album, one for each country in which the album is available!</em>"
								},
								{
									"key": "limit",
									"value": null,
									"description": "<em>Optional</em>. The number of album objects to return. Default: 20. Minimum: 1. Maximum: 50. For example: <code class=\"highlighter-rouge\">limit=2</code>"
								},
								{
									"key": "offset",
									"value": null,
									"description": "<em>Optional</em>. The index of the first album to return. Default: 0 (i.e., the first album). Use with <code class=\"highlighter-rouge\">limit</code> to get the next set of albums."
								}
							],
							"variable": [
								{
									"key": "{id}",
									"value": "",
									"description": "The Symphonia ID for the artist."
								}
							]
						},
						"description": "# Description\n\nGet Symphonia catalog information about an artist’s albums. Optional parameters can be specified in the query string to filter and sort the response.\n\n# Response Format\n\nOn success, the HTTP status code in the response header is `200` OK and the response body contains an array of simplified album objects (wrapped in a paging object) in JSON format. On error, the header status code is an error code and the response body contains an error object.\n\n# Example\n\n## album object\n\n<table>\n  <thead>\n    <tr>\n      <th>Key</th>\n      <th>Value Type</th>\n      <th>Value Description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>album_type</td>\n      <td>string</td>\n      <td>The type of the album: one of <code class=\"highlighter-rouge\">\"album\"</code> , <code class=\"highlighter-rouge\">\"single\"</code> , or <code class=\"highlighter-rouge\">\"compilation\"</code>.</td>\n    </tr>\n    <tr>\n      <td>artists</td>\n      <td>array of simplified artist objects</td>\n      <td>The artists of the album. Each artist object includes a link in <code class=\"highlighter-rouge\">href</code> to more detailed information about the artist.</td>\n    </tr>\n    <tr>\n      <td>available_markets</td>\n      <td>array of strings</td>\n      <td>The markets in which the album is available: <a href=\"http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2\">ISO 3166-1 alpha-2 country codes</a>. Note that an album is considered available in a market when at least 1 of its tracks is available in that market.</td>\n    </tr>\n    <tr>\n      <td>copyrights</td>\n      <td>array of copyright objects</td>\n      <td>The copyright statements of the album.</td>\n    </tr>\n    <tr>\n      <td>genres</td>\n      <td>array of strings</td>\n      <td>A list of the genres used to classify the album. For example: <code class=\"highlighter-rouge\">\"Prog Rock\"</code> , <code class=\"highlighter-rouge\">\"Post-Grunge\"</code>. (If not yet classified, the array is empty.)</td>\n    </tr>\n    <tr>\n      <td>href</td>\n      <td>string</td>\n      <td>A link to the Web API endpoint providing full details of the album.</td>\n    </tr>\n    <tr>\n      <td>id</td>\n      <td>string</td>\n      <td>The Symphonia ID for the album.</td>\n    </tr>\n    <tr>\n      <td>images</td>\n      <td>array of image objects</td>\n      <td>The cover art for the album in various sizes, widest first.</td>\n    </tr>\n    <tr>\n      <td>label</td>\n      <td>string</td>\n      <td>The label for the album.</td>\n    </tr>\n    <tr>\n      <td>name</td>\n      <td>string</td>\n      <td>The name of the album. In case of an album takedown, the value may be an empty string.</td>\n    </tr>\n    <tr>\n      <td>popularity</td>\n      <td>integer</td>\n      <td>The popularity of the album. The value will be between 0 and 100, with 100 being the most popular. The popularity is calculated from the popularity of the album’s individual tracks.</td>\n    </tr>\n    <tr>\n      <td>release_date</td>\n      <td>string</td>\n      <td>The date the album was first released, for example <code class=\"highlighter-rouge\">\"1981-12-15\"</code>. Depending on the precision, it might be shown as <code class=\"highlighter-rouge\">\"1981\"</code> or <code class=\"highlighter-rouge\">\"1981-12\"</code>.</td>\n    </tr>\n    <tr>\n      <td>release_date_precision</td>\n      <td>string</td>\n      <td>The precision with which <code class=\"highlighter-rouge\">release_date</code> value is known: <code class=\"highlighter-rouge\">\"year\"</code> , <code class=\"highlighter-rouge\">\"month\"</code> , or <code class=\"highlighter-rouge\">\"day\"</code>.</td>\n    </tr>\n    <tr>\n      <td>tracks</td>\n      <td>array of simplified track objects inside a paging object</td>\n      <td>The tracks of the album.</td>\n    </tr>\n    <tr>\n      <td>type</td>\n      <td>string</td>\n      <td>The object type: “album”</td>\n    </tr>\n  </tbody>\n</table>\n\n# Request parameters"
					},
					"response": [
						{
							"name": "Get an Artist's Albums",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {your access token}",
										"description": "**Required**. A valid access token from the Symphonia Accounts service.\n",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{URL}}api/v1/artists/:{id}/albums?include_groups=appears_on&country=ES&limit=2&offset",
									"host": [
										"{{URL}}api"
									],
									"path": [
										"v1",
										"artists",
										":{id}",
										"albums"
									],
									"query": [
										{
											"key": "include_groups",
											"value": "appears_on",
											"description": "<em>Optional</em>. A comma-separated list of keywords that will be used to filter the response. If not supplied, all album types will be returned. Valid values are:<br />- <code class=\"highlighter-rouge\">album</code><br />- <code class=\"highlighter-rouge\">single</code><br />- <code class=\"highlighter-rouge\">appears_on</code><br />- <code class=\"highlighter-rouge\">compilation</code><br />For example: <code class=\"highlighter-rouge\">include_groups=album,single</code>."
										},
										{
											"key": "country",
											"value": "ES",
											"description": "<em>Optional</em>. An <a href=\"http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2\">ISO 3166-1 alpha-2 country code</a> or the string <code class=\"highlighter-rouge\">from_token</code>.<br />Supply this parameter to limit the response to one particular geographical market. For example, for albums available in Sweden: <code class=\"highlighter-rouge\">country=SE</code>.<br /><em>If not given, results will be returned for all countries and you are likely to get duplicate results per album, one for each country in which the album is available!</em>"
										},
										{
											"key": "limit",
											"value": "2",
											"description": "<em>Optional</em>. The number of album objects to return. Default: 20. Minimum: 1. Maximum: 50. For example: <code class=\"highlighter-rouge\">limit=2</code>"
										},
										{
											"key": "offset",
											"value": null,
											"description": "<em>Optional</em>. The index of the first album to return. Default: 0 (i.e., the first album). Use with <code class=\"highlighter-rouge\">limit</code> to get the next set of albums."
										}
									],
									"variable": [
										{
											"key": "{id}",
											"value": "1vCWHaC5f2uS3yhpwWbIA6",
											"description": "The Symphonia ID for the artist."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": null,
							"cookie": [],
							"body": "{\n    \"href\": \"https://api.symphonia.com/v1/artists/1vCWHaC5f2uS3yhpwWbIA6/albums?offset=0&limit=2&include_groups=appears_on&market=ES\",\n    \"items\": [\n        {\n            \"album_group\": \"appears_on\",\n            \"album_type\": \"album\",\n            \"artists\": [\n                {\n                    \"href\": \"https://api.symphonia.com/v1/artists/0LyfQWJT6nXafLPZqxe9Of\",\n                    \"id\": \"0LyfQWJT6nXafLPZqxe9Of\",\n                    \"name\": \"Various Artists\",\n                    \"type\": \"artist\"\n                }\n            ],\n            \"available_markets\": [\n                \"AD\",\n                \"AR\",\n                \"AT\",\n                \"AU\",\n                \"BE\",\n                \"BG\",\n                \"BO\",\n                \"BR\",\n                \"CH\",\n                \"CL\",\n                \"CO\",\n                \"CR\",\n                \"CY\",\n                \"CZ\",\n                \"DE\",\n                \"DK\",\n                \"DO\",\n                \"EC\",\n                \"EE\",\n                \"ES\",\n                \"FI\",\n                \"FR\",\n                \"GB\",\n                \"GR\",\n                \"GT\",\n                \"HK\",\n                \"HN\",\n                \"HU\",\n                \"ID\",\n                \"IE\",\n                \"IL\",\n                \"IS\",\n                \"IT\",\n                \"JP\",\n                \"LI\",\n                \"LT\",\n                \"LU\",\n                \"LV\",\n                \"MC\",\n                \"MT\",\n                \"MY\",\n                \"NI\",\n                \"NL\",\n                \"NO\",\n                \"NZ\",\n                \"PA\",\n                \"PE\",\n                \"PH\",\n                \"PL\",\n                \"PT\",\n                \"PY\",\n                \"RO\",\n                \"SE\",\n                \"SG\",\n                \"SK\",\n                \"SV\",\n                \"TH\",\n                \"TR\",\n                \"TW\",\n                \"UY\",\n                \"VN\",\n                \"ZA\"\n            ],\n            \"href\": \"https://api.symphonia.com/v1/albums/43977e0YlJeMXG77uCCSMX\",\n            \"id\": \"43977e0YlJeMXG77uCCSMX\",\n            \"images\": [\n                {\n                    \"height\": 640,\n                    \"url\": \"https://i.scdn.co/image/0da79956d0440a55b20ea4e8e38877bce43275cd\",\n                    \"width\": 640\n                },\n                {\n                    \"height\": 300,\n                    \"url\": \"https://i.scdn.co/image/29368267cc6b1eab2600e6e42485d3774621e7d4\",\n                    \"width\": 300\n                },\n                {\n                    \"height\": 64,\n                    \"url\": \"https://i.scdn.co/image/779dd6d6a0e124e03a5143d2be729ee4bab3f15f\",\n                    \"width\": 64\n                }\n            ],\n            \"name\": \"Shut Up Lets Dance (Vol. II)\",\n            \"release_date\": \"2018-02-09\",\n            \"release_date_precision\": \"day\",\n            \"type\": \"album\"\n        },\n        {\n            \"album_group\": \"appears_on\",\n            \"album_type\": \"compilation\",\n            \"artists\": [\n                {\n                    \"href\": \"https://api.symphonia.com/v1/artists/0LyfQWJT6nXafLPZqxe9Of\",\n                    \"id\": \"0LyfQWJT6nXafLPZqxe9Of\",\n                    \"name\": \"Various Artists\",\n                    \"type\": \"artist\"\n                }\n            ],\n            \"available_markets\": [\n                \"AD\",\n                \"AR\",\n                \"AT\",\n                \"AU\",\n                \"BE\",\n                \"BG\",\n                \"BO\",\n                \"BR\",\n                \"CA\",\n                \"CH\",\n                \"CL\",\n                \"CO\",\n                \"CR\",\n                \"CY\",\n                \"CZ\",\n                \"DE\",\n                \"DK\",\n                \"DO\",\n                \"EC\",\n                \"EE\",\n                \"ES\",\n                \"FI\",\n                \"FR\",\n                \"GB\",\n                \"GR\",\n                \"GT\",\n                \"HK\",\n                \"HN\",\n                \"HU\",\n                \"ID\",\n                \"IE\",\n                \"IL\",\n                \"IS\",\n                \"IT\",\n                \"JP\",\n                \"LI\",\n                \"LT\",\n                \"LU\",\n                \"LV\",\n                \"MC\",\n                \"MT\",\n                \"MX\",\n                \"MY\",\n                \"NI\",\n                \"NL\",\n                \"NO\",\n                \"NZ\",\n                \"PA\",\n                \"PE\",\n                \"PH\",\n                \"PL\",\n                \"PT\",\n                \"PY\",\n                \"RO\",\n                \"SE\",\n                \"SG\",\n                \"SK\",\n                \"SV\",\n                \"TH\",\n                \"TR\",\n                \"TW\",\n                \"US\",\n                \"UY\",\n                \"VN\",\n                \"ZA\"\n            ],\n            \"href\": \"https://api.symphonia.com/v1/albums/189ngoT3WxR5mZSYkAGOLF\",\n            \"id\": \"189ngoT3WxR5mZSYkAGOLF\",\n            \"images\": [\n                {\n                    \"height\": 600,\n                    \"url\": \"https://i.scdn.co/image/42f4dbe7e54d52efa14f058fab74d8a0505ef26d\",\n                    \"width\": 600\n                },\n                {\n                    \"height\": 300,\n                    \"url\": \"https://i.scdn.co/image/b221fb6d689f84f8e09b493776520194a6f4ef88\",\n                    \"width\": 300\n                },\n                {\n                    \"height\": 64,\n                    \"url\": \"https://i.scdn.co/image/0fc4a3cb2ee5b14fdefeb8f20afd84b7fbae7707\",\n                    \"width\": 64\n                }\n            ],\n            \"name\": \"Classic Club Monsters (25 Floor Killers)\",\n            \"release_date\": \"2018-02-02\",\n            \"release_date_precision\": \"day\",\n            \"type\": \"album\"\n        }\n    ],\n    \"limit\": 2,\n    \"next\": \"https://api.symphonia.com/v1/artists/1vCWHaC5f2uS3yhpwWbIA6/albums?offset=2&limit=2&include_groups=appears_on&market=ES\",\n    \"offset\": 0,\n    \"previous\": null,\n    \"total\": 308\n}"
						}
					]
				},
				{
					"name": "Get an Artist's Top Tracks",
					"request": {
						"method": "GET",
						"header": [
							{
								"description": "*Required*. A valid access token from the Symphonia Accounts service.\n",
								"key": "Authorization",
								"type": "text",
								"value": ""
							}
						],
						"url": {
							"raw": "{{URL}}api/v1/artists/:{id}/top-tracks?country",
							"host": [
								"{{URL}}api"
							],
							"path": [
								"v1",
								"artists",
								":{id}",
								"top-tracks"
							],
							"query": [
								{
									"key": "country",
									"value": null,
									"description": "<em>Required</em>. An <a href=\"http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2\">ISO 3166-1 alpha-2 country code</a> or the string <code class=\"highlighter-rouge\">from_token</code>."
								}
							],
							"variable": [
								{
									"description": "The Symphonia ID for the artist.",
									"key": "{id}",
									"value": ""
								}
							]
						},
						"description": "# Description\r\n\r\nGet Symphonia catalog information about an artist’s top tracks by country.\r\n\r\n## Response Format\r\n\r\nOn success, the HTTP status code in the response header is `200` OK and the response body contains an object whose key is `\"tracks\"` and whose value is an array of up to 10 track objects in JSON format. On error, the header status code is an error code and the response body contains an error object.\r\n\r\n\r\n### artist object \r\n\r\n<table>\r\n  <thead>\r\n    <tr>\r\n      <th>Key</th>\r\n      <th>Value Type</th>\r\n      <th>Value Description</th>\r\n    </tr>\r\n  </thead>\r\n  <tbody>\r\n    <tr>\r\n      <td>album</td>\r\n      <td>an album object</td>\r\n      <td>The album on which the track appears. The album object includes a link in <code class=\"highlighter-rouge\">href</code> to full information about the album.</td>\r\n    </tr>\r\n    <tr>\r\n      <td>artists</td>\r\n      <td>an array of artist objects</td>\r\n      <td>The artists who performed the track. Each artist object includes a link in <code class=\"highlighter-rouge\">href</code> to more detailed information about the artist.</td>\r\n    </tr>\r\n    <tr>\r\n      <td>available_markets</td>\r\n      <td>array of strings</td>\r\n      <td>A list of the countries in which the track can be played, identified by their <a href=\"http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2\">ISO 3166-1 alpha-2</a> code.</td>\r\n    </tr>\r\n      <td>duration_ms</td>\r\n      <td>integer</td>\r\n      <td>The track length in milliseconds.</td>\r\n    </tr>\r\n    <tr>\r\n      <td>explicit</td>\r\n      <td>Boolean</td>\r\n      <td>Whether or not the track has explicit lyrics ( <code class=\"highlighter-rouge\">true</code> = yes it does; <code class=\"highlighter-rouge\">false</code> = no it does not OR unknown).</td>\r\n    </tr>\r\n    <tr>\r\n      <td>href</td>\r\n      <td>string</td>\r\n      <td>A link to the Web API endpoint providing full details of the track.</td>\r\n    </tr>\r\n    <tr>\r\n      <td>id</td>\r\n      <td>string</td>\r\n      <td>The Symphonia ID for the track.</td>\r\n    </tr>\r\n    <tr>\r\n      <td>name</td>\r\n      <td>string</td>\r\n      <td>The name of the track.</td>\r\n    </tr>\r\n    <tr>\r\n      <td>popularity</td>\r\n      <td>integer</td>\r\n      <td>The popularity of the track. The value will be between 0 and 100, with 100 being the most popular.<br />The popularity of a track is a value between 0 and 100, with 100 being the most popular. The popularity is calculated by algorithm and is based, in the most part, on the total number of plays the track has had and how recent those plays are.</td>\r\n    </tr>\r\n    <tr>\r\n      <td>type</td>\r\n      <td>string</td>\r\n      <td>The object type: “track”.</td>\r\n    </tr>\r\n  </tbody>\r\n</table>\r\n\r\n## Request Parameters"
					},
					"response": [
						{
							"name": "Get an Artist's Top Tracks",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "**Required**. A valid access token from the Symphonia Accounts service.\n",
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {your access token}"
									}
								],
								"url": {
									"raw": "{{URL}}api/v1/artists/:{id}/top-tracks?country=SE",
									"host": [
										"{{URL}}api"
									],
									"path": [
										"v1",
										"artists",
										":{id}",
										"top-tracks"
									],
									"query": [
										{
											"key": "country",
											"value": "SE",
											"description": "<em>Required</em>. An <a href=\"http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2\">ISO 3166-1 alpha-2 country code</a> or the string <code class=\"highlighter-rouge\">from_token</code>."
										}
									],
									"variable": [
										{
											"key": "{id}",
											"value": "43ZHCT0cAZBISjO8DG9PnE",
											"description": "The Symphonia ID for the artist."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": null,
							"cookie": [],
							"body": "{\r\n  \"tracks\": [ {\r\n    \"album\" : {\r\n      \"album_type\" : \"album\",\r\n      \"artists\" : [ {\r\n        \"href\" : \"https://api.symphonia.com/v1/artists/43ZHCT0cAZBISjO8DG9PnE\",\r\n        \"id\" : \"43ZHCT0cAZBISjO8DG9PnE\",\r\n        \"name\" : \"Elvis Presley\",\r\n        \"type\" : \"artist\"\r\n      } ],\r\n      \"available_markets\" : [ \"AD\", \"AR\", \"AT\", \"AU\", \"BE\", \"BG\", \"BO\", \"BR\", \"CA\", \"CH\", \"CL\", \"CO\", \"CR\", \"CY\", \"CZ\", \"DE\", \"DK\", \"DO\", \"EC\", \"EE\", \"ES\", \"FI\", \"FR\", \"GB\", \"GR\", \"GT\", \"HK\", \"HN\", \"HU\", \"ID\", \"IE\", \"IS\", \"IT\", \"JP\", \"LI\", \"LT\", \"LU\", \"LV\", \"MC\", \"MT\", \"MX\", \"MY\", \"NI\", \"NL\", \"NO\", \"NZ\", \"PA\", \"PE\", \"PH\", \"PL\", \"PT\", \"PY\", \"SE\", \"SG\", \"SK\", \"SV\", \"TR\", \"TW\", \"US\", \"UY\" ],\r\n      \"href\" : \"https://api.symphonia.com/v1/albums/7xe8VI48TxUpU1IIo0RfGi\",\r\n      \"id\" : \"7xe8VI48TxUpU1IIo0RfGi\",\r\n      \"images\" : [ {\r\n        \"height\" : 640,\r\n        \"url\" : \"https://i.scdn.co/image/4295b5ff74d4f944367144acbe616b6f62d20b17\",\r\n        \"width\" : 640\r\n      }, {\r\n        \"height\" : 300,\r\n        \"url\" : \"https://i.scdn.co/image/203104e5843248c700b078f391d4bc759c5d7f47\",\r\n        \"width\" : 300\r\n      }, {\r\n        \"height\" : 64,\r\n        \"url\" : \"https://i.scdn.co/image/0c0a172373b0211c590b241270d05b70889075a1\",\r\n        \"width\" : 64\r\n      } ],\r\n      \"name\" : \"Blue Hawaii\",\r\n      \"type\" : \"album\"\r\n    },\r\n    \"artists\" : [ {\r\n      \"href\" : \"https://api.symphonia.com/v1/artists/43ZHCT0cAZBISjO8DG9PnE\",\r\n      \"id\" : \"43ZHCT0cAZBISjO8DG9PnE\",\r\n      \"name\" : \"Elvis Presley\",\r\n      \"type\" : \"artist\"\r\n    } ],\r\n    \"available_markets\" : [ \"AD\", \"AR\", \"AT\", \"AU\", \"BE\", \"BG\", \"BO\", \"BR\", \"CA\", \"CH\", \"CL\", \"CO\", \"CR\", \"CY\", \"CZ\", \"DE\", \"DK\", \"DO\", \"EC\", \"EE\", \"ES\", \"FI\", \"FR\", \"GB\", \"GR\", \"GT\", \"HK\", \"HN\", \"HU\", \"ID\", \"IE\", \"IS\", \"IT\", \"JP\", \"LI\", \"LT\", \"LU\", \"LV\", \"MC\", \"MT\", \"MX\", \"MY\", \"NI\", \"NL\", \"NO\", \"NZ\", \"PA\", \"PE\", \"PH\", \"PL\", \"PT\", \"PY\", \"SE\", \"SG\", \"SK\", \"SV\", \"TR\", \"TW\", \"US\", \"UY\" ],\r\n    \"duration_ms\" : 179773,\r\n    \"explicit\" : false,\r\n    \"href\" : \"https://api.symphonia.com/v1/tracks/44AyOl4qVkzS48vBsbNXaC\",\r\n    \"id\" : \"44AyOl4qVkzS48vBsbNXaC\",\r\n    \"name\" : \"Can't Help Falling in Love\",\r\n    \"popularity\" : 70,\r\n    \"preview_url\" : \"https://p.scdn.co/mp3-preview/26e409b39a2da6dc18fab61020c90be2938dc0e9\",\r\n    \"type\" : \"track\",\r\n  }, {\r\n...\r\n  } ]\r\n}"
						}
					]
				},
				{
					"name": "Get an Artist's Related Artists",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "",
								"description": "*Required*. A valid access token from the Symphonia Accounts service.\n",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{URL}}api/v1/artists/:{id}/related-artists",
							"host": [
								"{{URL}}api"
							],
							"path": [
								"v1",
								"artists",
								":{id}",
								"related-artists"
							],
							"variable": [
								{
									"key": "{id}",
									"value": "",
									"description": "The Symphonia ID for the artist."
								}
							]
						},
						"description": "# Description\r\n\r\nGet Symphonia catalog information about artists similar to a given artist. Similarity is based on analysis of the Symphonia community’s listening history.\r\n\r\n## Response Format\r\n\r\nOn success, the HTTP status code in the response header is `200` OK and the response body contains an object whose key is `\"artists\"` and whose value is an array of up to 20 artist objects in JSON format. On error, the header status code is an error code and the response body contains an error object.\r\n\r\n\r\n### artist object \r\n\r\n<table>\r\n  <thead>\r\n    <tr>\r\n      <th>Key</th>\r\n      <th>Value Type</th>\r\n      <th>Value Description</th>\r\n    </tr>\r\n  </thead>\r\n  <tbody>\r\n    <tr>\r\n      <td>followers</td>\r\n      <td>A followers object</td>\r\n      <td>Information about the followers of the artist.</td>\r\n    </tr>\r\n    <tr>\r\n      <td>genres</td>\r\n      <td>array of strings</td>\r\n      <td>A list of the genres the artist is associated with. For example: <code class=\"highlighter-rouge\">\"Prog Rock\"</code> , <code class=\"highlighter-rouge\">\"Post-Grunge\"</code>. (If not yet classified, the array is empty.)</td>\r\n    </tr>\r\n    <tr>\r\n      <td>href</td>\r\n      <td>string</td>\r\n      <td>A link to the Web API endpoint providing full details of the artist.</td>\r\n    </tr>\r\n    <tr>\r\n      <td>id</td>\r\n      <td>string</td>\r\n      <td>The Symphonia ID for the artist.</td>\r\n    </tr>\r\n    <tr>\r\n      <td>images</td>\r\n      <td>array of image objects</td>\r\n      <td>Images of the artist in various sizes, widest first.</td>\r\n    </tr>\r\n    <tr>\r\n      <td>name</td>\r\n      <td>string</td>\r\n      <td>The name of the artist</td>\r\n    </tr>\r\n    <tr>\r\n      <td>popularity</td>\r\n      <td>int</td>\r\n      <td>The popularity of the artist. The value will be between 0 and 100, with 100 being the most popular. The artist’s popularity is calculated from the popularity of all the artist’s tracks.</td>\r\n    </tr>\r\n    <tr>\r\n      <td>type</td>\r\n      <td>string</td>\r\n      <td>The object type: <code class=\"highlighter-rouge\">\"artist\"</code></td>\r\n    </tr>\r\n  </tbody>\r\n</table>\r\n\r\n## Request Parameters"
					},
					"response": [
						{
							"name": "Get an Artist's Related Artists",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {your access token}",
										"description": "**Required**. A valid access token from the Symphonia Accounts service.\n",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{URL}}api/v1/artists/:{id}/related-artists",
									"host": [
										"{{URL}}api"
									],
									"path": [
										"v1",
										"artists",
										":{id}",
										"related-artists"
									],
									"variable": [
										{
											"key": "{id}",
											"value": "43ZHCT0cAZBISjO8DG9PnE",
											"description": "The Symphonia ID for the artist."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": null,
							"cookie": [],
							"body": "{\r\n  \"artists\" : [ {\r\n    \"followers\" : {\r\n      \"href\" : null,\r\n      \"total\" : 18108\r\n    },\r\n    \"genres\" : [ \"rockabilly\" ],\r\n    \"href\" : \"https://api.symphonia.com/v1/artists/5ZKMPRDHc7qElVJFh3uRqB\",\r\n    \"id\" : \"5ZKMPRDHc7qElVJFh3uRqB\",\r\n    \"images\" : [ {\r\n      \"height\" : 997,\r\n      \"url\" : \"https://i.scdn.co/image/beff5827580bcc4d129cbc0872768095eeba8c14\",\r\n      \"width\" : 1000\r\n    }, {\r\n      \"height\" : 638,\r\n      \"url\" : \"https://i.scdn.co/image/dbabf703779789917c4dd1c0e54da62c7a45ce92\",\r\n      \"width\" : 640\r\n    }, {\r\n      \"height\" : 199,\r\n      \"url\" : \"https://i.scdn.co/image/74761c343bec27c814b8e44e4bc095cbf1b674bb\",\r\n      \"width\" : 200\r\n    }, {\r\n      \"height\" : 64,\r\n      \"url\" : \"https://i.scdn.co/image/0c30af5647c74fee14fb97981c23b336abbc9f21\",\r\n      \"width\" : 64\r\n    } ],\r\n    \"name\" : \"Wanda Jackson\",\r\n    \"popularity\" : 59,\r\n    \"type\" : \"artist\"\r\n  }, {\r\n    ...\r\n  } ]\r\n}"
						}
					]
				},
				{
					"name": "Get Several Artists",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "",
								"description": "*Required*. A valid access token from the Symphonia Accounts service.\n",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{URL}}api/v1/artists?ids",
							"host": [
								"{{URL}}api"
							],
							"path": [
								"v1",
								"artists"
							],
							"query": [
								{
									"key": "ids",
									"value": null,
									"description": "<em>Required</em>. A comma-separated list of the Symphonia IDs for the artists. Maximum: 50 IDs."
								}
							]
						},
						"description": "# Description\r\n\r\nGet Symphonia catalog information for several artists based on their Symphonia IDs.\r\n\r\n# Response Format\r\n\r\nOn success, the HTTP status code in the response header is `200` OK and the response body contains an object whose key is `\"artists\"` and whose value is an array of artist objects in JSON format. \r\n\r\nObjects are returned in the order requested. If an object is not found, a `null` value is returned in the appropriate position. Duplicate `ids` in the query will result in duplicate objects in the response. On error, the header status code is an error code and the response body contains an error object.\r\n\r\n\r\n\r\n\r\n# Example\r\n\r\n## artist object \r\n\r\n<table>\r\n  <thead>\r\n    <tr>\r\n      <th>Key</th>\r\n      <th>Value Type</th>\r\n      <th>Value Description</th>\r\n    </tr>\r\n  </thead>\r\n  <tbody>\r\n    <tr>\r\n      <td>followers</td>\r\n      <td>A followers object</td>\r\n      <td>Information about the followers of the artist.</td>\r\n    </tr>\r\n    <tr>\r\n      <td>genres</td>\r\n      <td>array of strings</td>\r\n      <td>A list of the genres the artist is associated with. For example: <code class=\"highlighter-rouge\">\"Prog Rock\"</code> , <code class=\"highlighter-rouge\">\"Post-Grunge\"</code>. (If not yet classified, the array is empty.)</td>\r\n    </tr>\r\n    <tr>\r\n      <td>href</td>\r\n      <td>string</td>\r\n      <td>A link to the Web API endpoint providing full details of the artist.</td>\r\n    </tr>\r\n    <tr>\r\n      <td>id</td>\r\n      <td>string</td>\r\n      <td>The Symphonia ID for the artist.</td>\r\n    </tr>\r\n    <tr>\r\n      <td>images</td>\r\n      <td>array of image objects</td>\r\n      <td>Images of the artist in various sizes, widest first.</td>\r\n    </tr>\r\n    <tr>\r\n      <td>name</td>\r\n      <td>string</td>\r\n      <td>The name of the artist</td>\r\n    </tr>\r\n    <tr>\r\n      <td>popularity</td>\r\n      <td>int</td>\r\n      <td>The popularity of the artist. The value will be between 0 and 100, with 100 being the most popular. The artist’s popularity is calculated from the popularity of all the artist’s tracks.</td>\r\n    </tr>\r\n    <tr>\r\n      <td>type</td>\r\n      <td>string</td>\r\n      <td>The object type: <code class=\"highlighter-rouge\">\"artist\"</code></td>\r\n    </tr>\r\n  </tbody>\r\n</table>\r\n\r\n## Request Parameters"
					},
					"response": [
						{
							"name": "Get Several Artists",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {your access token}",
										"description": "**Required**. A valid access token from the Symphonia Accounts service.\n",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{URL}}api/v1/artists?ids=0oSGxfWSnnOXhD2fKuz2Gy,3dBVyJ7JuOMt4GE9607Qin",
									"host": [
										"{{URL}}api"
									],
									"path": [
										"v1",
										"artists"
									],
									"query": [
										{
											"key": "ids",
											"value": "0oSGxfWSnnOXhD2fKuz2Gy,3dBVyJ7JuOMt4GE9607Qin",
											"description": "<em>Required</em>. A valid access token from the Spotify Accounts service: see the <a href=\"/documentation/general/guides/authorization-guide/\">Web API Authorization Guide</a> for details."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": null,
							"cookie": [],
							"body": "{\r\n  \"artists\" : [ {\r\n    \"followers\" : {\r\n      \"href\" : null,\r\n      \"total\" : 633494\r\n    },\r\n    \"genres\" : [ \"art rock\", \"glam rock\", \"permanent wave\" ],\r\n    \"href\" : \"https://api.symphonia.com/v1/artists/0oSGxfWSnnOXhD2fKuz2Gy\",\r\n    \"images\" : [ {\r\n      \"height\" : 1000,\r\n      \"url\" : \"https://i.scdn.co/image/32bd9707b42a2c081482ec9cd3ffa8879f659f95\",\r\n      \"width\" : 1000\r\n    }, {\r\n      \"height\" : 640,\r\n      \"url\" : \"https://i.scdn.co/image/865f24753e5e4f40a383bf24a9cdda598a4559a8\",\r\n      \"width\" : 640\r\n    }, {\r\n      \"height\" : 200,\r\n      \"url\" : \"https://i.scdn.co/image/7ddd6fa5cf78aee2f2e8b347616151393022b7d9\",\r\n      \"width\" : 200\r\n    }, {\r\n      \"height\" : 64,\r\n      \"url\" : \"https://i.scdn.co/image/c8dc28c191432862afce298216458a6f00bbfbd8\",\r\n      \"width\" : 64\r\n    } ],\r\n    \"name\" : \"David Bowie\",\r\n    \"popularity\" : 77,\r\n    \"type\" : \"artist\"\r\n  }, {\r\n    \"followers\" : {\r\n      \"href\" : null,\r\n      \"total\" : 52338\r\n    },\r\n    \"genres\" : [ \"glam rock\", \"protopunk\" ],\r\n    \"href\" : \"https://api.symphonia.com/v1/artists/3dBVyJ7JuOMt4GE9607Qin\",\r\n    \"images\" : [ {\r\n      \"height\" : 1300,\r\n      \"url\" : \"https://i.scdn.co/image/5515a710c94ccd4edd8b9a0587778ed5e3f997da\",\r\n      \"width\" : 1000\r\n    }, {\r\n      \"height\" : 832,\r\n      \"url\" : \"https://i.scdn.co/image/c990e667b4ca8240c73b0db06e6d76a3b27ce929\",\r\n      \"width\" : 640\r\n    }, {\r\n      \"height\" : 260,\r\n      \"url\" : \"https://i.scdn.co/image/de2fa1d11c59e63143117d44ec9990b9e40451a2\",\r\n      \"width\" : 200\r\n    }, {\r\n      \"height\" : 83,\r\n      \"url\" : \"https://i.scdn.co/image/b39638735adb4a4a54621293b99ab65c546f605e\",\r\n      \"width\" : 64\r\n    } ],\r\n    \"name\" : \"T. Rex\",\r\n    \"popularity\" : 58,\r\n    \"type\" : \"artist\"\r\n  } ]\r\n}"
						}
					]
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "browse",
			"item": [
				{
					"name": "Get a category",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "",
								"description": "*Required*. A valid access token from the Symphonia Accounts service.\n",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{URL}}api/v1/browse/categories/:{category_id}?country=",
							"host": [
								"{{URL}}api"
							],
							"path": [
								"v1",
								"browse",
								"categories",
								":{category_id}"
							],
							"query": [
								{
									"key": "country",
									"value": "",
									"description": "*Optional*. A country: an ISO 3166-1 alpha-2 country code. Provide this parameter if you want to narrow the list of returned categories to those relevant to a particular country. If omitted, the returned items will be globally relevant."
								}
							],
							"variable": [
								{
									"key": "{category_id}",
									"value": "",
									"description": "The Symphonia category ID for the category."
								}
							]
						},
						"description": "# Description\nGet a single category used to tag items in Symphonia (on, for example, the Symphonia player’s “Browse” tab).\n\n## Response Format\nOn success, the HTTP status code in the response header is `200` OK and the response body contains a category object in JSON format. On error, the header status code is an error code and the response body contains an error object.\n\nOnce you have retrieved the category, you can use Get a Category’s Playlists to drill down further.\n\n## category object\n<table>\n  <thead>\n    <tr>\n      <th>Key</th>\n      <th>Value Type</th>\n      <th>Value Description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>href</td>\n      <td>string</td>\n      <td>A link to the Web API endpoint returning full details of the category.</td>\n    </tr>\n    <tr>\n      <td>icons</td>\n      <td>an array of image objects</td>\n      <td>The category icon, in various sizes.</td>\n    </tr>\n    <tr>\n      <td>id</td>\n      <td>string</td>\n      <td>The Symphonia category ID of the category.</td>\n    </tr>\n    <tr>\n      <td>name</td>\n      <td>string</td>\n      <td>The name of the category.</td>\n    </tr>\n  </tbody>\n</table>\n\n## Request parameters"
					},
					"response": [
						{
							"name": "Get a category",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {your access token}",
										"description": "*Required*. A valid access token from the Symphonia Accounts service.\n",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{URL}}api/v1/browse/categories/:{category_id}",
									"host": [
										"{{URL}}api"
									],
									"path": [
										"v1",
										"browse",
										"categories",
										":{category_id}"
									],
									"variable": [
										{
											"key": "{category_id}",
											"value": "party",
											"description": "The Symphonia category ID for the category."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": null,
							"cookie": [],
							"body": "{\n    \"href\": \"https://api.symphonia.com/v1/browse/categories/party\",\n    \"icons\": [\n        {\n            \"height\": 274,\n            \"url\": \"https://datsnxq1rwndn.cloudfront.net/media/derived/party-274x274_73d1907a7371c3bb96a288390a96ee27_0_0_274_274.jpg\",\n            \"width\": 274\n        }\n    ],\n    \"id\": \"party\",\n    \"name\": \"Party\"\n}"
						}
					]
				},
				{
					"name": "Get a Category's Playlists",
					"request": {
						"method": "GET",
						"header": [
							{
								"description": "*Required*. A valid access token from the Symphonia Accounts service.\n",
								"key": "Authorization",
								"type": "text",
								"value": ""
							}
						],
						"url": {
							"raw": "{{URL}}api/v1/browse/categories/:{category_id}/playlists?country=&limit=&offset=",
							"host": [
								"{{URL}}api"
							],
							"path": [
								"v1",
								"browse",
								"categories",
								":{category_id}",
								"playlists"
							],
							"query": [
								{
									"key": "country",
									"value": "",
									"description": "*Optional*. A country: an ISO 3166-1 alpha-2 country code."
								},
								{
									"key": "limit",
									"value": "",
									"description": "*Optional*. The maximum number of items to return. Default: 20. Minimum: 1. Maximum: 50.\n"
								},
								{
									"key": "offset",
									"value": "",
									"description": "*Optional*. The index of the first item to return. Default: 0 (the first object). Use with `limit` to get the next set of items."
								}
							],
							"variable": [
								{
									"description": "The Symphonia category ID for the category.",
									"key": "{category_id}",
									"value": ""
								}
							]
						},
						"description": "# Description\nGet a list of Symphonia playlists tagged with a particular category.\n\n## Response Format\nOn success, the HTTP status code in the response header is `200` OK and the response body contains an array of simplified playlist objects (wrapped in a paging object) in JSON format. On error, the header status code is an error code and the response body contains an error object.\n\n\n### playlist object\n\n<table>\n  <thead>\n    <tr>\n      <th>Key</th>\n      <th>Value Type</th>\n      <th>Value Description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>collaborative</td>\n      <td>Boolean</td>\n      <td><code class=\"highlighter-rouge\">true</code> if the owner allows other users to modify the playlist.</td>\n    </tr>\n    <tr>\n      <td>description</td>\n      <td>string</td>\n      <td>The playlist description. <em>Only returned for modified, verified playlists, otherwise</em> <code class=\"highlighter-rouge\">null</code> .</td>\n    </tr>\n    <tr>\n      <td>href</td>\n      <td>string</td>\n      <td>A link to the Web API endpoint providing full details of the playlist.</td>\n    </tr>\n    <tr>\n      <td>id</td>\n      <td>string</td>\n      <td>The Symphonia ID for the playlist.</td>\n    </tr>\n    <tr>\n      <td>images</td>\n      <td>an array of image objects</td>\n      <td>Images for the playlist. The array may be empty or contain up to three images. The images are returned by size in descending order.</td>\n    </tr>\n    <tr>\n      <td>name</td>\n      <td>string</td>\n      <td>The name of the playlist.</td>\n    </tr>\n    <tr>\n      <td>owner</td>\n      <td>a user object</td>\n      <td>The user who owns the playlist</td>\n    </tr>\n    <tr>\n      <td>public</td>\n      <td>Boolean or <code class=\"highlighter-rouge\">null</code></td>\n      <td>The playlist’s public/private status: <code class=\"highlighter-rouge\">true</code> the playlist is public, <code class=\"highlighter-rouge\">false</code> the playlist is private, <code class=\"highlighter-rouge\">null</code> the playlist status is not relevant.</td>\n    </tr>\n    <tr>\n      <td>tracks</td>\n      <td>a tracks object</td>\n      <td>A collection containing a link ( <code class=\"highlighter-rouge\">href</code> ) to the Web API endpoint where full details of the playlist’s tracks can be retrieved, along with the <code class=\"highlighter-rouge\">total</code> number of tracks in the playlist. Note, a track object may be <code class=\"highlighter-rouge\">null</code>. This can happen if a track is no longer available.</td>\n    </tr>\n    <tr>\n      <td>type</td>\n      <td>string</td>\n      <td>The object type: “playlist”</td>\n    </tr>\n  </tbody>\n</table>\n\n### paging object\n\n<table>\n  <thead>\n    <tr>\n      <th>Key</th>\n      <th>Value Type</th>\n      <th>Value Description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>href</td>\n      <td>string</td>\n      <td>A link to the Web API endpoint returning the full result of the request.</td>\n    </tr>\n    <tr>\n      <td>items</td>\n      <td>an array of objects</td>\n      <td>The requested data.</td>\n    </tr>\n    <tr>\n      <td>limit</td>\n      <td>integer</td>\n      <td>The maximum number of items in the response (as set in the query or by default).</td>\n    </tr>\n    <tr>\n      <td>next</td>\n      <td>string</td>\n      <td>URL to the next page of items. ( <code class=\"highlighter-rouge\">null</code> if none)</td>\n    </tr>\n    <tr>\n      <td>offset</td>\n      <td>integer</td>\n      <td>The offset of the items returned (as set in the query or by default).</td>\n    </tr>\n    <tr>\n      <td>previous</td>\n      <td>string</td>\n      <td>URL to the previous page of items. ( <code class=\"highlighter-rouge\">null</code> if none)</td>\n    </tr>\n    <tr>\n      <td>total</td>\n      <td>integer</td>\n      <td>The total number of items available to return.</td>\n    </tr>\n  </tbody>\n</table>\n\n<br>\n\n## Request parameters"
					},
					"response": [
						{
							"name": "Get a Category's Playlists",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "*Required*. A valid access token from the Symphonia Accounts service.\n",
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {your access token}"
									}
								],
								"url": {
									"raw": "{{URL}}api/v1/browse/categories/:{category_id}/playlists?country=BR&limit=2",
									"host": [
										"{{URL}}api"
									],
									"path": [
										"v1",
										"browse",
										"categories",
										":{category_id}",
										"playlists"
									],
									"query": [
										{
											"key": "country",
											"value": "BR",
											"description": "*Optional*. A country: an ISO 3166-1 alpha-2 country code."
										},
										{
											"key": "limit",
											"value": "2",
											"description": "*Optional*. The maximum number of items to return. Default: 20. Minimum: 1. Maximum: 50.\n"
										}
									],
									"variable": [
										{
											"description": "The Symphonia category ID for the category.",
											"key": "{category_id}",
											"value": ""
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": null,
							"cookie": [],
							"body": "{\n    \"playlists\": {\n        \"href\": \"https://api.symphonia.com/v1/browse/categories/party/playlists?country=BR&offset=0&limit=2\",\n        \"items\": [\n            {\n                \"collaborative\": false,\n                \"description\": \"Chegou o grande dia, aperte o play e partiu fim de semana!\",\n                \"href\": \"https://api.symphonia.com/v1/playlists/37i9dQZF1DX8mBRYewE6or\",\n                \"id\": \"37i9dQZF1DX8mBRYewE6or\",\n                \"images\": [\n                    {\n                        \"height\": 300,\n                        \"url\": \"https://i.scdn.co/image/ab67706f00000002206a95fa5badbe1d33b65e14\",\n                        \"width\": 300\n                    }\n                ],\n                \"name\": \"Sexta\",\n                \"owner\": {\n                    \"display_name\": \"symphonia\",\n                    \"href\": \"https://api.symphonia.com/v1/users/symphonia\",\n                    \"id\": \"symphonia\",\n                    \"type\": \"user\"\n                },\n                \"primary_color\": null,\n                \"public\": null,\n                \"tracks\": {\n                    \"href\": \"https://api.symphonia.com/v1/playlists/37i9dQZF1DX8mBRYewE6or/tracks\",\n                    \"total\": 62\n                },\n                \"type\": \"playlist\"\n            \t\n            },\n            {\n                \"collaborative\": false,\n                \"description\": \"O batidão dos funks mais bombados pra agitar a pista do seu baile! [Conteúdo explícito]\",\n                \"href\": \"https://api.symphonia.com/v1/playlists/37i9dQZF1DWWmaszSfZpom\",\n                \"id\": \"37i9dQZF1DWWmaszSfZpom\",\n                \"images\": [\n                    {\n                        \"height\": 300,\n                        \"url\": \"https://pl.scdn.co/images/pl/default/68fae5be6747e445c6bb34655c2bc2a77b9d1439\",\n                        \"width\": 300\n                    }\n                ],\n                \"name\": \"Segue o Baile\",\n                \"owner\": {\n                    \"display_name\": \"symphonia\",\n                    \"href\": \"https://api.symphonia.com/v1/users/symphonia\",\n                    \"id\": \"symphonia\",\n                    \"type\": \"user\"\n                \t\n                },\n                \"primary_color\": null,\n                \"public\": null,\n                \"snapshot_id\": \"MTU3MzEyOTM2OCwwMDAwMDA5MDAwMDAwMTZlNDVkMTM0MmMwMDAwMDE2ZGNjMTY1NTFh\",\n                \"tracks\": {\n                    \"href\": \"https://api.symphonia.com/v1/playlists/37i9dQZF1DWWmaszSfZpom/tracks\",\n                    \"total\": 67\n                },\n                \"type\": \"playlist\"\n            }\n        ],\n        \"limit\": 2,\n        \"next\": \"https://api.symphonia.com/v1/browse/categories/party/playlists?country=BR&offset=2&limit=2\",\n        \"offset\": 0,\n        \"previous\": null,\n        \"total\": 37\n    }\n}"
						}
					]
				},
				{
					"name": "Get List of Categories",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "",
								"description": "*Required*. A valid access token from the Symphonia Accounts service.\n",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{URL}}api/v1/browse/categories?country=&limit=&offset=",
							"host": [
								"{{URL}}api"
							],
							"path": [
								"v1",
								"browse",
								"categories"
							],
							"query": [
								{
									"key": "country",
									"value": "",
									"description": "*Optional*. A country: an ISO 3166-1 alpha-2 country code. Provide this parameter if you want to narrow the list of returned categories to those relevant to a particular country. If omitted, the returned items will be globally relevant."
								},
								{
									"key": "limit",
									"value": "",
									"description": "*Optional*. The maximum number of items to return. Default: 20. Minimum: 1. Maximum: 50.\n"
								},
								{
									"key": "offset",
									"value": "",
									"description": "*Optional*. The index of the first item to return. Default: 0 (the first object). Use with `limit` to get the next set of items."
								}
							]
						},
						"description": "# Description\nGet a list of categories used to tag items in Symphonia (on, for example, the Symphonia player’s “Browse” tab).\n\n#Response Format\nOn success, the HTTP status code in the response header is `200` OK and the response body contains an object with a `categories` field, with an array of category objects (wrapped in a paging object) in JSON format. On error, the header status code is an error code and the response body contains an error object.\n\nOnce you have retrieved the list, you can use Get a Category to drill down further.\n\n## category object\n<table>\n  <thead>\n    <tr>\n      <th>Key</th>\n      <th>Value Type</th>\n      <th>Value Description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>href</td>\n      <td>string</td>\n      <td>A link to the Web API endpoint returning full details of the category.</td>\n    </tr>\n    <tr>\n      <td>icons</td>\n      <td>an array of image objects</td>\n      <td>The category icon, in various sizes.</td>\n    </tr>\n    <tr>\n      <td>id</td>\n      <td>string</td>\n      <td>The Symphonia category ID of the category.</td>\n    </tr>\n    <tr>\n      <td>name</td>\n      <td>string</td>\n      <td>The name of the category.</td>\n    </tr>\n  </tbody>\n</table>\n\n### paging object\n\n<table>\n  <thead>\n    <tr>\n      <th>Key</th>\n      <th>Value Type</th>\n      <th>Value Description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>href</td>\n      <td>string</td>\n      <td>A link to the Web API endpoint returning the full result of the request.</td>\n    </tr>\n    <tr>\n      <td>items</td>\n      <td>an array of objects</td>\n      <td>The requested data.</td>\n    </tr>\n    <tr>\n      <td>limit</td>\n      <td>integer</td>\n      <td>The maximum number of items in the response (as set in the query or by default).</td>\n    </tr>\n    <tr>\n      <td>next</td>\n      <td>string</td>\n      <td>URL to the next page of items. ( <code class=\"highlighter-rouge\">null</code> if none)</td>\n    </tr>\n    <tr>\n      <td>offset</td>\n      <td>integer</td>\n      <td>The offset of the items returned (as set in the query or by default).</td>\n    </tr>\n    <tr>\n      <td>previous</td>\n      <td>string</td>\n      <td>URL to the previous page of items. ( <code class=\"highlighter-rouge\">null</code> if none)</td>\n    </tr>\n    <tr>\n      <td>total</td>\n      <td>integer</td>\n      <td>The total number of items available to return.</td>\n    </tr>\n  </tbody>\n</table>\n\n<br>\n\n## Request parameters"
					},
					"response": [
						{
							"name": "Get List of Categories",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {your access token}",
										"description": "*Required*. A valid access token from the Symphonia Accounts service.\n",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{URL}}api/v1/browse/categories",
									"host": [
										"{{URL}}api"
									],
									"path": [
										"v1",
										"browse",
										"categories"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": null,
							"cookie": [],
							"body": "{\r\n  \"categories\" : {\r\n    \"href\" : \"https://api.symphonia.com/v1/browse/categories?offset=0&limit=20\",\r\n    \"items\" : [ {\r\n      \"href\" : \"https://api.symphonia.com/v1/browse/categories/toplists\",\r\n      \"icons\" : [ {\r\n        \"height\" : 275,\r\n        \"url\" : \"https://datsnxq1rwndn.cloudfront.net/media/derived/toplists_11160599e6a04ac5d6f2757f5511778f_0_0_275_275.jpg\",\r\n        \"width\" : 275\r\n      } ],\r\n      \"id\" : \"toplists\",\r\n      \"name\" : \"Top Lists\"\r\n    }, {\r\n      \"href\" : \"https://api.symphonia.com/v1/browse/categories/mood\",\r\n      \"icons\" : [ {\r\n        \"height\" : 274,\r\n        \"url\" : \"https://datsnxq1rwndn.cloudfront.net/media/original/mood-274x274_976986a31ac8c49794cbdc7246fd5ad7_274x274.jpg\",\r\n        \"width\" : 274\r\n      } ],\r\n      \"id\" : \"mood\",\r\n      \"name\" : \"Mood\"\r\n    }, {\r\n      \"href\" : \"https://api.symphonia.com/v1/browse/categories/party\",\r\n      \"icons\" : [ {\r\n        \"height\" : 274,\r\n        \"url\" : \"https://datsnxq1rwndn.cloudfront.net/media/derived/party-274x274_73d1907a7371c3bb96a288390a96ee27_0_0_274_274.jpg\",\r\n        \"width\" : 274\r\n      } ],\r\n      \"id\" : \"party\",\r\n      \"name\" : \"Party\"\r\n    }, {\r\n      \"href\" : \"https://api.symphonia.com/v1/browse/categories/pop\",\r\n      \"icons\" : [ {\r\n        \"height\" : 274,\r\n        \"url\" : \"https://datsnxq1rwndn.cloudfront.net/media/derived/pop-274x274_447148649685019f5e2a03a39e78ba52_0_0_274_274.jpg\",\r\n        \"width\" : 274\r\n      } ],\r\n      \"id\" : \"pop\",\r\n      \"name\" : \"Pop\"\r\n    }, {\r\n      \"href\" : \"https://api.symphonia.com/v1/browse/categories/workout\",\r\n      \"icons\" : [ {\r\n        \"height\" : 275,\r\n        \"url\" : \"https://datsnxq1rwndn.cloudfront.net/media/derived/workout_856581c1c545a5305e49a3cd8be804a0_0_0_275_275.jpg\",\r\n        \"width\" : 275\r\n      } ],\r\n      \"id\" : \"workout\",\r\n      \"name\" : \"Workout\"\r\n    }, ... ],\r\n    \"limit\" : 20,\r\n    \"next\" : \"https://api.symphonia.com/v1/browse/categories?offset=20&limit=20\",\r\n    \"offset\" : 0,\r\n    \"previous\" : null,\r\n    \"total\" : 31\r\n  }\r\n}"
						}
					]
				},
				{
					"name": "Get a List of Featured Playlists",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "",
								"description": "*Required*. A valid access token from the Symphonia Accounts service.\n",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{URL}}api/v1/browse/featured-playlists?country&timestamp&limit&offset",
							"host": [
								"{{URL}}api"
							],
							"path": [
								"v1",
								"browse",
								"featured-playlists"
							],
							"query": [
								{
									"key": "country",
									"value": null,
									"description": "*Optional*. A country: an ISO 3166-1 alpha-2 country code. Provide this parameter if you want the list of returned items to be relevant to a particular country. If omitted, the returned items will be relevant to all countries."
								},
								{
									"key": "timestamp",
									"value": null,
									"description": "*Optional*. A timestamp in ISO 8601 format: `yyyy-MM-ddTHH:mm:ss`. Use this parameter to specify the user’s local time to get results tailored for that specific date and time in the day. If not provided, the response defaults to the current UTC time. Example: “2014-10-23T09:00:00” for a user whose local time is 9AM. If there were no featured playlists (or there is no data) at the specified time, the response will revert to the current UTC time."
								},
								{
									"key": "limit",
									"value": null,
									"description": "*Optional*. The maximum number of items to return. Default: 20. Minimum: 1. Maximum: 50."
								},
								{
									"key": "offset",
									"value": null,
									"description": "*Optional*. The index of the first item to return. Default: 0 (the first object). Use with limit to get the next set of items."
								}
							]
						},
						"description": "# Description\nGet a list of Symphonia featured playlists (shown, for example, on a Symphonia player’s ‘Browse’ tab).\n\n## Response Format\nOn success, the HTTP status code in the response header is `200` OK and the response body contains a `message` and a `playlists` object. The `playlists` object contains an array of simplified playlist objects (wrapped in a paging object) in JSON format. On error, the header status code is an error code and the response body contains an error object.\n\nOnce you have retrieved the list of playlist objects, you can use Get a Playlist and Get a Playlist’s Tracks to drill down further.\n\n## Request parameters"
					},
					"response": [
						{
							"name": "Get a List of Featured Playlists",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "*Required*. A valid access token from the Symphonia Accounts service.\n",
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {your access token}"
									}
								],
								"url": {
									"raw": "{{URL}}api/v1/browse/featured-playlists?country=SE&limit=2",
									"host": [
										"{{URL}}api"
									],
									"path": [
										"v1",
										"browse",
										"featured-playlists"
									],
									"query": [
										{
											"key": "country",
											"value": "SE",
											"description": "*Optional*. A country: an ISO 3166-1 alpha-2 country code. Provide this parameter if you want the list of returned items to be relevant to a particular country. If omitted, the returned items will be relevant to all countries."
										},
										{
											"key": "limit",
											"value": "2",
											"description": "*Optional*. The maximum number of items to return. Default: 20. Minimum: 1. Maximum: 50."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": null,
							"cookie": [],
							"body": "{\n    \"message\": \"Monday morning music, coming right up!\",\n    \"playlists\": {\n        \"href\": \"https://api.symphonia.com/v1/browse/featured-playlists?country=SE&timestamp=2015-05-18T06:44:32&offset=0&limit=2\",\n        \"items\": [\n            {\n                \"collaborative\": false,\n                \"description\": \"Relaxed deep house to slowly help you get back on your feet and ready yourself for a productive week.\",\n                \"href\": \"https://api.symphonia.com/v1/users/symphonia/playlists/6ftJBzU2LLQcaKefMi7ee7\",\n                \"id\": \"6ftJBzU2LLQcaKefMi7ee7\",\n                \"images\": [\n                    {\n                        \"height\": 300,\n                        \"url\": \"https://i.scdn.co/image/7bd33c65ebd1e45975bbcbbf513bafe272f033c7\",\n                        \"width\": 300\n                    }\n                ],\n                \"name\": \"Monday Morning Mood\",\n                \"owner\": {\n                    \"href\": \"https://api.symphonia.com/v1/users/symphonia\",\n                    \"id\": \"symphonia\",\n                    \"type\": \"user\"\n                },\n                \"public\": null,\n                \"tracks\": {\n                    \"href\": \"https://api.symphonia.com/v1/users/symphonia/playlists/6ftJBzU2LLQcaKefMi7ee7/tracks\",\n                    \"total\": 245\n                },\n                \"type\": \"playlist\"\n            },\n            {\n                \"collaborative\": false,\n                \"description\": \"Du kommer studsa ur sängen med den här spellistan.\",\n                \"href\": \"https://api.symphonia.com/v1/users/symphonia__sverige/playlists/4uOEx4OUrkoGNZoIlWMUbO\",\n                \"id\": \"4uOEx4OUrkoGNZoIlWMUbO\",\n                \"images\": [\n                    {\n                        \"height\": 300,\n                        \"url\": \"https://i.scdn.co/image/24aa1d1b491dd529b9c03392f350740ed73438d8\",\n                        \"width\": 300\n                    }\n                ],\n                \"name\": \"Upp och hoppa!\",\n                \"owner\": {\n                    \"href\": \"https://api.symphonia.com/v1/users/symphonia__sverige\",\n                    \"id\": \"symphonia__sverige\",\n                    \"type\": \"user\"\n                },\n                \"public\": null,\n                \"tracks\": {\n                    \"href\": \"https://api.symphonia.com/v1/users/symphonia__sverige/playlists/4uOEx4OUrkoGNZoIlWMUbO/tracks\",\n                    \"total\": 38\n                },\n                \"type\": \"playlist\"\n            }\n        ],\n        \"limit\": 2,\n        \"next\": \"https://api.symphonia.com/v1/browse/featured-playlists?country=SE&timestamp=2015-05-18T06:44:32&offset=2&limit=2\",\n        \"offset\": 0,\n        \"previous\": null,\n        \"total\": 12\n    }\n}"
						}
					]
				},
				{
					"name": "Get List of new-releases",
					"request": {
						"method": "GET",
						"header": [
							{
								"description": "*Required*. A valid access token from the Symphonia Accounts service.\n",
								"key": "Authorization",
								"type": "text",
								"value": ""
							}
						],
						"url": {
							"raw": "{{URL}}api/v1/browse/new-releases?country&limit&offset",
							"host": [
								"{{URL}}api"
							],
							"path": [
								"v1",
								"browse",
								"new-releases"
							],
							"query": [
								{
									"key": "country",
									"value": null,
									"description": "*Optional*. A country: an ISO 3166-1 alpha-2 country code. Provide this parameter if you want the list of returned items to be relevant to a particular country. If omitted, the returned items will be relevant to all countries."
								},
								{
									"key": "limit",
									"value": null,
									"description": "*Optional*. The maximum number of items to return. Default: 20. Minimum: 1. Maximum: 50."
								},
								{
									"key": "offset",
									"value": null,
									"description": "*Optional*. The index of the first item to return. Default: 0 (the first object). Use with `limit` to get the next set of items."
								}
							]
						},
						"description": "#Description\nGet a list of new album releases featured in Symphonia (shown, for example, on a Symphonia player’s “Browse” tab).\n\n# Response Format\nOn success, the HTTP status code in the response header is `200` OK and the response body contains a `message` and an `albums` object. The `albums` object contains an array of simplified album objects (wrapped in a paging object) in JSON format. On error, the header status code is an error code and the response body contains an error object.\n\nOnce you have retrieved the list, you can use Get an Album’s Tracks to drill down further.\n\nThe results are returned in an order reflected within the Symphonia clients, and therefore may not be ordered by date.\n\n### album object\n\n<table>\n  <thead>\n    <tr>\n      <th>Key</th>\n      <th>Value Type</th>\n      <th>Value Description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>album_type</td>\n      <td>string</td>\n      <td>The type of the album: one of <code class=\"highlighter-rouge\">\"album\"</code> , <code class=\"highlighter-rouge\">\"single\"</code> , or <code class=\"highlighter-rouge\">\"compilation\"</code>.</td>\n    </tr>\n    <tr>\n      <td>artists</td>\n      <td>array of artist objects</td>\n      <td>The artists of the album. Each artist object includes a link in <code class=\"highlighter-rouge\">href</code> to more detailed information about the artist.</td>\n    </tr>\n    <tr>\n      <td>available_markets</td>\n      <td>array of strings</td>\n      <td>The markets in which the album is available: <a href=\"http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2\">ISO 3166-1 alpha-2 country codes</a>. Note that an album is considered available in a market when at least 1 of its tracks is available in that market.</td>\n    </tr>\n    <tr>\n      <td>copyrights</td>\n      <td>array of copyright objects</td>\n      <td>The copyright statements of the album.</td>\n    </tr>\n    <tr>\n      <td>genres</td>\n      <td>array of strings</td>\n      <td>A list of the genres used to classify the album. For example: <code class=\"highlighter-rouge\">\"Prog Rock\"</code> , <code class=\"highlighter-rouge\">\"Post-Grunge\"</code>. (If not yet classified, the array is empty.)</td>\n    </tr>\n    <tr>\n      <td>href</td>\n      <td>string</td>\n      <td>A link to the Web API endpoint providing full details of the album.</td>\n    </tr>\n    <tr>\n      <td>id</td>\n      <td>string</td>\n      <td>The Symphonia ID for the album.</td>\n    </tr>\n    <tr>\n      <td>images</td>\n      <td>array of image objects</td>\n      <td>The cover art for the album in various sizes, widest first.</td>\n    </tr>\n    <tr>\n      <td>label</td>\n      <td>string</td>\n      <td>The label for the album.</td>\n    </tr>\n    <tr>\n      <td>name</td>\n      <td>string</td>\n      <td>The name of the album. In case of an album takedown, the value may be an empty string.</td>\n    </tr>\n    <tr>\n      <td>popularity</td>\n      <td>integer</td>\n      <td>The popularity of the album. The value will be between 0 and 100, with 100 being the most popular. The popularity is calculated from the popularity of the album’s individual tracks.</td>\n    </tr>\n    <tr>\n      <td>release_date</td>\n      <td>string</td>\n      <td>The date the album was first released, for example <code class=\"highlighter-rouge\">\"1981-12-15\"</code>. Depending on the precision, it might be shown as <code class=\"highlighter-rouge\">\"1981\"</code> or <code class=\"highlighter-rouge\">\"1981-12\"</code>.</td>\n    </tr>\n    <tr>\n      <td>release_date_precision</td>\n      <td>string</td>\n      <td>The precision with which <code class=\"highlighter-rouge\">release_date</code> value is known: <code class=\"highlighter-rouge\">\"year\"</code> , <code class=\"highlighter-rouge\">\"month\"</code> , or <code class=\"highlighter-rouge\">\"day\"</code>.</td>\n    </tr>\n    <tr>\n      <td>tracks</td>\n      <td>array of track objects inside a paging object</td>\n      <td>The tracks of the album.</td>\n    </tr>\n    <tr>\n      <td>type</td>\n      <td>string</td>\n      <td>The object type: “album”</td>\n    </tr>\n  </tbody>\n</table>\n\n<br>\n\n## Request parameters"
					},
					"response": [
						{
							"name": "Get List of new-releases",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "*Required*. A valid access token from the Symphonia Accounts service.\n",
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {your access token}"
									}
								],
								"url": {
									"raw": "{{URL}}api/v1/browse/new-releases?country=SE",
									"host": [
										"{{URL}}api"
									],
									"path": [
										"v1",
										"browse",
										"new-releases"
									],
									"query": [
										{
											"key": "country",
											"value": "SE",
											"description": "*Optional*. A country: an ISO 3166-1 alpha-2 country code. Provide this parameter if you want the list of returned items to be relevant to a particular country. If omitted, the returned items will be relevant to all countries."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": null,
							"cookie": [],
							"body": "{\r\n  \"albums\" : {\r\n    \"href\" : \"https://api.symphonia.com/v1/browse/new-releases?country=SE&offset=0&limit=20\",\r\n    \"items\" : [ {\r\n      \"album_type\" : \"single\",\r\n      \"artists\" : [ {\r\n        \"href\" : \"https://api.symphonia.com/v1/artists/2RdwBSPQiwcmiDo9kixcl8\",\r\n        \"id\" : \"2RdwBSPQiwcmiDo9kixcl8\",\r\n        \"name\" : \"Pharrell Williams\",\r\n        \"type\" : \"artist\"\r\n      } ],\r\n      \"available_markets\" : [ \"AD\", \"AR\", \"AT\", \"AU\", \"BE\", \"BG\", \"BO\", \"BR\", \"CA\", \"CH\", \"CL\", \"CO\", \"CR\", \"CY\", \"CZ\", \"DE\", \"DK\", \"DO\", \"EC\", \"EE\", \"ES\", \"FI\", \"FR\", \"GB\", \"GR\", \"GT\", \"HK\", \"HN\", \"HU\", \"ID\", \"IE\", \"IS\", \"IT\", \"JP\", \"LI\", \"LT\", \"LU\", \"LV\", \"MC\", \"MT\", \"MX\", \"MY\", \"NI\", \"NL\", \"NO\", \"NZ\", \"PA\", \"PE\", \"PH\", \"PL\", \"PT\", \"PY\", \"SE\", \"SG\", \"SK\", \"SV\", \"TR\", \"TW\", \"US\", \"UY\" ],\r\n      \"href\" : \"https://api.symphonia.com/v1/albums/5ZX4m5aVSmWQ5iHAPQpT71\",\r\n      \"id\" : \"5ZX4m5aVSmWQ5iHAPQpT71\",\r\n      \"images\" : [ {\r\n        \"height\" : 640,\r\n        \"url\" : \"https://i.scdn.co/image/e6b635ebe3ef4ba22492f5698a7b5d417f78b88a\",\r\n        \"width\" : 640\r\n      }, {\r\n        \"height\" : 300,\r\n        \"url\" : \"https://i.scdn.co/image/92ae5b0fe64870c09004dd2e745a4fb1bf7de39d\",\r\n        \"width\" : 300\r\n      }, {\r\n        \"height\" : 64,\r\n        \"url\" : \"https://i.scdn.co/image/8a7ab6fc2c9f678308ba0f694ecd5718dc6bc930\",\r\n        \"width\" : 64\r\n      } ],\r\n      \"name\" : \"Runnin'\",\r\n      \"type\" : \"album\",\r\n      \"uri\" : \"symphonia:album:5ZX4m5aVSmWQ5iHAPQpT71\"\r\n    }, {\r\n      \"album_type\" : \"single\",\r\n      \"artists\" : [ {\r\n        \"href\" : \"https://api.symphonia.com/v1/artists/3TVXtAsR1Inumwj472S9r4\",\r\n        \"id\" : \"3TVXtAsR1Inumwj472S9r4\",\r\n        \"name\" : \"Drake\",\r\n        \"type\" : \"artist\"\r\n      } ],\r\n      \"available_markets\" : [ \"AD\", \"AR\", \"AT\", \"AU\", \"BE\", \"BG\", \"BO\", \"BR\", \"CH\", \"CL\", \"CO\", \"CR\", \"CY\", \"CZ\", \"DE\", \"DK\", \"DO\", \"EC\", \"EE\", \"ES\", \"FI\", \"FR\", \"GB\", \"GR\", \"GT\", \"HK\", \"HN\", \"HU\", \"ID\", \"IE\", \"IS\", \"IT\", \"JP\", \"LI\", \"LT\", \"LU\", \"LV\", \"MC\", \"MT\", \"MY\", \"NI\", \"NL\", \"NO\", \"NZ\", \"PA\", \"PE\", \"PH\", \"PL\", \"PT\", \"PY\", \"SE\", \"SG\", \"SK\", \"SV\", \"TR\", \"TW\", \"UY\" ],\r\n      \"href\" : \"https://api.symphonia.com/v1/albums/0geTzdk2InlqIoB16fW9Nd\",\r\n      \"id\" : \"0geTzdk2InlqIoB16fW9Nd\",\r\n      \"images\" : [ {\r\n        \"height\" : 640,\r\n        \"url\" : \"https://i.scdn.co/image/d40e9c3d22bde2fbdb2ecc03cccd7a0e77f42e4c\",\r\n        \"width\" : 640\r\n      }, {\r\n        \"height\" : 300,\r\n        \"url\" : \"https://i.scdn.co/image/dff06a3375f6d9b32ecb081eb9a60bbafecb5731\",\r\n        \"width\" : 300\r\n      }, {\r\n        \"height\" : 64,\r\n        \"url\" : \"https://i.scdn.co/image/808a02bd7fc59b0652c9df9f68675edbffe07a79\",\r\n        \"width\" : 64\r\n      } ],\r\n      \"name\" : \"Sneakin’\",\r\n      \"type\" : \"album\"\r\n    }, {\r\n    ...\r\n    } ],\r\n    \"limit\" : 20,\r\n    \"next\" : \"https://api.symphonia.com/v1/browse/new-releases?country=SE&offset=20&limit=20\",\r\n    \"offset\" : 0,\r\n    \"previous\" : null,\r\n    \"total\" : 500\r\n  }\r\n}"
						}
					]
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "follow",
			"item": [
				{
					"name": "Check if Current User Follows Artists or Users",
					"request": {
						"method": "GET",
						"header": [
							{
								"description": "*Required*. A valid access token from the Symphonia Accounts service.\n",
								"key": "Authorization",
								"type": "text",
								"value": ""
							}
						],
						"url": {
							"raw": "{{URL}}api/v1/me/following/contains?ids=&type=",
							"host": [
								"{{URL}}api"
							],
							"path": [
								"v1",
								"me",
								"following",
								"contains"
							],
							"query": [
								{
									"key": "ids",
									"value": "",
									"description": "*Required*. A comma-separated list of the Symphonia IDs for the albums. Maximum: 50 IDs."
								},
								{
									"key": "type",
									"value": "",
									"description": "*Required*. The ID type: either `artist` or `user`.\n\n"
								}
							]
						},
						"description": "# Description\r\n\r\nCheck to see if the current user is following one or more artists or other Symphonia users.\r\n\r\n\r\n\r\n## Response Format\r\nOn success, the HTTP status code in the response header is `200` OK and the response body contains a JSON array of `true` or `false` values, in the same order in which the `ids` were specified. On error, the header status code is an error code and the response body contains an error object.\r\n\r\n## Request parameters"
					},
					"response": [
						{
							"name": "Check if Current User Follows several artists",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {your access token}",
										"description": "*Required*. A valid access token from the Symphonia Accounts service.\n",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{URL}}v1/me/following/contains?ids=74ASZWbe4lXaubB36ztrGX,08td7MxkoHQkXnWAYD8d6Q&type=artist",
									"host": [
										"{{URL}}v1"
									],
									"path": [
										"me",
										"following",
										"contains"
									],
									"query": [
										{
											"key": "ids",
											"value": "74ASZWbe4lXaubB36ztrGX,08td7MxkoHQkXnWAYD8d6Q",
											"description": "*Required*. A comma-separated list of the Symphonia IDs for the albums. Maximum: 50 IDs."
										},
										{
											"key": "type",
											"value": "artist",
											"description": "Required. The ID type: either `artist` or `user`.\n\n"
										}
									]
								}
							},
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"body": "[ true, false ]"
						},
						{
							"name": "Check if Current User Follows another user",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {your access token}",
										"description": "*Required*. A valid access token from the Symphonia Accounts service.\n",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{URL}}api/v1/me/following/contains?ids=exampleuser01&type=user",
									"host": [
										"{{URL}}api"
									],
									"path": [
										"v1",
										"me",
										"following",
										"contains"
									],
									"query": [
										{
											"key": "ids",
											"value": "exampleuser01",
											"description": "*Required*. A comma-separated list of the Symphonia IDs for the albums. Maximum: 50 IDs."
										},
										{
											"key": "type",
											"value": "user",
											"description": "Required. The ID type: either `artist` or `user`.\n\n"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": null,
							"cookie": [],
							"body": "[\n    true\n]"
						}
					]
				},
				{
					"name": "Check if Users Follow a Playlist",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "",
								"description": "*Required*. A valid access token from the Symphonia Accounts service.\n",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{URL}}api/v1/playlists/:{playlist_id}/followers/contains?ids",
							"host": [
								"{{URL}}api"
							],
							"path": [
								"v1",
								"playlists",
								":{playlist_id}",
								"followers",
								"contains"
							],
							"query": [
								{
									"key": "ids",
									"value": null,
									"description": "*Required*. A comma-separated list of Symphonia User IDs ; the ids of the users that you want to check to see if they follow the playlist. Maximum: 5 ids."
								}
							],
							"variable": [
								{
									"key": "{playlist_id}",
									"value": "",
									"description": "The Symphonia ID of the playlist."
								}
							]
						},
						"description": "# Description\r\nCheck to see if one or more Symphonia users are following a specified playlist.\r\n\r\n## Response Format\r\n\r\nOn success, the HTTP status code in the response header is `200` OK and the response body contains a JSON array oftrue or false values, in the same order in which the ids were specified. On error, the header status code is an error code and the response body contains an error object.\r\n\r\n## Request parameters"
					},
					"response": [
						{
							"name": "Check if Users Follow a Playlist",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "*Required*. A valid access token from the Symphonia Accounts service.\n",
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {your access token}"
									}
								],
								"url": {
									"raw": "{{URL}}api/v1/playlists/:{playlist_id}/followers/contains?ids=possan,elogain",
									"host": [
										"{{URL}}api"
									],
									"path": [
										"v1",
										"playlists",
										":{playlist_id}",
										"followers",
										"contains"
									],
									"query": [
										{
											"key": "ids",
											"value": "possan,elogain",
											"description": "*Required*. A comma-separated list of Symphonia User IDs ; the ids of the users that you want to check to see if they follow the playlist. Maximum: 5 ids."
										}
									],
									"variable": [
										{
											"description": "The Symphonia ID of the playlist.",
											"key": "{playlist_id}",
											"value": "2v3iNvBX8Ay1Gt2uXtUKUT"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": null,
							"cookie": [],
							"body": "[ true, false ]"
						}
					]
				},
				{
					"name": "Follow Artists or Users",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "",
								"description": "*Required*. A valid access token from the Symphonia Accounts service",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": "*Required*. The content type of the request body:",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{URL}}api/v1/me/following?type=",
							"host": [
								"{{URL}}api"
							],
							"path": [
								"v1",
								"me",
								"following"
							],
							"query": [
								{
									"key": "type",
									"value": "",
									"description": "*Required*. The ID type: either `artist` or `user`.\n"
								}
							]
						},
						"description": "# Description\r\nAdd the current user as a follower of one or more artists or other Symphonia users.\r\n\r\n\r\n\r\n## Response Format\r\nOn success, the HTTP status code in the response header is `204` No Content and the response body is empty. On error, the header status code is an error code and the response body contains an error object.\r\n\r\n## Request Parameters\r\n\r\n### Body Parameters\r\n\r\n<table>\r\n  <thead>\r\n    <tr>\r\n      <th>Request Body Data</th>\r\n      <th>Value Type</th>\r\n      <th>Value</th>\r\n    </tr>\r\n  </thead>\r\n  <tbody>\r\n    <tr>\r\n      <td>ids</td>\r\n      <td>array of Symphonia ID strings</td>\r\n      <td><em>Required</em>. A JSON array of the artist or user Symphonia IDs. For example: <code class=\"highlighter-rouge\">{ids:[\"74ASZWbe4lXaubB36ztrGX\", \"08td7MxkoHQkXnWAYD8d6Q\"]}</code>. A maximum of 50 IDs can be sent in one request.</td>\r\n    </tr>\r\n  </tbody>\r\n</table>\r\n\r\n<br>"
					},
					"response": [
						{
							"name": "Follow Artists or Users",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"description": "*Required*. A valid access token from the Symphonia Accounts service",
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {your access token}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"description": "*Required*. The content type of the request body:",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"ids\":[\"exampleuser01\"]}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}api/v1/me/following?type=user",
									"host": [
										"{{URL}}api"
									],
									"path": [
										"v1",
										"me",
										"following"
									],
									"query": [
										{
											"key": "type",
											"value": "user",
											"description": "*Required*. The ID type: either `artist` or `user`.\n"
										}
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"body": null
						}
					]
				},
				{
					"name": "Follow a Playlist",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "",
								"description": "*Required*. A valid access token from the Symphonia Accounts service",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": "*Required*. The content type of the request body:",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{URL}}api/v1/playlists/:{playlist_id}/followers",
							"host": [
								"{{URL}}api"
							],
							"path": [
								"v1",
								"playlists",
								":{playlist_id}",
								"followers"
							],
							"variable": [
								{
									"key": "{playlist_id}",
									"value": "",
									"description": "The Symphonia ID of the playlist. Any playlist can be followed, regardless of its public/private status, as long as you know its playlist ID."
								}
							]
						},
						"description": "# Description\r\nAdd the current user as a follower of a playlist.\r\n\r\n\r\n## Response Format\r\nOn success, the HTTP status code in the response header is 200 OK and the response body is empty. On error, the header status code is an error code and the response body contains an error object.\r\n\r\n## Request Parameters\r\n\r\n### Body Parameters\r\n<table>\r\n  <thead>\r\n    <tr>\r\n      <th>Request Body Data</th>\r\n      <th>Value Type</th>\r\n      <th>Value</th>\r\n    </tr>\r\n  </thead>\r\n  <tbody>\r\n    <tr>\r\n      <td>public</td>\r\n      <td>Boolean</td>\r\n      <td><em>Optional</em>. Defaults to <code class=\"highlighter-rouge\">true</code>. If <code class=\"highlighter-rouge\">true</code> the playlist will be included in user’s public playlists, if <code class=\"highlighter-rouge\">false</code> it will remain private.</td>\r\n    </tr>\r\n  </tbody>\r\n</table>"
					},
					"response": [
						{
							"name": "Follow a Playlist",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"description": "*Required*. A valid access token from the Symphonia Accounts service",
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {your access token"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"description": "*Required*. The content type of the request body:",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"public\": true\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}api/v1/playlists/:{playlist_id}/followers",
									"host": [
										"{{URL}}api"
									],
									"path": [
										"v1",
										"playlists",
										":{playlist_id}",
										"followers"
									],
									"variable": [
										{
											"description": "The Symphonia ID of the playlist. Any playlist can be followed, regardless of its public/private status, as long as you know its playlist ID.",
											"key": "{playlist_id}",
											"value": "2v3iNvBX8Ay1Gt2uXtUKUT"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": null,
							"cookie": [],
							"body": "{\n\t\"status\": \"success\"\n}"
						}
					]
				},
				{
					"name": "Get User's Followed Artists",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "",
								"description": "*Required*. A valid access token from the Symphonia Accounts service.\n",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{URL}}api/v1/me/following?type=&limit&after",
							"host": [
								"{{URL}}api"
							],
							"path": [
								"v1",
								"me",
								"following"
							],
							"query": [
								{
									"key": "type",
									"value": "",
									"description": "*Required*. The ID type: `artist`.\n"
								},
								{
									"key": "limit",
									"value": null,
									"description": "*Optional*. The maximum number of items to return. Default: 20. Minimum: 1. Maximum: 50."
								},
								{
									"key": "after",
									"value": null,
									"description": "*Optional*. The last artist ID retrieved from the previous request."
								}
							]
						},
						"description": "# Description\r\nGet the current user’s followed artists.\r\n\r\n\r\n## Response Format\r\nOn success, the HTTP status code in the response header is `200` OK and the response body contains an artists object. The artists object in turn contains a cursor-based paging object of Artists. On error, the header status code is an error code and the response body contains an error object.\r\n\r\n### Artist object\r\n\r\n<table>\r\n  <thead>\r\n    <tr>\r\n      <th>Key</th>\r\n      <th>Value Type</th>\r\n      <th>Value Description</th>\r\n    </tr>\r\n  </thead>\r\n  <tbody>\r\n    <tr>\r\n      <td>followers</td>\r\n      <td>A followers object</td>\r\n      <td>Information about the followers of the artist.</td>\r\n    </tr>\r\n    <tr>\r\n      <td>genres</td>\r\n      <td>array of strings</td>\r\n      <td>A list of the genres the artist is associated with. For example: <code class=\"highlighter-rouge\">\"Prog Rock\"</code> , <code class=\"highlighter-rouge\">\"Post-Grunge\"</code>. (If not yet classified, the array is empty.)</td>\r\n    </tr>\r\n    <tr>\r\n      <td>href</td>\r\n      <td>string</td>\r\n      <td>A link to the Web API endpoint providing full details of the artist.</td>\r\n    </tr>\r\n    <tr>\r\n      <td>id</td>\r\n      <td>string</td>\r\n      <td>The Symphonia ID for the artist.</td>\r\n    </tr>\r\n    <tr>\r\n      <td>images</td>\r\n      <td>array of image objects</td>\r\n      <td>Images of the artist in various sizes, widest first.</td>\r\n    </tr>\r\n    <tr>\r\n      <td>name</td>\r\n      <td>string</td>\r\n      <td>The name of the artist</td>\r\n    </tr>\r\n    <tr>\r\n      <td>popularity</td>\r\n      <td>int</td>\r\n      <td>The popularity of the artist. The value will be between 0 and 100, with 100 being the most popular. The artist’s popularity is calculated from the popularity of all the artist’s tracks.</td>\r\n    </tr>\r\n    <tr>\r\n      <td>type</td>\r\n      <td>string</td>\r\n      <td>The object type: <code class=\"highlighter-rouge\">\"artist\"</code></td>\r\n    </tr>\r\n  </tbody>\r\n</table>\r\n\r\n### cursor-based paging object\r\n<table>\r\n  <thead>\r\n    <tr>\r\n      <th>Key</th>\r\n      <th>Value Type</th>\r\n      <th>Value Description</th>\r\n    </tr>\r\n  </thead>\r\n  <tbody>\r\n    <tr>\r\n      <td>href</td>\r\n      <td>string</td>\r\n      <td>A link to the Web API endpoint returning the full result of the request.</td>\r\n    </tr>\r\n    <tr>\r\n      <td>items</td>\r\n      <td>an array of objects</td>\r\n      <td>The requested data.</td>\r\n    </tr>\r\n    <tr>\r\n      <td>limit</td>\r\n      <td>integer</td>\r\n      <td>The maximum number of items in the response (as set in the query or by default).</td>\r\n    </tr>\r\n    <tr>\r\n      <td>next</td>\r\n      <td>string</td>\r\n      <td>URL to the next page of items. ( <code class=\"highlighter-rouge\">null</code> if none)</td>\r\n    </tr>\r\n    <tr>\r\n      <td>cursors</td>\r\n      <td>cursor object</td>\r\n      <td>The cursors used to find the next set of items.</td>\r\n    </tr>\r\n    <tr>\r\n      <td>total</td>\r\n      <td>integer</td>\r\n      <td>The total number of items available to return.</td>\r\n    </tr>\r\n  </tbody>\r\n</table>\r\n<br>\r\n\r\n## Request Parameters"
					},
					"response": [
						{
							"name": "Get User's Followed Artists",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {your access token}",
										"description": "*Required*. A valid access token from the Symphonia Accounts service.\n",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{URL}}api/v1/me/following?type=artist",
									"host": [
										"{{URL}}api"
									],
									"path": [
										"v1",
										"me",
										"following"
									],
									"query": [
										{
											"key": "type",
											"value": "artist",
											"description": "*Required*. The ID type: `artist`.\n"
										}
									]
								}
							},
							"_postman_previewlanguage": "json",
							"header": null,
							"cookie": [],
							"body": "{\r\n  \"artists\" : {\r\n    \"items\" : [ {\r\n      \"followers\" : {\r\n        \"href\" : null,\r\n        \"total\" : 7753\r\n      },\r\n      \"genres\" : [ \"swedish hip hop\" ],\r\n      \"href\" : \"https://api.symphonia.com/v1/artists/0I2XqVXqHScXjHhk6AYYRe\",\r\n      \"id\" : \"0I2XqVXqHScXjHhk6AYYRe\",\r\n      \"images\" : [ {\r\n        \"height\" : 640,\r\n        \"url\" : \"https://i.scdn.co/image/2c8c0cea05bf3d3c070b7498d8d0b957c4cdec20\",\r\n        \"width\" : 640\r\n      }, {\r\n        \"height\" : 300,\r\n        \"url\" : \"https://i.scdn.co/image/394302b42c4b894786943e028cdd46d7baaa29b7\",\r\n        \"width\" : 300\r\n      }, {\r\n        \"height\" : 64,\r\n        \"url\" : \"https://i.scdn.co/image/ca9df7225ade6e5dfc62e7076709ca3409a7cbbf\",\r\n        \"width\" : 64\r\n      } ],\r\n      \"name\" : \"Afasi & Filthy\",\r\n      \"popularity\" : 54,\r\n      \"type\" : \"artist\"\r\n   },{\r\n     ...\r\n   }],\r\n  \"next\" : \"https://api.symphonia.com/v1/users/thelinmichael/following?type=artist&after=0aV6DOiouImYTqrR5YlIqx&limit=20\",\r\n  \"total\" : 183,\r\n    \"cursors\" : {\r\n      \"after\" : \"0aV6DOiouImYTqrR5YlIqx\"\r\n    },\r\n   \"limit\" : 20,\r\n   \"href\" : \"https://api.symphonia.com/v1/users/thelinmichael/following?type=artist&limit=20\"\r\n  }\r\n}"
						}
					]
				},
				{
					"name": "Unfollow Artists or Users",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"description": "*Required*. A valid access token from the Symphonia Accounts service",
								"key": "Authorization",
								"type": "text",
								"value": ""
							},
							{
								"description": "*Required*. The content type of the request body:",
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{URL}}api/v1/me/following?type",
							"host": [
								"{{URL}}api"
							],
							"path": [
								"v1",
								"me",
								"following"
							],
							"query": [
								{
									"key": "type",
									"value": null,
									"description": "*Required*. The ID type: either `artist` or `user`."
								}
							]
						},
						"description": "# Description\r\nRemove the current user as a follower of one or more artists or other Symphonia users.\r\n\r\n## Response Format\r\nOn success, the HTTP status code in the response header is `204` No Content and the response body is empty. On error, the header status code is an error code and the response body contains an error object.\r\n\r\n## Request Parameters\r\n\r\n### Body Parameters\r\n\r\n<table>\r\n  <thead>\r\n    <tr>\r\n      <th>Request Body Data</th>\r\n      <th>Value Type</th>\r\n      <th>Value</th>\r\n    </tr>\r\n  </thead>\r\n  <tbody>\r\n    <tr>\r\n      <td>ids</td>\r\n      <td>array of Symphonia ID strings</td>\r\n      <td><em>Required</em>. A JSON array of the artist or user Symphonia IDs. For example: <code class=\"highlighter-rouge\">{ids:[\"74ASZWbe4lXaubB36ztrGX\", \"08td7MxkoHQkXnWAYD8d6Q\"]}</code>. A maximum of 50 IDs can be sent in one request.</td>\r\n    </tr>\r\n  </tbody>\r\n</table>\r\n<br>"
					},
					"response": [
						{
							"name": "Unfollow Artists or Users",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"description": "*Required*. A valid access token from the Symphonia Accounts service",
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {your access token}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"description": "*Required*. The content type of the request body:",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"ids\":[\"exampleuser01\"]}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}api/v1/me/following?type=user",
									"host": [
										"{{URL}}api"
									],
									"path": [
										"v1",
										"me",
										"following"
									],
									"query": [
										{
											"key": "type",
											"value": "user"
										}
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"body": null
						}
					]
				},
				{
					"name": "Unfollow a Playlist",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "",
								"description": "*Required*. A valid access token from the Symphonia Accounts service",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{URL}}api/v1/playlists/:{playlist_id}/followers",
							"host": [
								"{{URL}}api"
							],
							"path": [
								"v1",
								"playlists",
								":{playlist_id}",
								"followers"
							],
							"variable": [
								{
									"key": "{playlist_id}",
									"value": "",
									"description": "The Symphonia ID of the playlist that is to be no longer followed."
								}
							]
						},
						"description": "# Description\r\nRemove the current user as a follower of a playlist.\r\n\r\n## Response Format\r\nOn success, the HTTP status code in the response header is `200` OK and the response body is empty. On error, the header status code is an error code and the response body contains an error object.\r\n\r\n## Request Parameters"
					},
					"response": [
						{
							"name": "Unfollow a Playlist",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"description": "*Required*. A valid access token from the Symphonia Accounts service",
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {your access token}"
									}
								],
								"url": {
									"raw": "{{URL}}api/v1/playlists/:{playlist_id}/followers",
									"host": [
										"{{URL}}api"
									],
									"path": [
										"v1",
										"playlists",
										":{playlist_id}",
										"followers"
									],
									"variable": [
										{
											"description": "The Symphonia ID of the playlist that is to be no longer followed.",
											"key": "{playlist_id}",
											"value": "65V6djkcVRyOStLd8nza8E"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": null,
							"cookie": [],
							"body": ""
						}
					]
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "library",
			"item": [
				{
					"name": " Check User's Saved Albums",
					"request": {
						"method": "GET",
						"header": [
							{
								"description": "*Required*. A valid access token from the Symphonia Accounts service.\n\n",
								"key": "Authorization",
								"type": "text",
								"value": ""
							}
						],
						"url": {
							"raw": "{{URL}}api/v1/me/albums/contains?ids",
							"host": [
								"{{URL}}api"
							],
							"path": [
								"v1",
								"me",
								"albums",
								"contains"
							],
							"query": [
								{
									"key": "ids",
									"value": null,
									"description": "*Required*. A comma-separated list of the Symphonia IDs for the albums. Maximum: 50 IDs."
								}
							]
						},
						"description": "# Description\r\n\r\nCheck if one or more albums is already saved in the current Symphonia user’s ‘Your Music’ library.\r\n\r\n## Response Format\r\n\r\nOn success, the HTTP status code in the response header is `200` OK and the response body contains a JSON array of `true` or `false` values, in the same order in which the `ids` were specified. On error, the header status code is an error code and the response body contains an error object.\r\n\r\n## Request parameters"
					},
					"response": [
						{
							"name": " Check User's Saved Albums",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "*Required*. A valid access token from the Symphonia Accounts service.\n\n",
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {your access token}"
									}
								],
								"url": {
									"raw": "{{URL}}api/v1/me/albums/contains?ids=0pJJgBzj26qnE1nSQUxaB0,5ZAKzV4ZIa5Gt7z29OYHv0",
									"host": [
										"{{URL}}api"
									],
									"path": [
										"v1",
										"me",
										"albums",
										"contains"
									],
									"query": [
										{
											"key": "ids",
											"value": "0pJJgBzj26qnE1nSQUxaB0,5ZAKzV4ZIa5Gt7z29OYHv0",
											"description": "*Required*. A comma-separated list of the Symphonia IDs for the albums. Maximum: 50 IDs."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": null,
							"cookie": [],
							"body": "[ false, true ]"
						}
					]
				},
				{
					"name": "Check User's Saved Tracks",
					"request": {
						"method": "GET",
						"header": [
							{
								"description": "*Required*. A valid access token from the Symphonia Accounts service.\n\n",
								"key": "Authorization",
								"type": "text",
								"value": ""
							}
						],
						"url": {
							"raw": "{{URL}}api/v1/me/tracks/contains?ids",
							"host": [
								"{{URL}}api"
							],
							"path": [
								"v1",
								"me",
								"tracks",
								"contains"
							],
							"query": [
								{
									"key": "ids",
									"value": "",
									"description": "*Required*. A comma-separated list of the Symphonia IDs for the albums. Maximum: 50 IDs."
								}
							]
						},
						"description": "# Description\r\n\r\nCheck if one or more tracks is already saved in the current Symphonia user’s ‘Your Music’ library.\r\n\r\n## Response Format\r\n\r\nOn success, the HTTP status code in the response header is `200` OK and the response body contains a JSON array of `true` or `false` values, in the same order in which the `ids` were specified. On error, the header status code is an error code and the response body contains an error object.\r\n\r\n## Request parameters"
					},
					"response": [
						{
							"name": "Check User's Saved Tracks",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "*Required*. A valid access token from the Symphonia Accounts service.\n\n",
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {your access token}"
									}
								],
								"url": {
									"raw": "{{URL}}api/v1/me/tracks/contains?ids=0udZHhCi7p1YzMlvI4fXoK,3SF5puV5eb6bgRSxBeMOk9",
									"host": [
										"{{URL}}api"
									],
									"path": [
										"v1",
										"me",
										"tracks",
										"contains"
									],
									"query": [
										{
											"key": "ids",
											"value": "0udZHhCi7p1YzMlvI4fXoK,3SF5puV5eb6bgRSxBeMOk9",
											"description": "*Required*. A comma-separated list of the Symphonia IDs for the albums. Maximum: 50 IDs."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": null,
							"cookie": [],
							"body": "[ true, false ]"
						}
					]
				},
				{
					"name": "Get Current User's Saved Albums",
					"request": {
						"method": "GET",
						"header": [
							{
								"description": "*Required*. A valid access token from the Symphonia Accounts service.\n\n",
								"key": "Authorization",
								"type": "text",
								"value": ""
							}
						],
						"url": {
							"raw": "{{URL}}api/v1/me/albums?limit&offset",
							"host": [
								"{{URL}}api"
							],
							"path": [
								"v1",
								"me",
								"albums"
							],
							"query": [
								{
									"key": "limit",
									"value": null,
									"description": "*Optional*. The maximum number of objects to return. Default: 20. Minimum: 1. Maximum: 50."
								},
								{
									"key": "offset",
									"value": null,
									"description": "*Optional*. The index of the first object to return. Default: 0 (i.e., the first object). Use with `limit` to get the next set of objects."
								}
							]
						},
						"description": "# Description\r\n\r\nGet a list of the albums saved in the current symphonia user’s ‘Your Music’ library.\r\n\r\n## Response Format\r\n\r\nOn success, the HTTP status code in the response header is 200 OK and the response body contains an array of album objects (wrapped in a paging object) in JSON format. Each album object is accompanied by a timestamp (added_at) to show when it was added. There is also an etag in the header that can be used in future conditional requests.\r\nOn error, the header status code is an error code and the response body contains an error object.\r\n\r\n### saved album object\r\n\r\n<table>\r\n  <thead>\r\n    <tr>\r\n      <th>Key</th>\r\n      <th>Value Type</th>\r\n      <th>Value Description</th>\r\n    </tr>\r\n  </thead>\r\n  <tbody>\r\n    <tr>\r\n      <td>added_at</td>\r\n      <td>a timestamp</td>\r\n      <td>The date and time the album was saved.</td>\r\n    </tr>\r\n    <tr>\r\n      <td>album</td>\r\n      <td>a album object</td>\r\n      <td>Information about the album.</td>\r\n    </tr>\r\n  </tbody>\r\n</table>\r\n\r\n### paging object\r\n\r\n<table>\r\n  <thead>\r\n    <tr>\r\n      <th>Key</th>\r\n      <th>Value Type</th>\r\n      <th>Value Description</th>\r\n    </tr>\r\n  </thead>\r\n  <tbody>\r\n    <tr>\r\n      <td>href</td>\r\n      <td>string</td>\r\n      <td>A link to the Web API endpoint returning the full result of the request.</td>\r\n    </tr>\r\n    <tr>\r\n      <td>items</td>\r\n      <td>an array of objects</td>\r\n      <td>The requested data.</td>\r\n    </tr>\r\n    <tr>\r\n      <td>limit</td>\r\n      <td>integer</td>\r\n      <td>The maximum number of items in the response (as set in the query or by default).</td>\r\n    </tr>\r\n    <tr>\r\n      <td>next</td>\r\n      <td>string</td>\r\n      <td>URL to the next page of items. ( <code class=\"highlighter-rouge\">null</code> if none)</td>\r\n    </tr>\r\n    <tr>\r\n      <td>offset</td>\r\n      <td>integer</td>\r\n      <td>The offset of the items returned (as set in the query or by default).</td>\r\n    </tr>\r\n    <tr>\r\n      <td>previous</td>\r\n      <td>string</td>\r\n      <td>URL to the previous page of items. ( <code class=\"highlighter-rouge\">null</code> if none)</td>\r\n    </tr>\r\n    <tr>\r\n      <td>total</td>\r\n      <td>integer</td>\r\n      <td>The total number of items available to return.</td>\r\n    </tr>\r\n  </tbody>\r\n</table>\r\n\r\n<br>\r\n\r\n## Request parameters"
					},
					"response": [
						{
							"name": "Get Current User's Saved Albums",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "*Required*. A valid access token from the Symphonia Accounts service.\n\n",
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {your access token}"
									}
								],
								"url": {
									"raw": "{{URL}}api/v1/me/albums",
									"host": [
										"{{URL}}api"
									],
									"path": [
										"v1",
										"me",
										"albums"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": null,
							"cookie": [],
							"body": "{\r\n  \"href\" : \"https://api.symphonia.com/v1/me/albums?offset=0&limit=1\",\r\n  \"items\" : [ {\r\n    \"added_at\" : \"2015-11-26T19:13:31Z\",\r\n    \"album\" : {\r\n      \"album_type\" : \"album\",\r\n      \"artists\" : [ {\r\n        \"href\" : \"https://api.symphonia.com/v1/artists/58RMTlPJKbmpmVk1AmRK3h\",\r\n        \"id\" : \"58RMTlPJKbmpmVk1AmRK3h\",\r\n        \"name\" : \"Abidaz\",\r\n        \"type\" : \"artist\"\r\n      } ],\r\n      \"available_markets\" : [ \"AR\", \"AT\", \"AU\", \"BE\", \"BR\", \"CL\", \"CO\", \"CY\", \"CZ\", \"DE\" ],\r\n      \"copyrights\" : [ {\r\n        \"text\" : \"(C) 2013 Soblue Music Group AB, Under exclusive license to Universal Music AB\",\r\n        \"type\" : \"C\"\r\n      }, {\r\n        \"text\" : \"(P) 2013 Soblue Music Group AB, Under exclusive license to Universal Music AB\",\r\n        \"type\" : \"P\"\r\n      } ],\r\n      \"genres\" : [ ],\r\n      \"href\" : \"https://api.symphonia.com/v1/albums/5m4VYOPoIpkV0XgOiRKkWC\",\r\n      \"id\" : \"5m4VYOPoIpkV0XgOiRKkWC\",\r\n      \"images\" : [ {\r\n        \"height\" : 640,\r\n        \"url\" : \"https://i.scdn.co/image/ccbb1e3bea2461e69783895e880965b171e29f4c\",\r\n        \"width\" : 640\r\n      }, {\r\n        \"height\" : 300,\r\n        \"url\" : \"https://i.scdn.co/image/2210b7d23f320a2cab2736bd3b3b948415dd21d8\",\r\n        \"width\" : 300\r\n      }, {\r\n        \"height\" : 64,\r\n        \"url\" : \"https://i.scdn.co/image/609153aca7f4760136d97fbaccdb4ec0757e4c9e\",\r\n        \"width\" : 64\r\n      } ],\r\n      \"name\" : \"In & ut\",\r\n      \"popularity\" : 49,\r\n      \"release_date\" : \"2013-01-01\",\r\n      \"release_date_precision\" : \"day\",\r\n      \"tracks\" : {\r\n        \"href\" : \"https://api.symphonia.com/v1/albums/5m4VYOPoIpkV0XgOiRKkWC/tracks?offset=0&limit=50\",\r\n        \"items\" : [ {\r\n          \"artists\" : [ {\r\n            \"href\" : \"https://api.symphonia.com/v1/artists/58RMTlPJKbmpmVk1AmRK3h\",\r\n            \"id\" : \"58RMTlPJKbmpmVk1AmRK3h\",\r\n            \"name\" : \"Abidaz\",\r\n            \"type\" : \"artist\"\r\n          }, {\r\n            \"href\" : \"https://api.symphonia.com/v1/artists/1l63szZeUpN1m87MOD1u7K\",\r\n            \"id\" : \"1l63szZeUpN1m87MOD1u7K\",\r\n            \"name\" : \"Chapee\",\r\n            \"type\" : \"artist\"\r\n          }, {\r\n            \"href\" : \"https://api.symphonia.com/v1/artists/1VLf7Ncxb5Jga6eyd3jh6K\",\r\n            \"id\" : \"1VLf7Ncxb5Jga6eyd3jh6K\",\r\n            \"name\" : \"C.U.P\",\r\n            \"type\" : \"artist\"\r\n          } ],\r\n          \"available_markets\" : [ \"AR\", \"AT\", \"AU\", \"BE\", \"BR\", \"CL\", \"CO\", \"CY\", \"CZ\", \"DE\" ],\r\n          \"duration_ms\" : 170920,\r\n          \"explicit\" : false,\r\n          \"href\" : \"https://api.symphonia.com/v1/tracks/3VNWq8rTnQG6fM1eldSpZ0\",\r\n          \"id\" : \"3VNWq8rTnQG6fM1eldSpZ0\",\r\n          \"name\" : \"E.C.\",\r\n          \"type\" : \"track\"\r\n        }, {\r\n          ...\r\n        }, {\r\n          \"artists\" : [ {\r\n            \"href\" : \"https://api.symphonia.com/v1/artists/58RMTlPJKbmpmVk1AmRK3h\",\r\n            \"id\" : \"58RMTlPJKbmpmVk1AmRK3h\",\r\n            \"name\" : \"Abidaz\",\r\n            \"type\" : \"artist\"\r\n          } ],\r\n          \"available_markets\" : [ \"AR\", \"AT\", \"AU\", \"BE\", \"BR\", \"CL\", \"CO\", \"CY\", \"CZ\", \"DE\", \"DK\", \"EE\" ],\r\n          \"duration_ms\" : 165946,\r\n          \"explicit\" : false,\r\n          \"href\" : \"https://api.symphonia.com/v1/tracks/6ZrVKylVlxkaXHj42O0q2r\",\r\n          \"id\" : \"6ZrVKylVlxkaXHj42O0q2r\",\r\n          \"name\" : \"Råknas - Radio Edit\",\r\n          \"type\" : \"track\",\r\n        } ],\r\n        \"limit\" : 50,\r\n        \"next\" : null,\r\n        \"offset\" : 0,\r\n        \"previous\" : null,\r\n        \"total\" : 13\r\n      },\r\n      \"type\" : \"album\",\r\n    }\r\n  } ],\r\n  \"limit\" : 1,\r\n  \"next\" : \"https://api.symphonia.com/v1/me/albums?offset=1&limit=1\",\r\n  \"offset\" : 0,\r\n  \"previous\" : null,\r\n  \"total\" : 19\r\n}"
						}
					]
				},
				{
					"name": "Get a User's Saved Tracks",
					"request": {
						"method": "GET",
						"header": [
							{
								"description": "*Required*. A valid access token from the Symphonia Accounts service.\n\n",
								"key": "Authorization",
								"type": "text",
								"value": ""
							}
						],
						"url": {
							"raw": "{{URL}}api/v1/me/tracks?limit&offset",
							"host": [
								"{{URL}}api"
							],
							"path": [
								"v1",
								"me",
								"tracks"
							],
							"query": [
								{
									"key": "limit",
									"value": null,
									"description": "*Optional*. The maximum number of objects to return. Default: 20. Minimum: 1. Maximum: 50."
								},
								{
									"key": "offset",
									"value": null,
									"description": "*Optional*. The index of the first object to return. Default: 0 (i.e., the first object). Use with `limit` to get the next set of objects."
								}
							]
						},
						"description": "# Description\r\n\r\nGet a list of the songs saved in the current Symphonia user’s ‘Your Music’ library.\r\n\r\n\r\n## Response Format\r\nOn success, the HTTP status code in the response header is `200` OK and the response body contains an array of saved track objects (wrapped in a paging object) in JSON format. On error, the header status code is an error code and the response body contains an error object.\r\n\r\n\r\n## saved track object\r\n<table>\r\n  <thead>\r\n    <tr>\r\n      <th>Key</th>\r\n      <th>Value Type</th>\r\n      <th>Value Description</th>\r\n    </tr>\r\n  </thead>\r\n  <tbody>\r\n    <tr>\r\n      <td>added_at</td>\r\n      <td>a timestamp</td>\r\n      <td>The date and time the track was saved.</td>\r\n    </tr>\r\n    <tr>\r\n      <td>track</td>\r\n      <td>a track object</td>\r\n      <td>Information about the track.</td>\r\n    </tr>\r\n  </tbody>\r\n</table>\r\n\r\n\r\n### paging object\r\n\r\n<table>\r\n  <thead>\r\n    <tr>\r\n      <th>Key</th>\r\n      <th>Value Type</th>\r\n      <th>Value Description</th>\r\n    </tr>\r\n  </thead>\r\n  <tbody>\r\n    <tr>\r\n      <td>href</td>\r\n      <td>string</td>\r\n      <td>A link to the Web API endpoint returning the full result of the request.</td>\r\n    </tr>\r\n    <tr>\r\n      <td>items</td>\r\n      <td>an array of objects</td>\r\n      <td>The requested data.</td>\r\n    </tr>\r\n    <tr>\r\n      <td>limit</td>\r\n      <td>integer</td>\r\n      <td>The maximum number of items in the response (as set in the query or by default).</td>\r\n    </tr>\r\n    <tr>\r\n      <td>next</td>\r\n      <td>string</td>\r\n      <td>URL to the next page of items. ( <code class=\"highlighter-rouge\">null</code> if none)</td>\r\n    </tr>\r\n    <tr>\r\n      <td>offset</td>\r\n      <td>integer</td>\r\n      <td>The offset of the items returned (as set in the query or by default).</td>\r\n    </tr>\r\n    <tr>\r\n      <td>previous</td>\r\n      <td>string</td>\r\n      <td>URL to the previous page of items. ( <code class=\"highlighter-rouge\">null</code> if none)</td>\r\n    </tr>\r\n    <tr>\r\n      <td>total</td>\r\n      <td>integer</td>\r\n      <td>The total number of items available to return.</td>\r\n    </tr>\r\n  </tbody>\r\n</table>\r\n\r\n<br>\r\n\r\n## Request parameters"
					},
					"response": [
						{
							"name": "Get a User's Saved Tracks",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "*Required*. A valid access token from the Symphonia Accounts service.\n\n",
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {your access token}"
									}
								],
								"url": {
									"raw": "{{URL}}api/v1/me/tracks",
									"host": [
										"{{URL}}api"
									],
									"path": [
										"v1",
										"me",
										"tracks"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": null,
							"cookie": [],
							"body": "{\r\n  \"href\": \"https://api.symphonia.com/v1/me/tracks?offset=0&limit=20\",\r\n  \"items\" : [ {\r\n    \"added_at\" : \"2016-10-24T15:03:07Z\",\r\n    \"track\" : {\r\n      \"album\" : {\r\n        \"album_type\" : \"album\",\r\n        \"artists\" : [ {\r\n          \"href\" : \"https://api.symphonia.com/v1/artists/0LIll5i3kwo5A3IDpipgkS\",\r\n          \"id\" : \"0LIll5i3kwo5A3IDpipgkS\",\r\n          \"name\" : \"Squirrel Nut Zippers\",\r\n          \"type\" : \"artist\"\r\n        } ],\r\n        \"available_markets\" : [ \"AD\", \"AR\", \"AT\", \"AU\", \"BE\", \"BG\", \"BO\", \"BR\", \"CH\", \"CL\", \"CO\", \"CR\", \"CY\", \"CZ\", \"DE\", \"DK\", \"DO\", \"EC\", \"EE\", \"ES\", \"FI\", \"FR\", \"GB\", \"GR\", \"GT\", \"HK\", \"HN\", \"HU\", \"ID\", \"IE\", \"IS\", \"IT\", \"JP\", \"LI\", \"LT\", \"LU\", \"LV\", \"MC\", \"MT\", \"MY\", \"NI\", \"NL\", \"NO\", \"NZ\", \"PA\", \"PE\", \"PH\", \"PL\", \"PT\", \"PY\", \"SE\", \"SG\", \"SK\", \"SV\", \"TR\", \"TW\", \"UY\" ],\r\n        \"href\" : \"https://api.symphonia.com/v1/albums/63GBbuUNBel2ovJjUrfh5r\",\r\n        \"id\" : \"63GBbuUNBel2ovJjUrfh5r\",\r\n        \"images\" : [ {\r\n          \"height\" : 640,\r\n          \"url\" : \"https://i.scdn.co/image/e9c5fd63935b08ed27a7a5b0e65b2c6bf600fc4a\",\r\n          \"width\" : 640\r\n        }, {\r\n          \"height\" : 300,\r\n          \"url\" : \"https://i.scdn.co/image/416b6589d9e2d91147ff5072d640d0041b04cb41\",\r\n          \"width\" : 300\r\n        }, {\r\n          \"height\" : 64,\r\n          \"url\" : \"https://i.scdn.co/image/4bb6b451b8edde5881a5fcbe1a54bc8538f407ec\",\r\n          \"width\" : 64\r\n        } ],\r\n        \"name\" : \"The Best of Squirrel Nut Zippers\",\r\n        \"type\" : \"album\"\r\n      },\r\n      \"artists\" : [ {\r\n        \"href\" : \"https://api.symphonia.com/v1/artists/0LIll5i3kwo5A3IDpipgkS\",\r\n        \"id\" : \"0LIll5i3kwo5A3IDpipgkS\",\r\n        \"name\" : \"Squirrel Nut Zippers\",\r\n        \"type\" : \"artist\"\r\n      } ],\r\n      \"available_markets\" : [ \"AD\", \"AR\", \"AT\", \"AU\", \"BE\", \"BG\", \"BO\", \"BR\", \"CH\", \"CL\", \"CO\", \"CR\", \"CY\", \"CZ\", \"DE\", \"DK\", \"DO\", \"EC\", \"EE\", \"ES\", \"FI\", \"FR\", \"GB\", \"GR\", \"GT\", \"HK\", \"HN\", \"HU\", \"ID\", \"IE\", \"IS\", \"IT\", \"JP\", \"LI\", \"LT\", \"LU\", \"LV\", \"MC\", \"MT\", \"MY\", \"NI\", \"NL\", \"NO\", \"NZ\", \"PA\", \"PE\", \"PH\", \"PL\", \"PT\", \"PY\", \"SE\", \"SG\", \"SK\", \"SV\", \"TR\", \"TW\", \"UY\" ],\r\n      \"duration_ms\" : 137040,\r\n      \"explicit\" : false,\r\n      \"href\" : \"https://api.symphonia.com/v1/tracks/2jpDioAB9tlYXMdXDK3BGl\",\r\n      \"id\" : \"2jpDioAB9tlYXMdXDK3BGl\",\r\n      \"name\" : \"Good Enough For Granddad\",\r\n      \"popularity\" : 19,\r\n      \"type\" : \"track\",\r\n      ...\r\n      }\r\n    }\r\n  ],\r\n  \"limit\": 20,\r\n  \"next\": \"https://api.symphonia.com/v1/me/tracks?offset=20&limit=20\",\r\n  \"offset\": 0,\r\n  \"previous\": null,\r\n  \"total\": 53\r\n}"
						}
					]
				},
				{
					"name": "Remove Albums for Current User",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"description": "*Required*. A valid access token from the Symphonia Accounts service.\n",
								"key": "Authorization",
								"type": "text",
								"value": ""
							},
							{
								"warning": "Key contains invalid whitespace characters.",
								"description": "*Required*  The content type of the request body: ",
								"key": "Content-Type\t",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{URL}api/v1/me/albums",
							"host": [
								"{{URL}api"
							],
							"path": [
								"v1",
								"me",
								"albums"
							]
						},
						"description": "# Description\r\n\r\nRemove one or more albums from the current user’s ‘Your Music’ library.\r\n\r\n\r\n\r\n\r\n# RESPONSE FORMAT\r\nOn success, the HTTP status code in the response header is `200` Success. On error, the header status code is an error code and the response body contains an error object. Trying to remove an album when you do not have the user’s authorization returns error `403` Forbidden.\r\n\r\n\r\n\r\n## Request parameters\r\n\r\n### Body Parameters\r\n<table>\r\n  <thead>\r\n    <tr>\r\n      <th>Request Body Data</th>\r\n      <th>Value Type</th>\r\n      <th>Value</th>\r\n    </tr>\r\n  </thead>\r\n  <tbody>\r\n    <tr>\r\n      <td></td>\r\n      <td>array of Symphonia ID strings</td>\r\n      <td><em>Optional</em>. A JSON array of the Symphonia IDs. For example: <code class=\"highlighter-rouge\">[\"4iV5W9uYEdYUVa79Axb7Rh\", \"1301WleyT98MSxVHPZCA6M\"]</code><br>A maximum of 50 items can be specified in one request.</td>\r\n    </tr>\r\n  </tbody>\r\n</table>\r\n<br>"
					},
					"response": [
						{
							"name": "Remove Albums for Current User",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"description": "*Required*. A valid access token from the Symphonia Accounts service.\n",
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {your access token}"
									},
									{
										"warning": "Key contains invalid whitespace characters.",
										"description": "*Required*  The content type of the request body: ",
										"key": "Content-Type\t",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n    \"6akEvsycLGftJxYudPjmqK\",\n    \"628oezqK2qfmCjC6eXNors\"\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}api/v1/me/albums",
									"host": [
										"{{URL}api"
									],
									"path": [
										"v1",
										"me",
										"albums"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": null,
							"cookie": [],
							"body": "{\n\t\"status\": \"success\"\n}"
						}
					]
				},
				{
					"name": "Remove User's Saved Tracks",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"description": "*Required*. A valid access token from the Symphonia Accounts service.\n\n",
								"key": "Authorization",
								"type": "text",
								"value": ""
							},
							{
								"warning": "Key contains invalid whitespace characters.",
								"description": "*Required*  The content type of the request body: ",
								"key": "Content-Type\t",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{URL}api/v1/me/tracks",
							"host": [
								"{{URL}api"
							],
							"path": [
								"v1",
								"me",
								"tracks"
							]
						},
						"description": "# Description\r\n\r\nRemove one or more tracks from the current user’s ‘Your Music’ library.\r\n\r\n\r\n# RESPONSE FORMAT\r\nOn success, the HTTP status code in the response header is `200` Success. On error, the header status code is an error code and the response body contains an error object. Trying to remove a track when you do not have the user’s authorization returns error `403` Forbidden.\r\n\r\n\r\n\r\n## Request parameters\r\n\r\n### Body Parameters\r\n<table>\r\n  <thead>\r\n    <tr>\r\n      <th>Request Body Data</th>\r\n      <th>Value Type</th>\r\n      <th>Value</th>\r\n    </tr>\r\n  </thead>\r\n  <tbody>\r\n    <tr>\r\n      <td></td>\r\n      <td>array of Symphonia ID strings</td>\r\n      <td><em>Optional</em>. A JSON array of the Symphonia IDs. For example: <code class=\"highlighter-rouge\">[\"4iV5W9uYEdYUVa79Axb7Rh\", \"1301WleyT98MSxVHPZCA6M\"]</code><br>A maximum of 50 items can be specified in one request.</td>\r\n    </tr>\r\n  </tbody>\r\n</table>\r\n<br>"
					},
					"response": [
						{
							"name": "Remove User's Saved Tracks",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"description": "*Required*. A valid access token from the Symphonia Accounts service.\n\n",
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {your access token}"
									},
									{
										"warning": "Key contains invalid whitespace characters.",
										"description": "*Required*  The content type of the request body: ",
										"key": "Content-Type\t",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\"4iV5W9uYEdYUVa79Axb7Rh\", \"1301WleyT98MSxVHPZCA6M\"]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}api/v1/me/tracks",
									"host": [
										"{{URL}api"
									],
									"path": [
										"v1",
										"me",
										"tracks"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": null,
							"cookie": [],
							"body": "{\n\t\"status\": \"success\"\n}"
						}
					]
				},
				{
					"name": "Save Albums for Current User",
					"request": {
						"method": "PUT",
						"header": [
							{
								"description": "*Required*. A valid access token from the Symphonia Accounts service.\n\n",
								"key": "Authorization",
								"type": "text",
								"value": ""
							},
							{
								"warning": "Key contains invalid whitespace characters.",
								"description": "*Required*  The content type of the request body: ",
								"key": "Content-Type\t",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{URL}api/v1/me/albums",
							"host": [
								"{{URL}api"
							],
							"path": [
								"v1",
								"me",
								"albums"
							]
						},
						"description": "# Description\r\n\r\nSave one or more albums to the current user’s ‘Your Music’ library.\r\n\r\n## RESPONSE FORMAT\r\nOn success, the HTTP status code in the response header is `201` Created. On error, the header status code is an error code and the response body contains an error object. Trying to add an album when you do not have the user’s authorization returns error `403` Forbidden.\r\n\r\n\r\n\r\n## Request parameters\r\n\r\n### Body Parameters\r\n<table>\r\n  <thead>\r\n    <tr>\r\n      <th>Request Body Data</th>\r\n      <th>Value Type</th>\r\n      <th>Value</th>\r\n    </tr>\r\n  </thead>\r\n  <tbody>\r\n    <tr>\r\n      <td></td>\r\n      <td>array of Symphonia ID strings</td>\r\n      <td><em>Optional</em>. A JSON array of the Symphonia IDs. For example: <code class=\"highlighter-rouge\">[\"4iV5W9uYEdYUVa79Axb7Rh\", \"1301WleyT98MSxVHPZCA6M\"]</code><br>A maximum of 50 items can be specified in one request.</td>\r\n    </tr>\r\n  </tbody>\r\n</table>\r\n<br>"
					},
					"response": [
						{
							"name": "Save Albums for Current User",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"description": "*Required*. A valid access token from the Symphonia Accounts service.\n\n",
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {your access token}"
									},
									{
										"warning": "Key contains invalid whitespace characters.",
										"description": "*Required*  The content type of the request body: ",
										"key": "Content-Type\t",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n    \"6akEvsycLGftJxYudPjmqK\",\n    \"628oezqK2qfmCjC6eXNors\"\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}api/v1/me/albums",
									"host": [
										"{{URL}api"
									],
									"path": [
										"v1",
										"me",
										"albums"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": null,
							"cookie": [],
							"body": "{\n\t\"status\": \"success\"\n}"
						}
					]
				},
				{
					"name": "Save Tracks for User",
					"request": {
						"method": "PUT",
						"header": [
							{
								"description": "*Required*. A valid access token from the Symphonia Accounts service.\n\n",
								"key": "Authorization",
								"type": "text",
								"value": ""
							},
							{
								"warning": "Key contains invalid whitespace characters.",
								"description": "*Required*  The content type of the request body: ",
								"key": "Content-Type\t",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{URL}api/v1/me/tracks",
							"host": [
								"{{URL}api"
							],
							"path": [
								"v1",
								"me",
								"tracks"
							]
						},
						"description": "# Description\r\n\r\nSave one or more tracks to the current user’s ‘Your Music’ library.\r\n\r\n## RESPONSE FORMAT\r\nOn success, the HTTP status code in the response header is `200` OK. On error, the header status code is an error code and the response body contains an error object. Trying to add a track when you do not have the user’s authorization, or when you have over 10.000 tracks in Your Music, returns error `403` Forbidden.\r\n\r\n\r\n\r\n## Request parameters\r\n\r\n### Body Parameters\r\n<table>\r\n  <thead>\r\n    <tr>\r\n      <th>Request Body Data</th>\r\n      <th>Value Type</th>\r\n      <th>Value</th>\r\n    </tr>\r\n  </thead>\r\n  <tbody>\r\n    <tr>\r\n      <td></td>\r\n      <td>array of Symphonia ID strings</td>\r\n      <td><em>Optional</em>. A JSON array of the Symphonia IDs. For example: <code class=\"highlighter-rouge\">[\"4iV5W9uYEdYUVa79Axb7Rh\", \"1301WleyT98MSxVHPZCA6M\"]</code><br>A maximum of 50 items can be specified in one request.</td>\r\n    </tr>\r\n  </tbody>\r\n</table>\r\n<br>"
					},
					"response": [
						{
							"name": "Save Tracks for User",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"description": "*Required*. A valid access token from the Symphonia Accounts service.\n\n",
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {your access token}"
									},
									{
										"warning": "Key contains invalid whitespace characters.",
										"description": "*Required*  The content type of the request body: ",
										"key": "Content-Type\t",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"ids\":[\"4iV5W9uYEdYUVa79Axb7Rh\", \"1301WleyT98MSxVHPZCA6M\"]}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}api/v1/me/tracks",
									"host": [
										"{{URL}api"
									],
									"path": [
										"v1",
										"me",
										"tracks"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": null,
							"cookie": [],
							"body": "{\n\t\"status\": \"success\"\n}"
						}
					]
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Personalization",
			"item": [
				{
					"name": "Top_Artist_Track",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
								"key": "Authorization",
								"type": "text",
								"value": "",
								"description": "*Required*. A valid access token from the Spotify Accounts service"
							}
						],
						"url": {
							"raw": "{{URL}}api/v1/me/top/:{type}?limit=&page=&time_range",
							"host": [
								"{{URL}}api"
							],
							"path": [
								"v1",
								"me",
								"top",
								":{type}"
							],
							"query": [
								{
									"key": "limit",
									"value": "",
									"description": "*Optional*. The number of entities to return. Default: 20. Minimum: 1. Maximum: 50. For example: `limit=2`"
								},
								{
									"key": "page",
									"value": "",
									"description": "*Optional*. The number of entities to return. Page number: `page=2`"
								},
								{
									"key": "time_range",
									"value": null,
									"description": "*Optional*. Over what time frame the affinities are computed. Valid values: `long_term` (calculated from several years of data and including all new data as it becomes available), `medium_term`(approximately last 6 months), `short_term` (approximately last 4 weeks). Default: medium_term."
								}
							],
							"variable": [
								{
									"key": "{type}",
									"value": "",
									"description": "The type of entity to return. Valid values: `artists` or `tracks`."
								}
							]
						},
						"description": "## Description\r\n Get the current user’s top artists or tracks based on calculated affinity.\r\n\r\n\r\n Affinity is a measure of the expected preference a user has for a particular track or artist.  It is based on user behavior, including play history, but does not include actions made while in incognito mode. Light or infrequent users of Symphonia may not have sufficient play history to generate a full affinity data set. As a user’s behavior is likely to shift over time, this preference data is available over three time spans. See time_range in the query parameter table for more information. For each time range, the top 50 tracks and artists are available for each user. In the future, it is likely that this restriction will be relaxed. This data is typically updated once each day for each user.\r\n\r\n## Response Format\r\n  On success, the HTTP status code in the response header is `200` OK and the response body contains a paging object of Artists or Tracks. On error, the header status code is an error code and the response body contains an error object.\r\n\r\n\r\n## artist object \r\n\r\n<table>\r\n  <thead>\r\n    <tr>\r\n      <th>Key</th>\r\n      <th>Value Type</th>\r\n      <th>Value Description</th>\r\n    </tr>\r\n  </thead>\r\n  <tbody>\r\n    <tr>\r\n      <td>followers</td>\r\n      <td>A followers object</td>\r\n      <td>Information about the followers of the artist.</td>\r\n    </tr>\r\n    <tr>\r\n      <td>genres</td>\r\n      <td>array of strings</td>\r\n      <td>A list of the genres the artist is associated with. For example: <code class=\"highlighter-rouge\">\"Prog Rock\"</code> , <code class=\"highlighter-rouge\">\"Post-Grunge\"</code>. (If not yet classified, the array is empty.)</td>\r\n    </tr>\r\n    <tr>\r\n      <td>href</td>\r\n      <td>string</td>\r\n      <td>A link to the Web API endpoint providing full details of the artist.</td>\r\n    </tr>\r\n    <tr>\r\n      <td>id</td>\r\n      <td>string</td>\r\n      <td>The Symphonia ID for the artist.</td>\r\n    </tr>\r\n    <tr>\r\n      <td>images</td>\r\n      <td>array of image objects</td>\r\n      <td>Images of the artist in various sizes, widest first.</td>\r\n    </tr>\r\n    <tr>\r\n      <td>name</td>\r\n      <td>string</td>\r\n      <td>The name of the artist</td>\r\n    </tr>\r\n    <tr>\r\n      <td>popularity</td>\r\n      <td>int</td>\r\n      <td>The popularity of the artist. The value will be between 0 and 100, with 100 being the most popular. The artist’s popularity is calculated from the popularity of all the artist’s tracks.</td>\r\n    </tr>\r\n    <tr>\r\n      <td>type</td>\r\n      <td>string</td>\r\n      <td>The object type: <code class=\"highlighter-rouge\">\"artist\"</code></td>\r\n    </tr>\r\n  </tbody>\r\n</table>\r\n\r\n## track object\r\n\r\n<table>\r\n  <thead>\r\n    <tr>\r\n      <th>Key</th>\r\n      <th>Value Type</th>\r\n      <th>Value Description</th>\r\n    </tr>\r\n  </thead>\r\n  <tbody>\r\n    <tr>\r\n      <td>album</td>\r\n      <td>an album object</a></td>\r\n      <td>The album on which the track appears. The album object includes a link in <code class=\"highlighter-rouge\">href</code> to full information about the album.</td>\r\n    </tr>\r\n    <tr>\r\n      <td>artists</td>\r\n      <td>an array of artist objects</td>\r\n      <td>The artists who performed the track. Each artist object includes a link in <code class=\"highlighter-rouge\">href</code> to more detailed information about the artist.</td>\r\n    </tr>\r\n    <tr>\r\n      <td>available_markets</td>\r\n      <td>array of strings</td>\r\n      <td>A list of the countries in which the track can be played, identified by their <a href=\"http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2\">ISO 3166-1 alpha-2</a> code.</td>\r\n    </tr>\r\n    <tr>\r\n      <td>duration_ms</td>\r\n      <td>integer</td>\r\n      <td>The track length in milliseconds.</td>\r\n    </tr>\r\n    <tr>\r\n      <td>explicit</td>\r\n      <td>Boolean</td>\r\n      <td>Whether or not the track has explicit lyrics ( <code class=\"highlighter-rouge\">true</code> = yes it does; <code class=\"highlighter-rouge\">false</code> = no it does not OR unknown).</td>\r\n    </tr>\r\n    <tr>\r\n      <td>href</td>\r\n      <td>string</td>\r\n      <td>A link to the Web API endpoint providing full details of the track.</td>\r\n    </tr>\r\n    <tr>\r\n      <td>id</td>\r\n      <td>string</td>\r\n      <td>The Symphonia ID for the track.</td>\r\n    </tr>\r\n    <tr>\r\n      <td>name</td>\r\n      <td>string</td>\r\n      <td>The name of the track.</td>\r\n    </tr>\r\n    <tr>\r\n      <td>popularity</td>\r\n      <td>integer</td>\r\n      <td>The popularity of the track. The value will be between 0 and 100, with 100 being the most popular.<br />The popularity of a track is a value between 0 and 100, with 100 being the most popular. The popularity is calculated by algorithm and is based, in the most part, on the total number of plays the track has had and how recent those plays are.</td>\r\n    </tr>\r\n    <tr>\r\n      <td>type</td>\r\n      <td>string</td>\r\n      <td>The object type: “track”.</td>\r\n    </tr>\r\n  </tbody>\r\n</table>\r\n\r\n### paging object\r\n\r\n<table>\r\n  <thead>\r\n    <tr>\r\n      <th>Key</th>\r\n      <th>Value Type</th>\r\n      <th>Value Description</th>\r\n    </tr>\r\n  </thead>\r\n  <tbody>\r\n    <tr>\r\n      <td>href</td>\r\n      <td>string</td>\r\n      <td>A link to the Web API endpoint returning the full result of the request.</td>\r\n    </tr>\r\n    <tr>\r\n      <td>items</td>\r\n      <td>an array of objects</td>\r\n      <td>The requested data.</td>\r\n    </tr>\r\n    <tr>\r\n      <td>limit</td>\r\n      <td>integer</td>\r\n      <td>The maximum number of items in the response (as set in the query or by default).</td>\r\n    </tr>\r\n    <tr>\r\n      <td>next</td>\r\n      <td>string</td>\r\n      <td>URL to the next page of items. ( <code class=\"highlighter-rouge\">null</code> if none)</td>\r\n    </tr>\r\n    <tr>\r\n      <td>offset</td>\r\n      <td>integer</td>\r\n      <td>The offset of the items returned (as set in the query or by default).</td>\r\n    </tr>\r\n    <tr>\r\n      <td>previous</td>\r\n      <td>string</td>\r\n      <td>URL to the previous page of items. ( <code class=\"highlighter-rouge\">null</code> if none)</td>\r\n    </tr>\r\n    <tr>\r\n      <td>total</td>\r\n      <td>integer</td>\r\n      <td>The total number of items available to return.</td>\r\n    </tr>\r\n  </tbody>\r\n</table>\r\n\r\n<br>\r\n\r\n## Request Parameters"
					},
					"response": [
						{
							"name": "Top_Artist_Track",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {your access token}",
										"description": "*Required*. A valid access token from the Symphonia Accounts service.\n",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{URL}}api/v1/me/top/:{type}",
									"host": [
										"{{URL}}api"
									],
									"path": [
										"v1",
										"me",
										"top",
										":{type}"
									],
									"variable": [
										{
											"key": "{type}",
											"value": "artists",
											"description": "The type of entity to return. Valid values: `artists` or `tracks`."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\r\n  \"items\" : [ {\r\n    \"followers\" : {\r\n      \"href\" : null,\r\n      \"total\" : 7753\r\n    },\r\n    \"genres\" : [ \"swedish hip hop\" ],\r\n   \t\"href\":\"http://symphonia.com/api/v1/users/ahmed\",\r\n    \"id\":\"IWE832ND28YFOF9230\",\r\n    \"images\":[\r\n\t\t{\r\n\t\t\t\"height\":900,\r\n\t\t\t\"url\":\"https://fbcdn-profile-a.akamaihd.net/hprofile-ak-frc3/t1.0-1/1970403_10152215092574354_1798272330_n.jpg\",\r\n\t\t\t\"width\":800\r\n\t\t}\r\n\t\t\r\n\t\t],\r\n    \"name\" : \"Afasi & Filthy\",\r\n    \"popularity\" : 54,\r\n    \"type\" : \"artist\"\r\n  }],\r\n  \"next\" : \"https://api.symphonia.com/v1/me/top/artists?offset=20\",\r\n  \"previous\" : null,\r\n  \"total\" : 50,\r\n  \"limit\" : 20,\r\n  \"href\" : \"https://api.symphonia.com/v1/me/top/artists\"\r\n}"
						}
					]
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Player",
			"item": [
				{
					"name": "Stream_Track",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Range",
								"type": "text",
								"value": "text/plain"
							},
							{
								"description": "The packet Size .",
								"key": "Content-Length",
								"type": "text",
								"value": "text/plain"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "audio/mp3"
							},
							{
								"key": "Accept-Ranges",
								"type": "text",
								"value": "text/plain"
							},
							{
								"key": "Authorization",
								"value": "",
								"description": "*Required*. A valid access token from the Symphonia Accounts service.\n",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{URL}}api/v1/me/player/tracks/:{artist_id}/:{track_id}?limit&after&before",
							"host": [
								"{{URL}}api"
							],
							"path": [
								"v1",
								"me",
								"player",
								"tracks",
								":{artist_id}",
								":{track_id}"
							],
							"query": [
								{
									"key": "limit",
									"value": null,
									"description": "*Optional*. The maximum number of items to return. Default: 20. Minimum: 1. Maximum: 50.\n"
								},
								{
									"key": "after",
									"value": null,
									"description": "*Optional*. A Unix timestamp in milliseconds. Returns all items after (but not including) this cursor position. If after is specified, before must not be specified."
								},
								{
									"key": "before",
									"value": null,
									"description": "*Optional*. A Unix timestamp in milliseconds. Returns all items before (but not including) this cursor position. If before is specified, after must not be specified."
								}
							],
							"variable": [
								{
									"description": "*Required*. a valid symphonia artist id",
									"key": "{artist_id}",
									"value": ""
								},
								{
									"description": "*Required*. a valid symphonia track id",
									"key": "{track_id}",
									"value": ""
								}
							]
						},
						"description": "## Player\n Get the object to be played on the user’s Symphonia account as packets.\n\n## Response\nheck if the range is available after the HTTP method gets approved. If browser does not send Range header, the request will be directly treated as normal request. Server returns entire file and HTTP status is 200 OK. Otherwise, we will see if start or end position is greater or equal to file length. If one of them is, the range can not be fulfilled. The status will be 416 Requested Range Not Satisfiable and the Content-Range will be sent.\n\nFor the status 206 Partial Content, we have another format of Content-Range header including start, end and total bytes of current file. We also have Content-Length header and the value is exactly equal to the difference between start and end. In the last statement,\n404 Not Found if track does not exist\n\n## Request parameters"
					},
					"response": []
				},
				{
					"name": "Tracks_History",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "",
								"description": "*Required*. A valid access token from the Symphonia Accounts service.\n",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{URL}}api/v1/me/player/tracks/history",
							"host": [
								"{{URL}}api"
							],
							"path": [
								"v1",
								"me",
								"player",
								"tracks",
								"history"
							]
						},
						"description": "## Get Current User's Recently Played Tracks\n\nGet tracks from the current user’s recently played tracks.\nReturns the most recent 50 tracks played by a user. Note that a track currently playing will not be visible in play history until it has completed. A track must be played for more than 30 seconds to be included in play history. Any tracks listened to while the user had “Private Session” enabled in their client will not be returned in the list of recently played tracks. The endpoint uses a bidirectional cursor for paging. Follow the next field with the before parameter to move back in time, or use the after parameter to move forward in time. If you supply no before or after parameter, the endpoint will return the most recently played songs, and the next link will page back in time.\n\n## Response Format\n\nOn success, the HTTP status code in the response header is `200` OK and the response body contains an array of play history objects (wrapped in a cursor-based paging object) in JSON format. The play history items each contain the context the track was played from (e.g. playlist, album), the date and time the track was played, and a track object (simplified). On error, the header status code is an error code and the response body contains an error object. If private session is enabled the response will be a 204 NO CONTENT with an empty payload.\n\n\n\n\n\n## play history object\n\n| KEY               | VALUE TYPE                            \t\t| VALUE DESCRIPTION         \t\t\t\t\t\t\t\t\t\t\t\t\t\t|\n| ----------------- | ----------------------------------------------| ----------------------------------------------------------------------------------|\n| track             | `string`          \t\t\t\t\t\t\t| \tThe track the user listened to.\t\t\t\t\t\t\t\t\t\t\t\t\t|\n| played_at         | `\ttimestamp` \t\t\t\t\t\t\t\t\t| \tThe date and time the track was played.\t\t\t\t\t\t\t\t\t\t\t|\n\t\n\n\n\n## track object \n\n| KEY               | VALUE TYPE                            \t\t| VALUE DESCRIPTION         \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t|\n| ----------------- | ----------------------------------------------| ------------------------------------------------------------------------------------------------------|\n| artists           | `\tan array of simple artist objects`  \t\t| The artists who performed the track. Each artist object includes a link in `href` to more detailed information about the artist..|\n| available_markets | `\tarray of strings` \t\t\t\t\t\t\t| Strings\tA list of the countries in which the track can be played, identified by their ISO 3166-1 alpha-2 code\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t|\n| duration_ms\t\t|`integer`\t\t\t\t\t\t\t\t\t\t| The track length in milliseconds.\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t|\n| explicit\t\t\t| `Boolean`\t\t\t\t\t\t\t\t\t\t| Whether or not the track has explicit lyrics ( true = yes it does; false = no it does not OR unknown).|\n| href\t\t\t\t| `string`\t\t\t\t\t\t\t\t\t\t| A link to the Web API endpoint providing full details of the track.\t\t\t\t\t\t\t\t\t|\n| id\t\t\t\t| `string`\t\t\t\t\t\t\t\t\t\t| The Symphonia ID for the track.\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t|\n| name\t\t\t\t| `string`\t\t\t\t\t\t\t\t\t\t| The name of the track.\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t|\n| track_number\t\t| `integer`\t\t\t\t\t\t\t\t\t\t| The number of the track. If an album has several discs, the track number is the number on the specified disc.\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t|\n| type\t\t\t\t| `string`\t\t\t\t\t\t\t\t\t    | The object type: “track”.\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t|\n\n\n\n\n\n## paging\n\n| KEY               | VALUE TYPE                            \t\t| VALUE DESCRIPTION         \t\t\t\t\t\t\t\t\t\t\t\t\t\t|\n| ----------------- | ----------------------------------------------| ----------------------------------------------------------------------------------|\n| href              | `string`          \t\t\t\t\t\t\t| A link to the Web API endpoint returning the full result of the request.\t\t\t|\n| items             | `an array of objects` \t\t\t\t\t\t| The requested data.\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t|\n| limit \t\t\t| `integer`                     \t\t\t\t| The maximum number of items in the response (as set in the query or by default).\t|\n| next  \t\t\t| `string `                   \t        \t    | URL to the next page of items. ( null if none)                                    |\n| previous          | `string`                              \t\t| URL to the previous page of items. ( null if none).                         \t\t|\n| total             | `integer`                             \t\t| The total number of items available to return.\t\t\t\t\t\t\t\t\t|"
					},
					"response": [
						{
							"name": "Tracks_History",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{URL}}api/v1/me/player/tracks/histor",
									"host": [
										"{{URL}}api"
									],
									"path": [
										"v1",
										"me",
										"player",
										"tracks",
										"histor"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\r\n  \"items\": [\r\n    {\r\n      \"track\": {\r\n        \"artists\": [\r\n          {\r\n            \"href\": \"https://api.symphonia.com/v1/artists/6sFIWsNpZYqfjUpaCgueju\",\r\n            \"id\": \"6sFIWsNpZYqfjUpaCgueju\",\r\n            \"name\": \"Carly Rae Jepsen\",\r\n            \"type\": \"artist\"\r\n          }\r\n\t\t],\r\n        \"available_markets\": [\r\n          \"CA\",\r\n          \"MX\",\r\n          \"US\"\r\n        ],\r\n       \r\n      \"duration_ms\": 467586,\r\n      \"explicit\": false,\r\n      \"href\": \"https://api.symphonia.com/v1/tracks/11dFghVXANMlKmJXsNCbNl\",\r\n      \"id\": \"11dFghVXANMlKmJXsNCbNl\",\r\n      \"name\": \"Cut To The Feeling\",\r\n      \"type\": \"track\"\r\n      },\r\n      \"played_at\": \"2016-12-13T20:44:04.589Z\"\r\n    }\r\n  ],\r\n  \"next\": \"https://api.symphonia.com/v1/me/player/recently-played?before=1481661737016&limit=2\",\r\n  \"cursors\": {\r\n    \"after\": \"1481661844589\",\r\n    \"before\": \"1481661737016\"\r\n  },\r\n  \"limit\": 2,\r\n  \"href\": \"https://api.symphonia.com/v1/me/player/recently-played?limit=2\"\r\n}"
						}
					]
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Playlists",
			"item": [
				{
					"name": "Get a List of Current User's Playlists",
					"request": {
						"method": "GET",
						"header": [
							{
								"description": "*Required*. A valid access token from the Symphonia Accounts service.\n",
								"key": "Authorization",
								"type": "text",
								"value": ""
							}
						],
						"url": {
							"raw": "{{URL}}api/v1/me/playlists?limit&offset",
							"host": [
								"{{URL}}api"
							],
							"path": [
								"v1",
								"me",
								"playlists"
							],
							"query": [
								{
									"key": "limit",
									"value": null,
									"description": "*Optional*. The maximum number of playlists to return. Default: 20. Minimum: 1. Maximum: 50."
								},
								{
									"key": "offset",
									"value": null,
									"description": "*Optional*. The index of the first playlist to return. Default: 0 (the first object). Maximum offset: 100.000. Use with limit to get the next set of playlists."
								}
							]
						},
						"description": "# Description\nGet a list of the playlists owned or followed by the current Symphonia user.\n\n## Response Format \nOn success, the HTTP status code in the response header is `200` OK and the response body contains an array of playlist objects (wrapped in a paging object) in JSON format. On error, the header status code is an error code and the response body contains an error object. Please note that the access token has to be tied to a user.\n\n\n### playlist object\n\n<table>\n  <thead>\n    <tr>\n      <th>Key</th>\n      <th>Value Type</th>\n      <th>Value Description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>collaborative</td>\n      <td>Boolean</td>\n      <td><code class=\"highlighter-rouge\">true</code> if the owner allows other users to modify the playlist.</td>\n    </tr>\n    <tr>\n      <td>description</td>\n      <td>string</td>\n      <td>The playlist description. <em>Only returned for modified, verified playlists, otherwise</em> <code class=\"highlighter-rouge\">null</code> .</td>\n    </tr>\n    <tr>\n      <td>href</td>\n      <td>string</td>\n      <td>A link to the Web API endpoint providing full details of the playlist.</td>\n    </tr>\n    <tr>\n      <td>id</td>\n      <td>string</td>\n      <td>The Symphonia ID for the playlist.</td>\n    </tr>\n    <tr>\n      <td>images</td>\n      <td>an array of image objects</td>\n      <td>Images for the playlist. The array may be empty or contain up to three images. The images are returned by size in descending order.</td>\n    </tr>\n    <tr>\n      <td>name</td>\n      <td>string</td>\n      <td>The name of the playlist.</td>\n    </tr>\n    <tr>\n      <td>owner</td>\n      <td>a user object</td>\n      <td>The user who owns the playlist</td>\n    </tr>\n    <tr>\n      <td>public</td>\n      <td>Boolean or <code class=\"highlighter-rouge\">null</code></td>\n      <td>The playlist’s public/private status: <code class=\"highlighter-rouge\">true</code> the playlist is public, <code class=\"highlighter-rouge\">false</code> the playlist is private, <code class=\"highlighter-rouge\">null</code> the playlist status is not relevant.</td>\n    </tr>\n    <tr>\n      <td>tracks</td>\n      <td>a tracks object</td>\n      <td>A collection containing a link ( <code class=\"highlighter-rouge\">href</code> ) to the Web API endpoint where full details of the playlist’s tracks can be retrieved, along with the <code class=\"highlighter-rouge\">total</code> number of tracks in the playlist. Note, a track object may be <code class=\"highlighter-rouge\">null</code>. This can happen if a track is no longer available.</td>\n    </tr>\n    <tr>\n      <td>type</td>\n      <td>string</td>\n      <td>The object type: “playlist”</td>\n    </tr>\n  </tbody>\n</table>\n\n### paging object\n\n<table>\n  <thead>\n    <tr>\n      <th>Key</th>\n      <th>Value Type</th>\n      <th>Value Description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>href</td>\n      <td>string</td>\n      <td>A link to the Web API endpoint returning the full result of the request.</td>\n    </tr>\n    <tr>\n      <td>items</td>\n      <td>an array of objects</td>\n      <td>The requested data.</td>\n    </tr>\n    <tr>\n      <td>limit</td>\n      <td>integer</td>\n      <td>The maximum number of items in the response (as set in the query or by default).</td>\n    </tr>\n    <tr>\n      <td>next</td>\n      <td>string</td>\n      <td>URL to the next page of items. ( <code class=\"highlighter-rouge\">null</code> if none)</td>\n    </tr>\n    <tr>\n      <td>offset</td>\n      <td>integer</td>\n      <td>The offset of the items returned (as set in the query or by default).</td>\n    </tr>\n    <tr>\n      <td>previous</td>\n      <td>string</td>\n      <td>URL to the previous page of items. ( <code class=\"highlighter-rouge\">null</code> if none)</td>\n    </tr>\n    <tr>\n      <td>total</td>\n      <td>integer</td>\n      <td>The total number of items available to return.</td>\n    </tr>\n  </tbody>\n</table>\n\n<br>\n\n## Request parameters"
					},
					"response": [
						{
							"name": "Get a List of Current User's Playlists",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {your access token}",
										"description": "**Required**. A valid access token from the Symphonia Accounts service.\n",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{URL}}api/v1/me/playlists",
									"host": [
										"{{URL}}api"
									],
									"path": [
										"v1",
										"me",
										"playlists"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n\t\"href\":\"https://api.symphonia.com/v1/users/wizzler/playlists\",\n \"items\":\n [\n \t{\n \t\"collaborative\":false,\n \t\t\"href\":\"https://api.symphonia.com/v1/users/wizzler/playlists/53Y8wT46QIMz5H4WQ8O22c\",\n \t\t\"id\":\"53Y8wT46QIMz5H4WQ8O22c\",\n \t\t\"images\":[],\n \t\t\"name\":\"Wizzlers Big Playlist\",\n \t\t\"owner\":{\n \t\t\t\t\"href\":\"https://api.symphonia.com/v1/users/wizzler\",\n \t\t\t\t\"id\":\"wizzler\",\n \t\t\t\t\"type\":\"user\"\n \t\t\t\n \t\t},\n \t\t\"public\":true,\n \t\t\"tracks\":{\n \t\t\t\"href\":\"https://api.symphonia.com/v1/users/wizzler/playlists/53Y8wT46QIMz5H4WQ8O22c/tracks\",\n \t\t\t\"total\":30\n \t\t\t\n \t\t},\n \t\t\"type\":\"playlist\"\n \t\n   },\n   {\n \t\"collaborative\":false,\n    \t\"href\":\"https://api.symphonia.com/v1/users/wizzlersmate/playlists/1AVZz0mBuGbCEoNRQdYQju\",\n    \t\"id\":\"1AVZz0mBuGbCEoNRQdYQju\",\n    \t\"images\":[],\n    \t\"name\":\"Another Playlist\",\n    \t\"owner\":\n    \t{\n    \t\t\"href\":\"https://api.symphonia.com/v1/users/wizzlersmate\",\n    \t\t\"id\":\"wizzlersmate\",\n    \t\t\"type\":\"user\"\n    \t},\n    \"public\":true,\n    \"tracks\":\n    {\n    \t\"href\":\"https://api.symphonia.com/v1/users/wizzlersmate/playlists/1AVZz0mBuGbCEoNRQdYQju/tracks\",\n    \t\"total\":58\n    },\n    \"type\":\"playlist\"\n }\n],\n \"limit\":9,\n \"next\":null,\n \"offset\":0,\n \"previous\":null,\n \"total\":9\n}"
						}
					]
				},
				{
					"name": "Get a List of a User's Playlists",
					"request": {
						"method": "GET",
						"header": [
							{
								"description": "*Required*. A valid access token from the Symphonia Accounts service.\n",
								"key": "Authorization",
								"type": "text",
								"value": ""
							}
						],
						"url": {
							"raw": "{{URL}}api/v1/users/:{user_id}/playlists",
							"host": [
								"{{URL}}api"
							],
							"path": [
								"v1",
								"users",
								":{user_id}",
								"playlists"
							],
							"variable": [
								{
									"description": "The user’s Symphonia user ID.",
									"key": "{user_id}",
									"value": ""
								}
							]
						},
						"description": "# Description\nGet a list of the playlists owned or followed by a Symphonia user.\n\n## Response Format \n\nOn success, the HTTP status code in the response header is `200` OK and the response body contains an array of playlist objects (wrapped in a paging object) in JSON format. On error, the header status code is an error code and the response body contains an error object.\n\n\n### playlist object\n\n<table>\n  <thead>\n    <tr>\n      <th>Key</th>\n      <th>Value Type</th>\n      <th>Value Description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>collaborative</td>\n      <td>Boolean</td>\n      <td><code class=\"highlighter-rouge\">true</code> if the owner allows other users to modify the playlist.</td>\n    </tr>\n    <tr>\n      <td>description</td>\n      <td>string</td>\n      <td>The playlist description. <em>Only returned for modified, verified playlists, otherwise</em> <code class=\"highlighter-rouge\">null</code> .</td>\n    </tr>\n    <tr>\n      <td>href</td>\n      <td>string</td>\n      <td>A link to the Web API endpoint providing full details of the playlist.</td>\n    </tr>\n    <tr>\n      <td>id</td>\n      <td>string</td>\n      <td>The Symphonia ID for the playlist.</td>\n    </tr>\n    <tr>\n      <td>images</td>\n      <td>an array of image objects</td>\n      <td>Images for the playlist. The array may be empty or contain up to three images. The images are returned by size in descending order.</td>\n    </tr>\n    <tr>\n      <td>name</td>\n      <td>string</td>\n      <td>The name of the playlist.</td>\n    </tr>\n    <tr>\n      <td>owner</td>\n      <td>a user object</td>\n      <td>The user who owns the playlist</td>\n    </tr>\n    <tr>\n      <td>public</td>\n      <td>Boolean or <code class=\"highlighter-rouge\">null</code></td>\n      <td>The playlist’s public/private status: <code class=\"highlighter-rouge\">true</code> the playlist is public, <code class=\"highlighter-rouge\">false</code> the playlist is private, <code class=\"highlighter-rouge\">null</code> the playlist status is not relevant.</td>\n    </tr>\n    <tr>\n      <td>tracks</td>\n      <td>a tracks object</td>\n      <td>A collection containing a link ( <code class=\"highlighter-rouge\">href</code> ) to the Web API endpoint where full details of the playlist’s tracks can be retrieved, along with the <code class=\"highlighter-rouge\">total</code> number of tracks in the playlist. Note, a track object may be <code class=\"highlighter-rouge\">null</code>. This can happen if a track is no longer available.</td>\n    </tr>\n    <tr>\n      <td>type</td>\n      <td>string</td>\n      <td>The object type: “playlist”</td>\n    </tr>\n  </tbody>\n</table>\n\n### paging object\n\n<table>\n  <thead>\n    <tr>\n      <th>Key</th>\n      <th>Value Type</th>\n      <th>Value Description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>href</td>\n      <td>string</td>\n      <td>A link to the Web API endpoint returning the full result of the request.</td>\n    </tr>\n    <tr>\n      <td>items</td>\n      <td>an array of objects</td>\n      <td>The requested data.</td>\n    </tr>\n    <tr>\n      <td>limit</td>\n      <td>integer</td>\n      <td>The maximum number of items in the response (as set in the query or by default).</td>\n    </tr>\n    <tr>\n      <td>next</td>\n      <td>string</td>\n      <td>URL to the next page of items. ( <code class=\"highlighter-rouge\">null</code> if none)</td>\n    </tr>\n    <tr>\n      <td>offset</td>\n      <td>integer</td>\n      <td>The offset of the items returned (as set in the query or by default).</td>\n    </tr>\n    <tr>\n      <td>previous</td>\n      <td>string</td>\n      <td>URL to the previous page of items. ( <code class=\"highlighter-rouge\">null</code> if none)</td>\n    </tr>\n    <tr>\n      <td>total</td>\n      <td>integer</td>\n      <td>The total number of items available to return.</td>\n    </tr>\n  </tbody>\n</table>\n\n<br>\n\n## Request parameters"
					},
					"response": [
						{
							"name": "Get a List of a User's Playlists",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "**Required**. A valid access token from the Symphonia Accounts service.\n",
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {your access token}"
									}
								],
								"url": {
									"raw": "{{URL}}api/v1/users/:{user_id}/playlists",
									"host": [
										"{{URL}}api"
									],
									"path": [
										"v1",
										"users",
										":{user_id}",
										"playlists"
									],
									"variable": [
										{
											"key": "{user_id}",
											"value": "wizzler",
											"description": "The user’s Symphonia user ID."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n\t\"href\":\"https://api.symphonia.com/v1/users/wizzler/playlists\",\n\t\"items\":\n\t[\n\t\t{\n\t\t\t\"collaborative\":false,\n\t\t\t\"href\":\"https://api.symphonia.com/v1/users/wizzler/playlists/53Y8wT46QIMz5H4WQ8O22c\",\n\t\t\t\"id\":\"53Y8wT46QIMz5H4WQ8O22c\",\n\t\t\t\"images\":[],\n\t\t\t\"name\":\"Wizzlers Big Playlist\",\n\t\t\t\"owner\":\n\t\t\t{\n\t\t\t\t\"href\":\"https://api.symphonia.com/v1/users/wizzler\",\n\t\t\t\t\"id\":\"wizzler\",\n\t\t\t\t\"type\":\"user\"\n\t\t\t\t\n\t\t\t},\n\t\t\t\"public\":true,\n\t\t\t\"tracks\":\n\t\t\t{\n\t\t\t\t\"href\":\"https://api.symphonia.com/v1/users/wizzler/playlists/53Y8wT46QIMz5H4WQ8O22c/tracks\",\n\t\t\t\t\"total\":30\n\t\t\t\t\n\t\t\t},\n\t\t\t\"type\":\"playlist\"\n\t\t},\n\t\t{\n\t\t\t\"collaborative\":false,\n\t\t\t\"href\":\"https://api.symphonia.com/v1/users/wizzlersmate/playlists/1AVZz0mBuGbCEoNRQdYQju\",\n\t\t\t\"id\":\"1AVZz0mBuGbCEoNRQdYQju\",\n\t\t\t\"images\":[],\n\t\t\t\"name\":\"Another Playlist\",\n\t\t\t\"owner\":\n\t\t\t{\n\t\t\t\t\"href\":\"https://api.symphonia.com/v1/users/wizzlersmate\",\n\t\t\t\t\"id\":\"wizzlersmate\",\n\t\t\t\t\"type\":\"user\"\n\t\t\t},\n\t\t\t\"public\":true,\n\t\t\t\"tracks\":\n\t\t\t{\n\t\t\t\t\"href\":\"https://api.symphonia.com/v1/users/wizzlersmate/playlists/1AVZz0mBuGbCEoNRQdYQju/tracks\",\n\t\t\t\t\"total\":58\n\t\t\t},\n\t\t\t\"type\":\"playlist\"\n\t\t}\n\t\t],\n\t\t\"limit\":9,\n\t\t\"next\":null,\n\t\t\"offset\":0,\n\t\t\"previous\":null,\n\t\t\"total\":9\n\t\n}"
						}
					]
				},
				{
					"name": "Get a Playlist Cover Image",
					"request": {
						"method": "GET",
						"header": [
							{
								"description": "*Required*. A valid access token from the Symphonia Accounts service.\n",
								"key": "Authorization",
								"type": "text",
								"value": ""
							}
						],
						"url": {
							"raw": "{{URL}}api/v1/v1/playlists/:{playlist_id}/images",
							"host": [
								"{{URL}}api"
							],
							"path": [
								"v1",
								"v1",
								"playlists",
								":{playlist_id}",
								"images"
							],
							"variable": [
								{
									"description": "The Symphonia ID for the playlist.",
									"key": "{playlist_id}",
									"value": ""
								}
							]
						},
						"description": "# Description\nGet the current image associated with a specific playlist.\n\n## Response\nOn success, the response body contains a list of image objects in JSON format and the HTTP status code in the response header is `200` OK\nOn error, the header status code is an error code and the response body contains an error object.\n\n## Request parameters"
					},
					"response": [
						{
							"name": "Get a Playlist Cover Image",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {your access token}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{URL}}api/v1/v1/playlists/:{playlist_id}/images",
									"host": [
										"{{URL}}api"
									],
									"path": [
										"v1",
										"v1",
										"playlists",
										":{playlist_id}",
										"images"
									],
									"variable": [
										{
											"key": "{playlist_id}",
											"value": "59ZbFPES4DQwEjBpWHzrtC",
											"description": "The Symphonia ID for the playlist."
										}
									]
								}
							},
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "[\r\n  {\r\n    \"height\": 640,\r\n    \"url\": \"https://u.scdn.co/images/pl/default/438f9b65ac4eb48681351593142daeb070986293\",\r\n    \"width\": 640\r\n  }\r\n]"
						}
					]
				},
				{
					"name": "Get a Playlist",
					"request": {
						"method": "GET",
						"header": [
							{
								"description": "*Required*. A valid access token from the Symphonia Accounts service.\n",
								"key": "Authorization",
								"type": "text",
								"value": ""
							}
						],
						"url": {
							"raw": "{{URL}}api/v1/playlists/:{playlist_id}",
							"host": [
								"{{URL}}api"
							],
							"path": [
								"v1",
								"playlists",
								":{playlist_id}"
							],
							"variable": [
								{
									"description": "The Symphonia ID for the playlist.",
									"key": "{playlist_id}",
									"value": ""
								}
							]
						},
						"description": "# Description\n\nGet a playlist owned by a Symphonia user.\n\n## Response Format \nOn success, the response body contains a playlist object in JSON format and the HTTP status code in the response header is `200` OK. On error, the header status code is an error code and the response body contains an error object. Requesting playlists that you do not have the user’s authorization to access returns error `403` Forbidden.\nFor the description in the Playlist object, it should be expected that HTML will be escaped.\n\n### playlist object\n\n<table>\n  <thead>\n    <tr>\n      <th>Key</th>\n      <th>Value Type</th>\n      <th>Value Description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>collaborative</td>\n      <td>Boolean</td>\n      <td><code class=\"highlighter-rouge\">true</code> if the owner allows other users to modify the playlist.</td>\n    </tr>\n    <tr>\n      <td>description</td>\n      <td>string</td>\n      <td>The playlist description. <em>Only returned for modified, verified playlists, otherwise</em> <code class=\"highlighter-rouge\">null</code> .</td>\n    </tr>\n    <tr>\n      <td>href</td>\n      <td>string</td>\n      <td>A link to the Web API endpoint providing full details of the playlist.</td>\n    </tr>\n    <tr>\n      <td>id</td>\n      <td>string</td>\n      <td>The Symphonia ID for the playlist.</td>\n    </tr>\n    <tr>\n      <td>images</td>\n      <td>an array of image objects</td>\n      <td>Images for the playlist. The array may be empty or contain up to three images. The images are returned by size in descending order.</td>\n    </tr>\n    <tr>\n      <td>name</td>\n      <td>string</td>\n      <td>The name of the playlist.</td>\n    </tr>\n    <tr>\n      <td>owner</td>\n      <td>a user object</td>\n      <td>The user who owns the playlist</td>\n    </tr>\n    <tr>\n      <td>public</td>\n      <td>Boolean or <code class=\"highlighter-rouge\">null</code></td>\n      <td>The playlist’s public/private status: <code class=\"highlighter-rouge\">true</code> the playlist is public, <code class=\"highlighter-rouge\">false</code> the playlist is private, <code class=\"highlighter-rouge\">null</code> the playlist status is not relevant.</td>\n    </tr>\n    <tr>\n      <td>tracks</td>\n      <td>a tracks object</td>\n      <td>A collection containing a link ( <code class=\"highlighter-rouge\">href</code> ) to the Web API endpoint where full details of the playlist’s tracks can be retrieved, along with the <code class=\"highlighter-rouge\">total</code> number of tracks in the playlist. Note, a track object may be <code class=\"highlighter-rouge\">null</code>. This can happen if a track is no longer available.</td>\n    </tr>\n    <tr>\n      <td>type</td>\n      <td>string</td>\n      <td>The object type: “playlist”</td>\n    </tr>\n  </tbody>\n</table>\n\n### paging object\n\n<table>\n  <thead>\n    <tr>\n      <th>Key</th>\n      <th>Value Type</th>\n      <th>Value Description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>href</td>\n      <td>string</td>\n      <td>A link to the Web API endpoint returning the full result of the request.</td>\n    </tr>\n    <tr>\n      <td>items</td>\n      <td>an array of objects</td>\n      <td>The requested data.</td>\n    </tr>\n    <tr>\n      <td>limit</td>\n      <td>integer</td>\n      <td>The maximum number of items in the response (as set in the query or by default).</td>\n    </tr>\n    <tr>\n      <td>next</td>\n      <td>string</td>\n      <td>URL to the next page of items. ( <code class=\"highlighter-rouge\">null</code> if none)</td>\n    </tr>\n    <tr>\n      <td>offset</td>\n      <td>integer</td>\n      <td>The offset of the items returned (as set in the query or by default).</td>\n    </tr>\n    <tr>\n      <td>previous</td>\n      <td>string</td>\n      <td>URL to the previous page of items. ( <code class=\"highlighter-rouge\">null</code> if none)</td>\n    </tr>\n    <tr>\n      <td>total</td>\n      <td>integer</td>\n      <td>The total number of items available to return.</td>\n    </tr>\n  </tbody>\n</table>\n\n<br>\n\n## Request parameters"
					},
					"response": [
						{
							"name": "Get a Playlist",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}api/v1/playlists/:{playlist_id}",
									"host": [
										"{{URL}}api"
									],
									"path": [
										"v1",
										"playlists",
										":{playlist_id}"
									],
									"variable": [
										{
											"key": "{playlist_id}",
											"value": "59ZbFPES4DQwEjBpWHzrtC",
											"description": "The Symphonia ID for the playlist."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\r\n  \"collaborative\" : false,\r\n  \"description\" : \"Having friends over for dinner? Here´s the perfect playlist.\",\r\n  \"followers\" : {\r\n    \"href\" : null,\r\n    \"total\" : 143350\r\n  },\r\n  \"href\" : \"https://api.symphonia.com/v1/users/symphonia/playlists/59ZbFPES4DQwEjBpWHzrtC\",\r\n  \"id\" : \"59ZbFPES4DQwEjBpWHzrtC\",\r\n  \"images\" : [ {\r\n    \"url\" : \"https://i.scdn.co/image/68b6a65573a55095e9c0c0c33a274b18e0422736\"\r\n  } ],\r\n  \"name\" : \"Dinner with Friends\",\r\n  \"owner\" : {\r\n    \"href\" : \"https://api.symphonia.com/v1/users/symphonia\",\r\n    \"id\" : \"symphonia\",\r\n    \"type\" : \"user\"\r\n  },\r\n  \"public\" : null,\r\n  \"tracks\" : {\r\n    \"href\" : \"https://api.symphonia.com/v1/users/symphonia/playlists/59ZbFPES4DQwEjBpWHzrtC/tracks\",\r\n    \"items\" : [ {\r\n      \"added_at\" : \"2014-09-01T04:21:28Z\",\r\n      \"added_by\" : {\r\n        \"href\" : \"https://api.symphonia.com/v1/users/symphonia\",\r\n        \"id\" : \"symphonia\",\r\n        \"type\" : \"user\"\r\n      },\r\n      \"is_local\" : false,\r\n      \"track\" : {\r\n        \"album\" : {\r\n          \"album_type\" : \"single\",\r\n          \"available_markets\" : [ \"AD\", \"AR\", \"AT\", \"AU\", \"BE\", \"BG\", \"BO\", \"BR\", \"CH\", \"CL\", \"CO\", \"CR\", \"CY\", \"CZ\", \"DK\", \"DO\", \"EC\", \"EE\", \"ES\", \"FI\", \"FR\", \"GB\", \"GR\", \"GT\", \"HK\", \"HN\", \"HU\", \"IE\", \"IS\", \"IT\", \"LI\", \"LT\", \"LU\", \"LV\", \"MC\", \"MT\", \"MY\", \"NI\", \"NL\", \"NO\", \"NZ\", \"PA\", \"PE\", \"PH\", \"PL\", \"PT\", \"PY\", \"RO\", \"SE\", \"SG\", \"SI\", \"SK\", \"SV\", \"TR\", \"TW\", \"UY\" ],\r\n          \"href\" : \"https://api.symphonia.com/v1/albums/5GWoXPsTQylMuaZ84PC563\",\r\n          \"id\" : \"5GWoXPsTQylMuaZ84PC563\",\r\n          \"images\" : [ {\r\n            \"height\" : 640,\r\n            \"url\" : \"https://i.scdn.co/image/47421900e7534789603de84c03a40a826c058e45\",\r\n            \"width\" : 640\r\n          }, {\r\n            \"height\" : 300,\r\n            \"url\" : \"https://i.scdn.co/image/0d447b6faae870f890dc5780cc58d9afdbc36a1d\",\r\n            \"width\" : 300\r\n          }, {\r\n            \"height\" : 64,\r\n            \"url\" : \"https://i.scdn.co/image/d926b3e5f435ef3ac0874b1ff1571cf675b3ef3b\",\r\n            \"width\" : 64\r\n          } ],\r\n          \"name\" : \"I'm Not The Only One\",\r\n          \"type\" : \"album\"\r\n        },\r\n        \"artists\" : [ {\r\n          \"href\" : \"https://api.symphonia.com/v1/artists/2wY79sveU1sp5g7SokKOiI\",\r\n          \"id\" : \"2wY79sveU1sp5g7SokKOiI\",\r\n          \"name\" : \"Sam Smith\",\r\n          \"type\" : \"artist\"\r\n        } ],\r\n        \"available_markets\" : [ \"AD\", \"AR\", \"AT\", \"AU\", \"BE\", \"BG\", \"BO\", \"BR\", \"CH\", \"CL\", \"CO\", \"CR\", \"CY\", \"CZ\", \"DK\", \"DO\", \"EC\", \"EE\", \"ES\", \"FI\", \"FR\", \"GB\", \"GR\", \"GT\", \"HK\", \"HN\", \"HU\", \"IE\", \"IS\", \"IT\", \"LI\", \"LT\", \"LU\", \"LV\", \"MC\", \"MT\", \"MY\", \"NI\", \"NL\", \"NO\", \"NZ\", \"PA\", \"PE\", \"PH\", \"PL\", \"PT\", \"PY\", \"RO\", \"SE\", \"SG\", \"SI\", \"SK\", \"SV\", \"TR\", \"TW\", \"UY\" ],\r\n        \"duration_ms\" : 204732,\r\n        \"explicit\" : false,\r\n        \"href\" : \"https://api.symphonia.com/v1/tracks/4i9sYtSIlR80bxje5B3rUb\",\r\n        \"id\" : \"4i9sYtSIlR80bxje5B3rUb\",\r\n        \"name\" : \"I'm Not The Only One - Radio Edit\",\r\n        \"popularity\" : 45,\r\n        \"track_number\" : 1,\r\n        \"type\" : \"track\"\r\n      }\r\n    }],\r\n    \"limit\" : 100,\r\n    \"next\" : \"https://api.symphonia.com/v1/users/symphonia/playlists/59ZbFPES4DQwEjBpWHzrtC/tracks?offset=100&limit=100\",\r\n    \"offset\" : 0,\r\n    \"previous\" : null,\r\n    \"total\" : 105\r\n  },\r\n  \"type\" : \"playlist\"\r\n}"
						}
					]
				},
				{
					"name": "Get a Playlist's Tracks",
					"request": {
						"method": "GET",
						"header": [
							{
								"description": "*Required*. A valid access token from the Symphonia Accounts service.\n",
								"key": "Authorization",
								"type": "text",
								"value": ""
							}
						],
						"url": {
							"raw": "{{URL}}api/v1/playlists/:{playlist_id}/tracks",
							"host": [
								"{{URL}}api"
							],
							"path": [
								"v1",
								"playlists",
								":{playlist_id}",
								"tracks"
							],
							"variable": [
								{
									"description": "The Symphonia ID for the playlist.",
									"key": "{playlist_id}",
									"value": ""
								}
							]
						},
						"description": "# Description\r\n\r\nGet full details of the tracks of a playlist owned by a Symphonia user.\r\n\r\n## Response Format\r\n\r\nOn success, the response body contains an array of playlist track objects (wrapped in a paging object) in JSON format and the HTTP status code in the response header is `200` OK. On error, the header status code is an error code and the response body contains an error object. Requesting playlists that you do not have the user’s authorization to access returns error `403` Forbidden.\r\n\r\n\r\n### playlist track object\r\n\r\n<table>\r\n  <thead>\r\n    <tr>\r\n      <th>Key</th>\r\n      <th>Value Type</th>\r\n      <th>Value Description</th>\r\n    </tr>\r\n  </thead>\r\n  <tbody>\r\n    <tr>\r\n      <td>added_at</td>\r\n      <td>a timestamp</td>\r\n      <td>The date and time the track was added. <em>Note that some very old playlists may return <code class=\"highlighter-rouge\">null</code> in this field.</em></td>\r\n    </tr>\r\n    <tr>\r\n      <td>added_by</td>\r\n      <td>a user object</td>\r\n      <td>The Symphonia user who added the track.</td>\r\n    </tr>\r\n    <tr>\r\n      <td>track</td>\r\n      <td>a track object</td>\r\n      <td>Information about the track.</td>\r\n    </tr>\r\n  </tbody>\r\n</table>\r\n\r\n## track object\r\n\r\n<table>\r\n  <thead>\r\n    <tr>\r\n      <th>Key</th>\r\n      <th>Value Type</th>\r\n      <th>Value Description</th>\r\n    </tr>\r\n  </thead>\r\n  <tbody>\r\n    <tr>\r\n      <td>album</td>\r\n      <td>an album object</a></td>\r\n      <td>The album on which the track appears. The album object includes a link in <code class=\"highlighter-rouge\">href</code> to full information about the album.</td>\r\n    </tr>\r\n    <tr>\r\n      <td>artists</td>\r\n      <td>an array of artist objects</td>\r\n      <td>The artists who performed the track. Each artist object includes a link in <code class=\"highlighter-rouge\">href</code> to more detailed information about the artist.</td>\r\n    </tr>\r\n    <tr>\r\n      <td>available_markets</td>\r\n      <td>array of strings</td>\r\n      <td>A list of the countries in which the track can be played, identified by their <a href=\"http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2\">ISO 3166-1 alpha-2</a> code.</td>\r\n    </tr>\r\n    <tr>\r\n      <td>duration_ms</td>\r\n      <td>integer</td>\r\n      <td>The track length in milliseconds.</td>\r\n    </tr>\r\n    <tr>\r\n      <td>explicit</td>\r\n      <td>Boolean</td>\r\n      <td>Whether or not the track has explicit lyrics ( <code class=\"highlighter-rouge\">true</code> = yes it does; <code class=\"highlighter-rouge\">false</code> = no it does not OR unknown).</td>\r\n    </tr>\r\n    <tr>\r\n      <td>href</td>\r\n      <td>string</td>\r\n      <td>A link to the Web API endpoint providing full details of the track.</td>\r\n    </tr>\r\n    <tr>\r\n      <td>id</td>\r\n      <td>string</td>\r\n      <td>The Symphonia ID for the track.</td>\r\n    </tr>\r\n    <tr>\r\n      <td>name</td>\r\n      <td>string</td>\r\n      <td>The name of the track.</td>\r\n    </tr>\r\n    <tr>\r\n      <td>popularity</td>\r\n      <td>integer</td>\r\n      <td>The popularity of the track. The value will be between 0 and 100, with 100 being the most popular.<br />The popularity of a track is a value between 0 and 100, with 100 being the most popular. The popularity is calculated by algorithm and is based, in the most part, on the total number of plays the track has had and how recent those plays are.</td>\r\n    </tr>\r\n    <tr>\r\n      <td>type</td>\r\n      <td>string</td>\r\n      <td>The object type: “track”.</td>\r\n    </tr>\r\n  </tbody>\r\n</table>\r\n\r\n### paging object\r\n\r\n<table>\r\n  <thead>\r\n    <tr>\r\n      <th>Key</th>\r\n      <th>Value Type</th>\r\n      <th>Value Description</th>\r\n    </tr>\r\n  </thead>\r\n  <tbody>\r\n    <tr>\r\n      <td>href</td>\r\n      <td>string</td>\r\n      <td>A link to the Web API endpoint returning the full result of the request.</td>\r\n    </tr>\r\n    <tr>\r\n      <td>items</td>\r\n      <td>an array of objects</td>\r\n      <td>The requested data.</td>\r\n    </tr>\r\n    <tr>\r\n      <td>limit</td>\r\n      <td>integer</td>\r\n      <td>The maximum number of items in the response (as set in the query or by default).</td>\r\n    </tr>\r\n    <tr>\r\n      <td>next</td>\r\n      <td>string</td>\r\n      <td>URL to the next page of items. ( <code class=\"highlighter-rouge\">null</code> if none)</td>\r\n    </tr>\r\n    <tr>\r\n      <td>offset</td>\r\n      <td>integer</td>\r\n      <td>The offset of the items returned (as set in the query or by default).</td>\r\n    </tr>\r\n    <tr>\r\n      <td>previous</td>\r\n      <td>string</td>\r\n      <td>URL to the previous page of items. ( <code class=\"highlighter-rouge\">null</code> if none)</td>\r\n    </tr>\r\n    <tr>\r\n      <td>total</td>\r\n      <td>integer</td>\r\n      <td>The total number of items available to return.</td>\r\n    </tr>\r\n  </tbody>\r\n</table>\r\n\r\n<br>\r\n\r\n## Request parameters"
					},
					"response": [
						{
							"name": "Get a Playlist's Tracks",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {your access token}",
										"description": "**Required**. A valid access token from the Symphonia Accounts service.\n",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{URL}}api/v1/playlists/:{playlist_id}/tracks",
									"host": [
										"{{URL}}api"
									],
									"path": [
										"v1",
										"playlists",
										":{playlist_id}",
										"tracks"
									],
									"variable": [
										{
											"key": "{playlist_id}",
											"value": "21THa8j9TaSGuXYNBU5tsC",
											"description": "The Symphonia ID for the playlist."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\r\n  \"href\" : \"https://api.symphonia.com/v1/users/symphonia_espa%C3%B1a/playlists/21THa8j9TaSGuXYNBU5tsC/tracks\",\r\n  \"items\" : [ {\r\n    \"added_at\" : \"2016-10-11T13:44:40Z\",\r\n    \"added_by\" : {\r\n      \"href\" : \"https://api.symphonia.com/v1/users/symphonia_espa%C3%B1a\",\r\n      \"id\" : \"symphonia_españa\",\r\n      \"type\" : \"user\"\r\n    },\r\n    \"track\" : {\r\n      \"album\" : {\r\n        \"album_type\" : \"single\",\r\n        \"artists\" : [ {\r\n          \"href\" : \"https://api.symphonia.com/v1/artists/21451j1KhjAiaYKflxBjr1\",\r\n          \"id\" : \"21451j1KhjAiaYKflxBjr1\",\r\n          \"name\" : \"Zion & Lennox\",\r\n          \"type\" : \"artist\"\r\n        } ],\r\n        \"available_markets\" : [ \"AD\", \"AR\", \"AT\", \"AU\", \"BE\", \"BG\", \"BO\", \"BR\", \"CA\", \"CH\", \"CL\", \"CO\", \"CR\", \"CY\", \"CZ\", \"DE\", \"DK\", \"DO\", \"EC\", \"EE\", \"ES\", \"FI\", \"FR\", \"GB\", \"GR\", \"GT\", \"HK\", \"HN\", \"HU\", \"ID\", \"IE\", \"IS\", \"IT\", \"JP\", \"LI\", \"LT\", \"LU\", \"LV\", \"MC\", \"MT\", \"MX\", \"MY\", \"NI\", \"NL\", \"NO\", \"NZ\", \"PA\", \"PE\", \"PH\", \"PL\", \"PT\", \"PY\", \"SE\", \"SG\", \"SK\", \"SV\", \"TR\", \"TW\", \"UY\" ],\r\n        \"href\" : \"https://api.symphonia.com/v1/albums/5GjKG3Y8OvSVJO55dQTFyD\",\r\n        \"id\" : \"5GjKG3Y8OvSVJO55dQTFyD\",\r\n        \"images\" : [ {\r\n          \"height\" : 640,\r\n          \"url\" : \"https://i.scdn.co/image/b16064142fcd2bd318b08aab0b93b46e87b1ebf5\",\r\n          \"width\" : 640\r\n        }, {\r\n          \"height\" : 300,\r\n          \"url\" : \"https://i.scdn.co/image/9f05124de35d807b78563ea2ca69550325081747\",\r\n          \"width\" : 300\r\n        }, {\r\n          \"height\" : 64,\r\n          \"url\" : \"https://i.scdn.co/image/863c805b580a29c184fc447327e28af5dac9490b\",\r\n          \"width\" : 64\r\n        } ],\r\n        \"name\" : \"Otra Vez (feat. J Balvin)\",\r\n        \"type\" : \"album\"\r\n      },\r\n      \"artists\" : [ {\r\n        \"href\" : \"https://api.symphonia.com/v1/artists/21451j1KhjAiaYKflxBjr1\",\r\n        \"id\" : \"21451j1KhjAiaYKflxBjr1\",\r\n        \"name\" : \"Zion & Lennox\",\r\n        \"type\" : \"artist\"\r\n      }, {\r\n        \"href\" : \"https://api.symphonia.com/v1/artists/1vyhD5VmyZ7KMfW5gqLgo5\",\r\n        \"id\" : \"1vyhD5VmyZ7KMfW5gqLgo5\",\r\n        \"name\" : \"J Balvin\",\r\n        \"type\" : \"artist\"\r\n      } ],\r\n      \"available_markets\" : [ \"AD\", \"AR\", \"AT\", \"AU\", \"BE\", \"BG\", \"BO\", \"BR\", \"CA\", \"CH\", \"CL\", \"CO\", \"CR\", \"CY\", \"CZ\", \"DE\", \"DK\", \"DO\", \"EC\", \"EE\", \"ES\", \"FI\", \"FR\", \"GB\", \"GR\", \"GT\", \"HK\", \"HN\", \"HU\", \"ID\", \"IE\", \"IS\", \"IT\", \"JP\", \"LI\", \"LT\", \"LU\", \"LV\", \"MC\", \"MT\", \"MX\", \"MY\", \"NI\", \"NL\", \"NO\", \"NZ\", \"PA\", \"PE\", \"PH\", \"PL\", \"PT\", \"PY\", \"SE\", \"SG\", \"SK\", \"SV\", \"TR\", \"TW\", \"UY\" ],\r\n      \"duration_ms\" : 209453,\r\n      \"explicit\" : false,\r\n      \"href\" : \"https://api.symphonia.com/v1/tracks/7pk3EpFtmsOdj8iUhjmeCM\",\r\n      \"id\" : \"7pk3EpFtmsOdj8iUhjmeCM\",\r\n      \"name\" : \"Otra Vez (feat. J Balvin)\",\r\n      \"popularity\" : 85,\r\n      \"type\" : \"track\"\r\n    }\r\n  }, {\r\n    \"added_at\" : \"2016-10-11T13:44:40Z\",\r\n    \"added_by\" : {\r\n      \"href\" : \"https://api.symphonia.com/v1/users/symphonia_espa%C3%B1a\",\r\n      \"id\" : \"symphonia_españa\",\r\n      \"type\" : \"user\"\r\n    }\r\n  } ],\r\n  \"limit\" : 100,\r\n  \"next\" : null,\r\n  \"offset\" : 0,\r\n  \"previous\" : null,\r\n  \"total\" : 58\r\n}"
						}
					]
				},
				{
					"name": "Remove Tracks from a Playlist",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"description": "*Required*. A valid access token from the Symphonia Accounts service.\n",
								"key": "Authorization",
								"type": "text",
								"value": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": "*Required*. The content type of the request body:",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{URL}}api/v1/playlists/:{playlist_id}/tracks",
							"host": [
								"{{URL}}api"
							],
							"path": [
								"v1",
								"playlists",
								":{playlist_id}",
								"tracks"
							],
							"variable": [
								{
									"description": "The Symphonia ID for the playlist.",
									"key": "{playlist_id}",
									"value": ""
								}
							]
						},
						"description": "# Description\n\nRemove one or more tracks from a user’s playlist.\n\n\n## Response Format \n\nOn success, the response body contains the HTTP status code in the response header `200` OK.\n\nOn error, the header status code is an error code and the response body contains an error object. Trying to remove a track when you do not have the user’s authorization returns error `403` Forbidden. Attempting to use several different ways to remove tracks returns `400` Bad Request. Other client errors returning `400` Bad Request include specifying invalid positions.\n\n<br> \n\n## Request parameters\n\n### body parameters\n\n<table>\n  <thead>\n    <tr>\n      <th>Request data</th>\n      <th>Value type</th>\n      <th>Value</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>tracks</td>\n      <td>array of objects containing ids strings</td>\n      <td><em>Required</em>. An array of objects containing Symphonia ids of the tracks to remove. For example: <code class=\"highlighter-rouge\">{ \"tracks\": [{ \"id\": \"4iV5W9uYEdYUVa79Axb7Rh\" },{ \"id\": \"1301WleyT98MSxVHPZCA6M\" }] }</code>. A maximum of 100 objects can be sent at once.</td>\n    </tr>\n  </tbody>\n</table>\n\n<br>"
					},
					"response": [
						{
							"name": "Remove Tracks from a Playlist",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"description": "*Required*. A valid access token from the Symphonia Accounts service.\n",
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {your access token}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"tracks\": [\n        {\n            \"id\": \"4iV5W9uYEdYUVa79Axb7Rh\"\n        },\n        {\n            \"id\": \"1301WleyT98MSxVHPZCA6M\"\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}api/v1/playlists/:{playlist_id}/tracks",
									"host": [
										"{{URL}}api"
									],
									"path": [
										"v1",
										"playlists",
										":{playlist_id}",
										"tracks"
									],
									"variable": [
										{
											"description": "The Symphonia ID for the playlist.",
											"key": "{playlist_id}",
											"value": "71m0QB5fUFrnqfnxVerUup"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": null,
							"cookie": [],
							"body": "{\n\t\"status\": \"success\"\n}"
						}
					]
				},
				{
					"name": "Add Tracks to a Playlist",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "",
								"description": "*Required*. A valid access token from the Symphonia Accounts service.\n",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text",
								"description": "*Required* . The content type of the request body:"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}api/v1/playlists/:{playlist_id}/tracks",
							"host": [
								"{{URL}}api"
							],
							"path": [
								"v1",
								"playlists",
								":{playlist_id}",
								"tracks"
							],
							"variable": [
								{
									"key": "{playlist_id}",
									"value": "",
									"description": "The Symphonia ID for the playlist."
								}
							]
						},
						"description": "## Description\n\nAdd one or more tracks to a user’s playlist.\n\n## Response Format \nOn success, the HTTP status code in the response header is `201` Created. On error, the header status code is an error code and the response body contains an error object. Trying to add a track when you do not have the user’s authorization, or when there are more than 10.000 tracks in the playlist, returns error 403 Forbidden.\n\n## Request parameters\n\n<table>\n  <thead>\n    <tr>\n      <th>Request Body Data</th>\n      <th>Value Type</th>\n      <th>Value</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>ids</td>\n      <td>array of strings</td>\n      <td><em>Optional</em>. A JSON array of the Symphonia track ids</a> to add. For example: <code class=\"highlighter-rouge\">{\"ids\": [\"4iV5W9uYEdYUVa79Axb7Rh\",\"1301WleyT98MSxVHPZCA6M\"]}</code><br />A maximum of 100 tracks can be added in one request.</td>\n    </tr>\n    <tr>\n      <td>position</td>\n      <td>integer</td>\n      <td>Optional. The position to insert the tracks, a zero-based index. For example, to insert the tracks in the first position: <code class=\"highlighter-rouge\">position=0</code> ; to insert the tracks in the third position: <code class=\"highlighter-rouge\">position=2</code>. If omitted, the tracks will be appended to the playlist. Tracks are added in the order they appear in the uris array. For example: <code class=\"highlighter-rouge\">{\"ids\": [\"4iV5W9uYEdYUVa79Axb7Rh\",\"1301WleyT98MSxVHPZCA6M\"], \"position\": 3}</code></td>\n    </tr>\n  </tbody>\n</table>\n<br>\n<br>"
					},
					"response": [
						{
							"name": "Add Tracks to a Playlist",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {your access token}",
										"description": "*Required*. A valid access token from the Symphonia Accounts service.\n",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"position\":\"position\"\n}",
									"options": {
										"raw": {
											"language": "javascript"
										}
									}
								},
								"url": {
									"raw": "{{URL}}api/v1/playlists/:{playlist_id}/tracks",
									"host": [
										"{{URL}}api"
									],
									"path": [
										"v1",
										"playlists",
										":{playlist_id}",
										"tracks"
									],
									"variable": [
										{
											"key": "{playlist_id}",
											"value": "7oi0w0SLbJ4YyjrOxhZbUv",
											"description": "The Symphonia ID for the playlist."
										}
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{ \n\t\"status\" : \"success\" \n}"
						}
					]
				},
				{
					"name": "Create a Playlist",
					"request": {
						"method": "POST",
						"header": [
							{
								"description": "*Required*. A valid access token from the Symphonia Accounts service.\n",
								"key": "Authorization",
								"type": "text",
								"value": ""
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"description": "*Required*. The content type of the request body:",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}api/v1/users/:{user_id}/playlists",
							"host": [
								"{{URL}}api"
							],
							"path": [
								"v1",
								"users",
								":{user_id}",
								"playlists"
							],
							"variable": [
								{
									"description": "The user’s Symphonia user ID.",
									"key": "{user_id}",
									"value": ""
								}
							]
						},
						"description": "# Description\nCreate a playlist for a Symphonia user. (The playlist will be empty until you add tracks.)\n\n## Response Format \nOn success, the response body contains the created playlist object in JSON format and the HTTP status code in the response header is `200` OK or `201` Created. There is also a Location response header giving the Web API endpoint for the new playlist.\nOn error, the header status code is an error code and the response body contains an error object. Trying to create a playlist when you do not have the user’s authorization returns error `403` Forbidden.\n\n### Example\n\n### playlist object\n\n<table>\n  <thead>\n    <tr>\n      <th>Key</th>\n      <th>Value Type</th>\n      <th>Value Description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>collaborative</td>\n      <td>Boolean</td>\n      <td><code class=\"highlighter-rouge\">true</code> if the owner allows other users to modify the playlist.</td>\n    </tr>\n    <tr>\n      <td>description</td>\n      <td>string</td>\n      <td>The playlist description. <em>Only returned for modified, verified playlists, otherwise</em> <code class=\"highlighter-rouge\">null</code>.</td>\n    </tr>\n    <tr>\n      <td>followers</td>\n      <td>a followers object</td>\n      <td>Information about the followers of the playlist.</td>\n    </tr>\n    <tr>\n      <td>href</td>\n      <td>string</td>\n      <td>A link to the Web API endpoint providing full details of the playlist.</td>\n    </tr>\n    <tr>\n      <td>id</td>\n      <td>string</td>\n      <td>The Symphonia ID for the playlist.</td>\n    </tr>\n    <tr>\n      <td>images</td>\n      <td>an array of image objects</td>\n      <td>Images for the playlist. The array may be empty or contain up to three images. The images are returned by size in descending order.</td>\n    </tr>\n    <tr>\n      <td>name</td>\n      <td>string</td>\n      <td>The name of the playlist.</td>\n    </tr>\n    <tr>\n      <td>owner</td>\n      <td>a public user object</td>\n      <td>The user who owns the playlist</td>\n    </tr>\n    <tr>\n      <td>public</td>\n      <td>Boolean or <code class=\"highlighter-rouge\">null</code></td>\n      <td>The playlist’s public/private status: <code class=\"highlighter-rouge\">true</code> the playlist is public, <code class=\"highlighter-rouge\">false</code> the playlist is private, <code class=\"highlighter-rouge\">null</code> the playlist status is not relevant.</td>\n    </tr>\n    <tr>\n      <td>tracks</td>\n      <td>array of playlist track objects inside a paging object</td>\n      <td>Information about the tracks of the playlist.</td>\n    </tr>\n    <tr>\n      <td>type</td>\n      <td>string</td>\n      <td>The object type: “playlist”</td>\n    </tr>\n  </tbody>\n</table>\n\n<br>\n\n\n## Request parameters\n\n### Body Parameters\n\n<table>\n  <thead>\n    <tr>\n      <th>Request Body Data</th>\n      <th>Value Type</th>\n      <th>Value</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>name</td>\n      <td>string</td>\n      <td><em>Required</em>. The name for the new playlist, for example <code class=\"highlighter-rouge\">\"Your Coolest Playlist\"</code> . This name does not need to be unique; a user may have several playlists with the same name.</td>\n    </tr>\n    <tr>\n      <td>public</td>\n      <td>Boolean</td>\n      <td><em>Optional</em>. Defaults to <code class=\"highlighter-rouge\">true</code> . If <code class=\"highlighter-rouge\">true</code> the playlist will be public, if <code class=\"highlighter-rouge\">false</code> it will be private.</td>\n    </tr>\n    <tr>\n      <td>collaborative</td>\n      <td>Boolean</td>\n      <td><em>Optional</em>. Defaults to <code class=\"highlighter-rouge\">false</code> . If <code class=\"highlighter-rouge\">true</code> the playlist will be collaborative. Note that to create a collaborative playlist you must also set <code class=\"highlighter-rouge\">public</code> to <code class=\"highlighter-rouge\">false</code> .</td>\n    </tr>\n    <tr>\n      <td>description</td>\n      <td>string</td>\n      <td><em>Optional</em>. value for playlist description as displayed in Symphonia Clients and in the Web API.</td>\n    </tr>\n  </tbody>\n</table>\n<br>"
					},
					"response": [
						{
							"name": "Create a Playlist",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "**Required**. A valid access token from the Symphonia Accounts service.\n",
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {your access token}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"A New Playlist\",\n    \"public\": false\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}api/v1/users/:{user_id}/playlists",
									"host": [
										"{{URL}}api"
									],
									"path": [
										"v1",
										"users",
										":{user_id}",
										"playlists"
									],
									"variable": [
										{
											"key": "{user_id}",
											"value": "thelinmichael",
											"description": "The user’s Symphonia user ID."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\r\n   \"collaborative\": false,\r\n   \"description\": null,\r\n   \"followers\": {\r\n     \"href\": null,\r\n     \"total\": 0\r\n   },\r\n   \"href\": \"https://api.symphonia.com/v1/users/thelinmichael/playlists/7d2D2S200NyUE5KYs80PwO\",\r\n   \"id\": \"7d2D2S200NyUE5KYs80PwO\",\r\n   \"images\": [ ],\r\n   \"name\": \"A New Playlist\",\r\n   \"owner\": {\r\n     \"href\": \"https://api.symphonia.com/v1/users/thelinmichael\",\r\n     \"id\": \"thelinmichael\",\r\n     \"type\": \"user\"\r\n   },\r\n   \"public\": false,\r\n   \"tracks\": {\r\n     \"href\": \"https://api.symphonia.com/v1/users/thelinmichael/playlists/7d2D2S200NyUE5KYs80PwO/tracks\",\r\n     \"items\": [ ],\r\n     \"limit\": 100,\r\n     \"next\": null,\r\n     \"offset\": 0,\r\n     \"previous\": null,\r\n     \"total\": 0\r\n   },\r\n \"type\": \"playlist\"\r\n}"
						}
					]
				},
				{
					"name": "Change a Playlist's Details",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "",
								"description": "*Required*. A valid access token from the Symphonia Accounts service.\n",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"description": "*Required*. The content type of the request body:",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}api/v1/playlists/:{playlist_id}",
							"host": [
								"{{URL}}api"
							],
							"path": [
								"v1",
								"playlists",
								":{playlist_id}"
							],
							"variable": [
								{
									"key": "{playlist_id}",
									"value": "",
									"description": "The Symphonia ID for the playlist."
								}
							]
						},
						"description": "## Description \nChange a playlist’s name and public/private state. (The user must, of course, own the playlist.)\n\n## Response Format\nOn success the HTTP status code in the response header is `200` OK.\n\nOn error, the header status code is an error code and the response body contains an error object. Trying to change a playlist when you do not have the user’s authorization returns error `403` Forbidden.\n\n## Request parameters\n\n<table>\n  <thead>\n    <tr>\n      <th>Request Body Data</th>\n      <th>Value Type</th>\n      <th>Value</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>name</td>\n      <td>string</td>\n      <td><em>Optional</em>. The new name for the playlist, for example <code class=\"highlighter-rouge\">\"My New Playlist Title\"</code>.</td>\n    </tr>\n    <tr>\n      <td>public</td>\n      <td>Boolean</td>\n      <td><em>Optional</em>. If <code class=\"highlighter-rouge\">true</code> the playlist will be public, if <code class=\"highlighter-rouge\">false</code> it will be private.</td>\n    </tr>\n    <tr>\n      <td>collaborative</td>\n      <td>Boolean</td>\n      <td><em>Optional</em>. If <code class=\"highlighter-rouge\">true</code> , the playlist will become collaborative and other users will be able to modify the playlist in their Symphonia client. <em>Note: You can only set <code class=\"highlighter-rouge\">collaborative</code> to <code class=\"highlighter-rouge\">true</code> on non-public playlists.</em></td>\n    </tr>\n    <tr>\n      <td>description</td>\n      <td>string</td>\n      <td><em>Optional</em>. Value for playlist description as displayed in Symphonia Clients and in the Web API.</td>\n    </tr>\n  </tbody>\n</table>"
					},
					"response": [
						{
							"name": "Change a Playlist's Details",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {your access token}",
										"description": "*Required*. A valid access token from the Symphonia Accounts service.\n",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"description": "*Required*. The content type of the request body:",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"My New Playlist Title\",\n    \"public\": true\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}api/v1/playlists/:{playlist_id}",
									"host": [
										"{{URL}}api"
									],
									"path": [
										"v1",
										"playlists",
										":{playlist_id}"
									],
									"variable": [
										{
											"key": "{playlist_id}",
											"value": "6Df19VKaShrdWrAnHinwVO",
											"description": "The Symphonia ID for the playlist."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": null,
							"cookie": [],
							"body": "{\n\t\"status\": \"success\"\n}"
						}
					]
				},
				{
					"name": "Replace a Playlist's Tracks",
					"request": {
						"method": "PUT",
						"header": [
							{
								"description": "*Required*. A valid access token from the Symphonia Accounts service.\n",
								"key": "Authorization",
								"type": "text",
								"value": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": "*Required*. The content type of the request body:",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{URL}}api/v1/playlists/:{playlist_id}/tracks",
							"host": [
								"{{URL}}api"
							],
							"path": [
								"v1",
								"playlists",
								":{playlist_id}",
								"tracks"
							],
							"variable": [
								{
									"description": "The Symphonia ID for the playlist.",
									"key": "{playlist_id}",
									"value": ""
								}
							]
						},
						"description": "# Description\nReplace all the tracks in a playlist, overwriting its existing tracks. This powerful request can be useful for replacing tracks, re-ordering existing tracks, or clearing the playlist.\n\n## Response Format \nOn success, the HTTP status code in the response header is `201` Created.On error, the header status code is an error code, the response body contains an error object, and the existing playlist is unmodified. Trying to set a track when you do not have the user’s authorization returns error `403` Forbidden.\n\n## Request parameters\n\n### body parameters\n\n<table>\n  <thead>\n    <tr>\n      <th>Request Body Data</th>\n      <th>Value Type</th>\n      <th>Value</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>ids</td>\n      <td>array of Symphonia id strings</td>\n      <td><em>Optional</em>. A JSON array of the Symphonia track ids to set. For example: <code class=\"highlighter-rouge\">{\"ids\": [\"4iV5W9uYEdYUVa79Axb7Rh\", \"1301WleyT98MSxVHPZCA6M\"]}</code><br />Currently, a maximum of 100 tracks can be set</td>\n    </tr>\n  </tbody>\n</table>\n<br>"
					},
					"response": [
						{
							"name": "Replace a Playlist's Tracks",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"description": "*Required*. A valid access token from the Symphonia Accounts service.\n",
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {your access token"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"description": "*Required*. The content type of the request body:",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"ids\": [\n        \"4iV5W9uYEdYUVa79Axb7Rh\",\n        \"1301WleyT98MSxVHPZCA6M\"\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}api/v1/playlists/:{playlist_id}/tracks",
									"host": [
										"{{URL}}api"
									],
									"path": [
										"v1",
										"playlists",
										":{playlist_id}",
										"tracks"
									],
									"variable": [
										{
											"description": "The Symphonia ID for the playlist.",
											"key": "{playlist_id}",
											"value": "0vXtvEeftmc2aVQD9QBWrQ"
										}
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": null,
							"cookie": [],
							"body": "{\n\t\"status\": \"success\"\n}"
						}
					]
				},
				{
					"name": "Upload a Custom Playlist Cover Image",
					"request": {
						"method": "PUT",
						"header": [
							{
								"description": "*Required*. A valid access token from the Symphonia Accounts service.\n",
								"key": "Authorization",
								"type": "text",
								"value": ""
							},
							{
								"key": "Content-Type",
								"value": "image/jpeg",
								"description": "*Required*. The content type of the request body:",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{URL}}api/v1/playlists/:{playlist_id}/images",
							"host": [
								"{{URL}}api"
							],
							"path": [
								"v1",
								"playlists",
								":{playlist_id}",
								"images"
							],
							"variable": [
								{
									"description": "The Symphonia ID for the playlist.",
									"key": "{playlist_id}",
									"value": ""
								}
							]
						},
						"description": "# description \n\nReplace the image used to represent a specific playlist.\n\n\n## Rate limiting\n\nIf you get status code `429`, it means that you have sent too many requests. If this happens, have a look in the Retry-After header, where you will see a number displayed. This is the amount of seconds that you need to wait, before you can retry sending your requests. \n\n## Response Format\n\nA successful request will return a `202` ACCEPTED response code.\n\nOn error, the header status code is an error code and the response body contains an error object.\n\n## Request parameters\n\n### Body Parameters \nBase64 encoded JPEG image data, maximum payload size is 256 KB"
					},
					"response": []
				},
				{
					"name": "Reorder a Playlist's Tracks",
					"request": {
						"method": "PUT",
						"header": [
							{
								"description": "*Required*. A valid access token from the Symphonia Accounts service.\n",
								"key": "Authorization",
								"type": "text",
								"value": ""
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"description": "*Required*  The content type of the request body:",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}api/v1/playlists/:{playlist_id}/tracks",
							"host": [
								"{{URL}}api"
							],
							"path": [
								"v1",
								"playlists",
								":{playlist_id}",
								"tracks"
							],
							"variable": [
								{
									"description": "The Symphonia ID for the playlist.",
									"key": "{playlist_id}",
									"value": ""
								}
							]
						},
						"description": "# Description\r\n\r\nReorder a track or a group of tracks in a playlist.\r\n\r\n\r\nWhen reordering tracks, the timestamp indicating when they were added and the user who added them will be kept untouched. In addition, the users following the playlists won’t be notified about changes in the playlists when the tracks are reordered.\r\n\r\n## Response Format \r\n\r\nOn success, the response body contains the HTTP status code in the response header `200` OK.\r\n\r\nOn error, the header status code is an error code, the response body contains an error object, and the existing playlist is unmodified.\r\n\r\n## Request parameters\r\n\r\n### body parameters\r\n\r\n<table>\r\n  <thead>\r\n    <tr>\r\n      <th>Request Body Data</th>\r\n      <th>Value Type</th>\r\n      <th>Value</th>\r\n    </tr>\r\n  </thead>\r\n  <tbody>\r\n    <tr>\r\n      <td>range_start</td>\r\n      <td>integer</td>\r\n      <td><em>Required</em>. The position of the first track to be reordered.</td>\r\n    </tr>\r\n    <tr>\r\n      <td>range_length</td>\r\n      <td>integer</td>\r\n      <td><em>Optional</em>. The amount of tracks to be reordered. Defaults to 1 if not set.<br />The range of tracks to be reordered begins from the <em>range_start</em> position, and includes the <em>range_length</em> subsequent tracks.<br />Example:<br />To move the tracks at index 9-10 to the start of the playlist, <em>range_start</em> is set to 9, and <em>range_length</em> is set to 2.</td>\r\n    </tr>\r\n    <tr>\r\n      <td>insert_before</td>\r\n      <td>integer</td>\r\n      <td><em>Required</em>. The position where the tracks should be inserted.<br />To reorder the tracks to the end of the playlist, simply set <em>insert_before</em> to the position after the last track.<br />Examples:<br />To reorder the first track to the last position in a playlist with 10 tracks, set <em>range_start</em> to 0, and <em>insert_before</em> to 10.<br />To reorder the last track in a playlist with 10 tracks to the start of the playlist, set <em>range_start</em> to 9, and <em>insert_before</em> to 0.</td>\r\n    </tr>\r\n  </tbody>\r\n</table>\r\n\r\n<br>"
					},
					"response": [
						{
							"name": "Reorder a Playlist's Tracks",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"description": "*Required*. A valid access token from the Symphonia Accounts service.\n",
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {your access token}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"description": "*Required*  The content type of the request body:",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"range_start\": 1,\n    \"range_length\": 2,\n    \"insert_before\": 3\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}api/v1/playlists/:{playlist_id}/tracks",
									"host": [
										"{{URL}}api"
									],
									"path": [
										"v1",
										"playlists",
										":{playlist_id}",
										"tracks"
									],
									"variable": [
										{
											"description": "The Symphonia ID for the playlist.",
											"key": "{playlist_id}",
											"value": "0vXtvEeftmc2aVQD9QBWrQ"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": null,
							"cookie": [],
							"body": "{\n\t\"status\": \"success\"\n}"
						}
					]
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Search",
			"item": [
				{
					"name": "Search",
					"request": {
						"method": "GET",
						"header": [
							{
								"description": "*Required*. A valid access token from the Symphonia Accounts service.",
								"key": "Authorization",
								"type": "text",
								"value": ""
							}
						],
						"url": {
							"raw": "{{URL}}api/v1/search?q\t&type&market\t&limit\t&offset",
							"host": [
								"{{URL}}api"
							],
							"path": [
								"v1",
								"search"
							],
							"query": [
								{
									"key": "q\t",
									"value": null,
									"description": "*Required*.\nSearch query keywords and optional field filters and operators.\nFor example:\nq=roadhouse%20blues."
								},
								{
									"key": "type",
									"value": null,
									"description": "*Required*.\nA comma-separated list of item types to search across.\nValid types are: *album* , *artist*, *playlist*, and *track*.\nSearch results include hits from all the specified item types.\nFor example: q=name:abacab&type=album,track returns both albums and tracks with “abacab” included in their name."
								},
								{
									"key": "market\t",
									"value": null,
									"description": "*Optional*.\nAn ISO 3166-1 alpha-2 country code or the string from_token.\nIf a country code is specified, only artists, albums, and tracks with content that is playable in that market is returned."
								},
								{
									"key": "limit\t",
									"value": null,
									"description": "*Optional*.\nMaximum number of results to return.\nDefault: 20\nMinimum: 1\nMaximum: 50\nNote: The limit is applied within each type, not on the total response.\nFor example, if the limit value is 3 and the type is artist,album, the response contains 3 artists and 3 albums"
								},
								{
									"key": "offset",
									"value": null,
									"description": "*Optional*.\nThe index of the first result to return.\nDefault: 0 (the first result).\nMaximum offset (including limit): 2,000.\nUse with limit to get the next page of search results."
								}
							]
						},
						"description": "# Search for an Item \r\nGet Symphonia Catalog information about artists, albums, tracks or playlists that match a keyword string.\r\n\r\n# Writing a Query - Guidelines\r\n**Encode spaces** with the hex code %20 or +.\r\n\r\n**Keyword matching**: Matching of search keywords is not case-sensitive. Operators, however, should be specified in uppercase. Unless surrounded by double quotation marks, keywords are matched in any order. For example: `q=roadhouse&20blues` matches both “Blues Roadhouse” and “Roadhouse of the Blues”. `q=\"roadhouse&20blues\"` matches “My Roadhouse Blues” but not “Roadhouse of the Blues”.\r\n\r\nSearching for **playlists** returns results where the query keyword(s) match any part of the playlist’s name or description. Only popular public playlists are returned. \r\n\r\n**Operator**: The operator NOT can be used to exclude results. \r\n\r\nFor example: `q=roadhouse%20NOT%20blues` returns items that match “roadhouse” but excludes those that also contain the keyword “blues”. Similarly, the OR operator can be used to broaden the search: q=roadhouse%20OR%20blues returns all the results that include either of the terms. Only one OR operator can be used in a query. \r\n\r\nNote: Operators must be specified in uppercase. Otherwise, they are handled as normal keywords to be matched. \r\n\r\n**Field filters**: By default, results are returned when a match is found in any field of the target object type. Searches can be made more specific by specifying an `album`, `artist` or `track` field filter. \r\n\r\nFor example: The query `q=album:gold%20artist:abba&type=album` returns only albums with the text “gold” in the album name and the text “abba” in the artist name. \r\n\r\nTo limit the results to a particular `year`, use the field filter year with album, artist, and track searches. \r\n\r\nFor example: `q=bob%20year:2014` \r\n\r\nOr with a date range. For example: `q=bob%20year:1980-2020` \r\n\r\nTo retrieve only albums released in the last two weeks, use the field filter tag:new in album searches. To retrieve only albums with the lowest 10% popularity, use the field filter tag:hipster in album searches. Note: This field filter only works with album searches. \r\n\r\nDepending on object types being searched for, other field filters, include genre (applicable to tracks and artists), `upc`, and `isrc`. For example: `q=lil%20genre:%22southern%20hip%20hop%22&type=artist`. Use double quotation marks around the genre keyword string if it contains spaces.\r\n\r\n\r\n# Response\r\n\r\n**On success**: \r\nIn the response header the HTTP status code is 200 OK.\r\nThe response body contains an array of artist objects, simplified album objects, and/or track objects wrapped in a paging object in JSON.\r\n\r\n**On error**:\r\nThe header status code is an error code.\r\nThe response body contains an error object.\r\n\r\n# Request parameters"
					},
					"response": [
						{
							"name": "Search",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "*Required*. A valid access token from the Symphonia Accounts service.",
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {your access token}"
									}
								],
								"url": {
									"raw": "{{URL}}api/v1/search?q=tania bowra&type=artist",
									"host": [
										"{{URL}}api"
									],
									"path": [
										"v1",
										"search"
									],
									"query": [
										{
											"key": "q",
											"value": "tania bowra",
											"description": "**Required**.\nSearch query keywords and optional field filters and operators.\nFor example:\nq=roadhouse%20blues."
										},
										{
											"key": "type",
											"value": "artist",
											"description": "**Required**.\nA comma-separated list of item types to search across.\nValid types are: *album* , *artist*, *playlist*, and *track*.\nSearch results include hits from all the specified item types.\nFor example: q=name:abacab&type=album,track returns both albums and tracks with “abacab” included in their name."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n    \"artists\": {\n        \"href\": \"https://api.symphonia.com/v1/search?query=tania+bowra&offset=0&limit=20&type=artist\",\n        \"items\": [\n            {\n                \"genres\": [],\n                \"href\": \"https://api.symphonia.com/v1/artists/08td7MxkoHQkXnWAYD8d6Q\",\n                \"id\": \"08td7MxkoHQkXnWAYD8d6Q\",\n                \"images\": [\n                    {\n                        \"height\": 640,\n                        \"url\": \"https://i.scdn.co/image/f2798ddab0c7b76dc2d270b65c4f67ddef7f6718\",\n                        \"width\": 640\n                    },\n                    {\n                        \"height\": 300,\n                        \"url\": \"https://i.scdn.co/image/b414091165ea0f4172089c2fc67bb35aa37cfc55\",\n                        \"width\": 300\n                    },\n                    {\n                        \"height\": 64,\n                        \"url\": \"https://i.scdn.co/image/8522fc78be4bf4e83fea8e67bb742e7d3dfe21b4\",\n                        \"width\": 64\n                    }\n                ],\n                \"name\": \"Tania Bowra\",\n                \"popularity\": 0,\n                \"type\": \"artist\"\n            }\n        ],\n        \"limit\": 20,\n        \"next\": null,\n        \"offset\": 0,\n        \"previous\": null,\n        \"total\": 1\n    }\n}"
						}
					]
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Tracks",
			"item": [
				{
					"name": "Get Several Tracks",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"description": "**Required**. A valid access token from the Symphonia Accounts service.",
								"key": "Authorization",
								"type": "text",
								"value": "",
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
							}
						],
						"url": {
							"raw": "{{URL}}api/v1/users/tracks?ids&market",
							"host": [
								"{{URL}}api"
							],
							"path": [
								"v1",
								"users",
								"tracks"
							],
							"query": [
								{
									"key": "ids",
									"value": "",
									"description": "*Required*. A comma-separated list of the Spotify IDs for the tracks. Maximum: 50 IDs."
								},
								{
									"key": "market",
									"value": "",
									"description": "*Optional*. An ISO 3166-1 alpha-2 country code "
								}
							]
						},
						"description": "# Description\r\n\r\nGet Symphonia catalog information for multiple tracks based on their Symphonia IDs.\r\n\r\n# Response Format\r\n\r\nOn success, the HTTP status code in the response header is `200` OK and the response body contains an object whose key is tracks and whose value is an array of track objects in JSON format. Objects are returned in the order requested. If an object is not found, a null value is returned in the appropriate position. Duplicate ids in the query will result in duplicate objects in the response. On error, the header status code is an error code and the response body contains an error object.\r\n\r\n\r\n## Track object\r\n\r\n| KEY               | VALUE TYPE                            | VALUE DESCRIPTION                                                                                                              |\r\n| ----------------- | ------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------ |\r\n| album             | a simplified album object             | The album on which the track appears. The album object includes a link in href to full information about the album.            |\r\n| artists           | an array of simplified artist objects | The artists who performed the track. Each artist object includes a link in href to more detailed information about the artist. |\r\n| available_markets | array of strings                      | A list of the countries in which the track can be played, identified by their ISO 3166-1 alpha-2 code.                         |\r\n| duration_ms       | integer                               | The track length in milliseconds.                                                                                              |\r\n| explicit          | Boolean                               | Whether or not the track has explicit lyrics ( true = yes it does; false = no it does not OR unknown).                         |\r\n| href              | string                                | A link to the Web API endpoint providing full details of the track.                                                            |\r\n| id                | string                                | The Symphonia ID for the track.                                                                                                |\r\n| name              | string                                | The name of the track.                                                                                                         |\r\n| popularity        | integer                               |  The popularity of the track. The value will be between 0 and 100, with 100 being the most popular.The popularity of a track is a value between 0 and 100, with 100 being the most popular. The popularity is calculated by algorithm and is based, in the most part, on the total number of plays the track has had and how recent those plays are.                                                                                                                              |\r\n| type              | string                                | The object type: “track”.                                                                                                      |\r\n\r\n\r\n## Request parameters"
					},
					"response": [
						{
							"name": "Get Several Tracks",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {your access token}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{URL}}api/v1/users/tracks?ids=11dFghVXANMlKmJXsNCbNl,20I6sIOMTCkB6w7ryavxtO,7xGfFoTpQ2E7fRF5lN10tr",
									"host": [
										"{{URL}}api"
									],
									"path": [
										"v1",
										"users",
										"tracks"
									],
									"query": [
										{
											"key": "ids",
											"value": "11dFghVXANMlKmJXsNCbNl,20I6sIOMTCkB6w7ryavxtO,7xGfFoTpQ2E7fRF5lN10tr"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-DNS-Prefetch-Control",
									"value": "off"
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=15552000; includeSubDomains"
								},
								{
									"key": "X-Download-Options",
									"value": "noopen"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-XSS-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "X-RateLimit-Limit",
									"value": "1000"
								},
								{
									"key": "X-RateLimit-Remaining",
									"value": "998"
								},
								{
									"key": "Date",
									"value": "Thu, 05 Mar 2020 21:40:58 GMT"
								},
								{
									"key": "X-RateLimit-Reset",
									"value": "1583445683"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "2118"
								},
								{
									"key": "ETag",
									"value": "W/\"846-f/dGNT55XT+8AOFvtJBAU2lxeR0\""
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"tracks\": [\r\n    {\r\n      \"album\": {\r\n        \"album_type\": \"single\",\r\n        \"artists\": [\r\n          {\r\n            \"href\": \"https://api.spotify.com/v1/artists/6sFIWsNpZYqfjUpaCgueju\",\r\n            \"id\": \"6sFIWsNpZYqfjUpaCgueju\",\r\n            \"name\": \"Carly Rae Jepsen\",\r\n            \"type\": \"artist\"\r\n          }\r\n        ],\r\n        \"available_markets\": [\r\n          \"AD\",\r\n          \"AR\",\r\n          \"AT\",\r\n          \"AU\",\r\n          \"BE\",\r\n          \"BG\",\r\n          \"BO\",\r\n          \"BR\",\r\n          \"CA\",\r\n          \"CH\",\r\n          \"CL\",\r\n          \"CO\",\r\n          \"CR\",\r\n          \"CY\",\r\n          \"CZ\",\r\n          \"DE\",\r\n          \"DK\",\r\n          \"DO\",\r\n          \"EC\",\r\n          \"EE\",\r\n          \"ES\",\r\n          \"FI\",\r\n          \"FR\",\r\n          \"GB\",\r\n          \"GR\",\r\n          \"GT\",\r\n          \"HK\",\r\n          \"HN\",\r\n          \"HU\",\r\n          \"ID\",\r\n          \"IE\",\r\n          \"IL\",\r\n          \"IS\",\r\n          \"IT\",\r\n          \"JP\",\r\n          \"LI\",\r\n          \"LT\",\r\n          \"LU\",\r\n          \"LV\",\r\n          \"MC\",\r\n          \"MT\",\r\n          \"MX\",\r\n          \"MY\",\r\n          \"NI\",\r\n          \"NL\",\r\n          \"NO\",\r\n          \"NZ\",\r\n          \"PA\",\r\n          \"PE\",\r\n          \"PH\",\r\n          \"PL\",\r\n          \"PT\",\r\n          \"PY\",\r\n          \"RO\",\r\n          \"SE\",\r\n          \"SG\",\r\n          \"SK\",\r\n          \"SV\",\r\n          \"TH\",\r\n          \"TR\",\r\n          \"TW\",\r\n          \"US\",\r\n          \"UY\",\r\n          \"VN\",\r\n          \"ZA\"\r\n        ],\r\n        \"href\": \"https://api.spotify.com/v1/albums/0tGPJ0bkWOUmH7MEOR77qc\",\r\n        \"id\": \"0tGPJ0bkWOUmH7MEOR77qc\",\r\n        \"images\": [\r\n          {\r\n            \"height\": 640,\r\n            \"url\": \"https://i.scdn.co/image/966ade7a8c43b72faa53822b74a899c675aaafee\",\r\n            \"width\": 640\r\n          },\r\n          {\r\n            \"height\": 300,\r\n            \"url\": \"https://i.scdn.co/image/107819f5dc557d5d0a4b216781c6ec1b2f3c5ab2\",\r\n            \"width\": 300\r\n          },\r\n          {\r\n            \"height\": 64,\r\n            \"url\": \"https://i.scdn.co/image/5a73a056d0af707b4119a883d87285feda543fbb\",\r\n            \"width\": 64\r\n          }\r\n        ],\r\n        \"name\": \"Cut To The Feeling\",\r\n        \"release_date\": \"2017-05-26\",\r\n        \"release_date_precision\": \"day\",\r\n        \"type\": \"album\"\r\n      },\r\n      \"artists\": [\r\n        {\r\n          \"href\": \"https://api.spotify.com/v1/artists/6sFIWsNpZYqfjUpaCgueju\",\r\n          \"id\": \"6sFIWsNpZYqfjUpaCgueju\",\r\n          \"name\": \"Carly Rae Jepsen\",\r\n          \"type\": \"artist\"\r\n        }\r\n      ],\r\n      \"available_markets\": [\r\n        \"AD\",\r\n        \"AR\",\r\n        \"AT\",\r\n        \"AU\",\r\n        \"BE\",\r\n        \"BG\",\r\n        \"BO\",\r\n        \"BR\",\r\n        \"CA\",\r\n        \"CH\",\r\n        \"CL\",\r\n        \"CO\",\r\n        \"CR\",\r\n        \"CY\",\r\n        \"CZ\",\r\n        \"DE\",\r\n        \"DK\",\r\n        \"DO\",\r\n        \"EC\",\r\n        \"EE\",\r\n        \"ES\",\r\n        \"FI\",\r\n        \"FR\",\r\n        \"GB\",\r\n        \"GR\",\r\n        \"GT\",\r\n        \"HK\",\r\n        \"HN\",\r\n        \"HU\",\r\n        \"ID\",\r\n        \"IE\",\r\n        \"IL\",\r\n        \"IS\",\r\n        \"IT\",\r\n        \"JP\",\r\n        \"LI\",\r\n        \"LT\",\r\n        \"LU\",\r\n        \"LV\",\r\n        \"MC\",\r\n        \"MT\",\r\n        \"MX\",\r\n        \"MY\",\r\n        \"NI\",\r\n        \"NL\",\r\n        \"NO\",\r\n        \"NZ\",\r\n        \"PA\",\r\n        \"PE\",\r\n        \"PH\",\r\n        \"PL\",\r\n        \"PT\",\r\n        \"PY\",\r\n        \"RO\",\r\n        \"SE\",\r\n        \"SG\",\r\n        \"SK\",\r\n        \"SV\",\r\n        \"TH\",\r\n        \"TR\",\r\n        \"TW\",\r\n        \"US\",\r\n        \"UY\",\r\n        \"VN\",\r\n        \"ZA\"\r\n      ],\r\n      \"duration_ms\": 207959,\r\n      \"explicit\": false,\r\n      \"href\": \"https://api.spotify.com/v1/tracks/11dFghVXANMlKmJXsNCbNl\",\r\n      \"id\": \"11dFghVXANMlKmJXsNCbNl\",\r\n      \"name\": \"Cut To The Feeling\",\r\n      \"popularity\": 63,\r\n      \"track_number\": 1,\r\n      \"type\": \"track\"\r\n    },\r\n    {\r\n      \"album\": {\r\n        \"album_type\": \"album\",\r\n        \"artists\": [\r\n          {\r\n            \"href\": \"https://api.spotify.com/v1/artists/6sFIWsNpZYqfjUpaCgueju\",\r\n            \"id\": \"6sFIWsNpZYqfjUpaCgueju\",\r\n            \"name\": \"Carly Rae Jepsen\",\r\n            \"type\": \"artist\"\r\n          }\r\n        ],\r\n        \"available_markets\": [\r\n          \"AD\",\r\n          \"AR\",\r\n          \"AT\",\r\n          \"AU\",\r\n          \"BE\",\r\n          \"BG\",\r\n          \"BO\",\r\n          \"BR\",\r\n          \"CA\",\r\n          \"CH\",\r\n          \"CL\",\r\n          \"CO\",\r\n          \"CR\",\r\n          \"CY\",\r\n          \"CZ\",\r\n          \"DE\",\r\n          \"DK\",\r\n          \"DO\",\r\n          \"EC\",\r\n          \"EE\",\r\n          \"ES\",\r\n          \"FI\",\r\n          \"FR\",\r\n          \"GB\",\r\n          \"GR\",\r\n          \"GT\",\r\n          \"HK\",\r\n          \"HN\",\r\n          \"HU\",\r\n          \"ID\",\r\n          \"IE\",\r\n          \"IL\",\r\n          \"IS\",\r\n          \"IT\",\r\n          \"JP\",\r\n          \"LI\",\r\n          \"LT\",\r\n          \"LU\",\r\n          \"LV\",\r\n          \"MC\",\r\n          \"MT\",\r\n          \"MX\",\r\n          \"MY\",\r\n          \"NI\",\r\n          \"NL\",\r\n          \"NO\",\r\n          \"NZ\",\r\n          \"PA\",\r\n          \"PE\",\r\n          \"PH\",\r\n          \"PL\",\r\n          \"PT\",\r\n          \"PY\",\r\n          \"RO\",\r\n          \"SE\",\r\n          \"SG\",\r\n          \"SK\",\r\n          \"SV\",\r\n          \"TH\",\r\n          \"TR\",\r\n          \"TW\",\r\n          \"US\",\r\n          \"UY\",\r\n          \"VN\",\r\n          \"ZA\"\r\n        ],\r\n        \"href\": \"https://api.spotify.com/v1/albums/6SSSF9Y6MiPdQoxqBptrR2\",\r\n        \"id\": \"6SSSF9Y6MiPdQoxqBptrR2\",\r\n        \"images\": [\r\n          {\r\n            \"height\": 640,\r\n            \"url\": \"https://i.scdn.co/image/2fb20bf4c1fb29b503bfc21516ff4b1a334b6372\",\r\n            \"width\": 640\r\n          },\r\n          {\r\n            \"height\": 300,\r\n            \"url\": \"https://i.scdn.co/image/a7b076ed5aa0746a21bc71ab7d2b6ed80dd3ebfe\",\r\n            \"width\": 300\r\n          },\r\n          {\r\n            \"height\": 64,\r\n            \"url\": \"https://i.scdn.co/image/b1d4c7643cf17c06b967b50623d7d93725b31de5\",\r\n            \"width\": 64\r\n          }\r\n        ],\r\n        \"name\": \"Kiss\",\r\n        \"release_date\": \"2012-01-01\",\r\n        \"release_date_precision\": \"day\",\r\n        \"type\": \"album\"\r\n      },\r\n      \"artists\": [\r\n        {\r\n          \"href\": \"https://api.spotify.com/v1/artists/6sFIWsNpZYqfjUpaCgueju\",\r\n          \"id\": \"6sFIWsNpZYqfjUpaCgueju\",\r\n          \"name\": \"Carly Rae Jepsen\",\r\n          \"type\": \"artist\"\r\n        }\r\n      ],\r\n      \"available_markets\": [\r\n        \"AD\",\r\n        \"AR\",\r\n        \"AT\",\r\n        \"AU\",\r\n        \"BE\",\r\n        \"BG\",\r\n        \"BO\",\r\n        \"BR\",\r\n        \"CA\",\r\n        \"CH\",\r\n        \"CL\",\r\n        \"CO\",\r\n        \"CR\",\r\n        \"CY\",\r\n        \"CZ\",\r\n        \"DE\",\r\n        \"DK\",\r\n        \"DO\",\r\n        \"EC\",\r\n        \"EE\",\r\n        \"ES\",\r\n        \"FI\",\r\n        \"FR\",\r\n        \"GB\",\r\n        \"GR\",\r\n        \"GT\",\r\n        \"HK\",\r\n        \"HN\",\r\n        \"HU\",\r\n        \"ID\",\r\n        \"IE\",\r\n        \"IL\",\r\n        \"IS\",\r\n        \"IT\",\r\n        \"JP\",\r\n        \"LI\",\r\n        \"LT\",\r\n        \"LU\",\r\n        \"LV\",\r\n        \"MC\",\r\n        \"MT\",\r\n        \"MX\",\r\n        \"MY\",\r\n        \"NI\",\r\n        \"NL\",\r\n        \"NO\",\r\n        \"NZ\",\r\n        \"PA\",\r\n        \"PE\",\r\n        \"PH\",\r\n        \"PL\",\r\n        \"PT\",\r\n        \"PY\",\r\n        \"RO\",\r\n        \"SE\",\r\n        \"SG\",\r\n        \"SK\",\r\n        \"SV\",\r\n        \"TH\",\r\n        \"TR\",\r\n        \"TW\",\r\n        \"US\",\r\n        \"UY\",\r\n        \"VN\",\r\n        \"ZA\"\r\n      ],\r\n      \"duration_ms\": 193400,\r\n      \"explicit\": false,\r\n      \"href\": \"https://api.spotify.com/v1/tracks/20I6sIOMTCkB6w7ryavxtO\",\r\n      \"id\": \"20I6sIOMTCkB6w7ryavxtO\",\r\n      \"name\": \"Call Me Maybe\",\r\n      \"popularity\": 74,\r\n      \"track_number\": 3,\r\n      \"type\": \"track\"\r\n    },\r\n    {\r\n      \"album\": {\r\n        \"album_type\": \"album\",\r\n        \"artists\": [\r\n          {\r\n            \"href\": \"https://api.spotify.com/v1/artists/6sFIWsNpZYqfjUpaCgueju\",\r\n            \"id\": \"6sFIWsNpZYqfjUpaCgueju\",\r\n            \"name\": \"Carly Rae Jepsen\",\r\n            \"type\": \"artist\"\r\n          }\r\n        ],\r\n        \"available_markets\": [\r\n          \"AD\",\r\n          \"AR\",\r\n          \"AT\",\r\n          \"AU\",\r\n          \"BE\",\r\n          \"BG\",\r\n          \"BO\",\r\n          \"BR\",\r\n          \"CA\",\r\n          \"CH\",\r\n          \"CL\",\r\n          \"CO\",\r\n          \"CR\",\r\n          \"CY\",\r\n          \"CZ\",\r\n          \"DE\",\r\n          \"DK\",\r\n          \"DO\",\r\n          \"EC\",\r\n          \"EE\",\r\n          \"ES\",\r\n          \"FI\",\r\n          \"FR\",\r\n          \"GB\",\r\n          \"GR\",\r\n          \"GT\",\r\n          \"HK\",\r\n          \"HN\",\r\n          \"HU\",\r\n          \"ID\",\r\n          \"IE\",\r\n          \"IL\",\r\n          \"IS\",\r\n          \"IT\",\r\n          \"JP\",\r\n          \"LI\",\r\n          \"LT\",\r\n          \"LU\",\r\n          \"LV\",\r\n          \"MC\",\r\n          \"MT\",\r\n          \"MX\",\r\n          \"MY\",\r\n          \"NI\",\r\n          \"NL\",\r\n          \"NO\",\r\n          \"NZ\",\r\n          \"PA\",\r\n          \"PE\",\r\n          \"PH\",\r\n          \"PL\",\r\n          \"PT\",\r\n          \"PY\",\r\n          \"RO\",\r\n          \"SE\",\r\n          \"SG\",\r\n          \"SK\",\r\n          \"SV\",\r\n          \"TH\",\r\n          \"TR\",\r\n          \"TW\",\r\n          \"US\",\r\n          \"UY\",\r\n          \"VN\",\r\n          \"ZA\"\r\n        ],\r\n        \"href\": \"https://api.spotify.com/v1/albums/1DFixLWuPkv3KT3TnV35m3\",\r\n        \"id\": \"1DFixLWuPkv3KT3TnV35m3\",\r\n        \"images\": [\r\n          {\r\n            \"height\": 640,\r\n            \"url\": \"https://i.scdn.co/image/3f65c5400c7f24541bfd48e60f646e6af4d6c666\",\r\n            \"width\": 640\r\n          },\r\n          {\r\n            \"height\": 300,\r\n            \"url\": \"https://i.scdn.co/image/ff347680d9e62ccc144926377d4769b02a1024dc\",\r\n            \"width\": 300\r\n          },\r\n          {\r\n            \"height\": 64,\r\n            \"url\": \"https://i.scdn.co/image/c836e14a8ceca89e18012cab295f58ceeba72594\",\r\n            \"width\": 64\r\n          }\r\n        ],\r\n        \"name\": \"Emotion (Deluxe)\",\r\n        \"release_date\": \"2015-09-18\",\r\n        \"release_date_precision\": \"day\",\r\n        \"type\": \"album\"\r\n      },\r\n      \"artists\": [\r\n        {\r\n          \"href\": \"https://api.spotify.com/v1/artists/6sFIWsNpZYqfjUpaCgueju\",\r\n          \"id\": \"6sFIWsNpZYqfjUpaCgueju\",\r\n          \"name\": \"Carly Rae Jepsen\",\r\n          \"type\": \"artist\"\r\n        }\r\n      ],\r\n      \"available_markets\": [\r\n        \"AD\",\r\n        \"AR\",\r\n        \"AT\",\r\n        \"AU\",\r\n        \"BE\",\r\n        \"BG\",\r\n        \"BO\",\r\n        \"BR\",\r\n        \"CA\",\r\n        \"CH\",\r\n        \"CL\",\r\n        \"CO\",\r\n        \"CR\",\r\n        \"CY\",\r\n        \"CZ\",\r\n        \"DE\",\r\n        \"DK\",\r\n        \"DO\",\r\n        \"EC\",\r\n        \"EE\",\r\n        \"ES\",\r\n        \"FI\",\r\n        \"FR\",\r\n        \"GB\",\r\n        \"GR\",\r\n        \"GT\",\r\n        \"HK\",\r\n        \"HN\",\r\n        \"HU\",\r\n        \"ID\",\r\n        \"IE\",\r\n        \"IL\",\r\n        \"IS\",\r\n        \"IT\",\r\n        \"JP\",\r\n        \"LI\",\r\n        \"LT\",\r\n        \"LU\",\r\n        \"LV\",\r\n        \"MC\",\r\n        \"MT\",\r\n        \"MX\",\r\n        \"MY\",\r\n        \"NI\",\r\n        \"NL\",\r\n        \"NO\",\r\n        \"NZ\",\r\n        \"PA\",\r\n        \"PE\",\r\n        \"PH\",\r\n        \"PL\",\r\n        \"PT\",\r\n        \"PY\",\r\n        \"RO\",\r\n        \"SE\",\r\n        \"SG\",\r\n        \"SK\",\r\n        \"SV\",\r\n        \"TH\",\r\n        \"TR\",\r\n        \"TW\",\r\n        \"US\",\r\n        \"UY\",\r\n        \"VN\",\r\n        \"ZA\"\r\n      ],\r\n      \"duration_ms\": 251319,\r\n      \"explicit\": false,\r\n      \"href\": \"https://api.spotify.com/v1/tracks/7xGfFoTpQ2E7fRF5lN10tr\",\r\n      \"id\": \"7xGfFoTpQ2E7fRF5lN10tr\",\r\n      \"name\": \"Run Away With Me\",\r\n      \"popularity\": 50,\r\n      \"type\": \"track\"\r\n    }\r\n  ]\r\n}"
						}
					]
				},
				{
					"name": "Get track",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
								"description": "*Required*. A valid access token from the Symphonia Accounts service.\n",
								"key": "Authorization",
								"type": "text",
								"value": ""
							}
						],
						"url": {
							"raw": "{{URL}}api/v1/users/track/:{id}",
							"host": [
								"{{URL}}api"
							],
							"path": [
								"v1",
								"users",
								"track",
								":{id}"
							],
							"variable": [
								{
									"description": "*Required: * The Symphonia ID for the track.",
									"key": "{id}",
									"type": "string",
									"value": ""
								}
							]
						},
						"description": "# Description\r\n\r\nGet Symphonia catalog information for a single track identified by its unique Symphonia ID.\r\n\r\n# Response\r\n\r\nOn success, the HTTP status code in the response header is `200` OK and the response body contains a track object in JSON format. On error, the header status code is an error code and the response body contains an error object.\r\n\r\n\r\n## Track object\r\n\r\n| KEY               | VALUE TYPE                            | VALUE DESCRIPTION                                                                                                              |\r\n| ----------------- | ------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------ |\r\n| album             | an album object             | The album on which the track appears. The album object includes a link in href to full information about the album.            |\r\n| artists           | an array of artist objects | The artists who performed the track. Each artist object includes a link in href to more detailed information about the artist. |\r\n| available_markets | array of strings                      | A list of the countries in which the track can be played, identified by their ISO 3166-1 alpha-2 code.                         |\r\n| duration_ms       | integer                               | The track length in milliseconds.                                                                                              |\r\n| explicit          | Boolean                               | Whether or not the track has explicit lyrics ( true = yes it does; false = no it does not OR unknown).                         |\r\n| href              | string                                | A link to the Web API endpoint providing full details of the track.                                                            |\r\n| id                | string                                | The Symphonia ID for the track.                                                                                                |\r\n| name              | string                                | The name of the track.                                                                                                         |\r\n| popularity        | integer                               |\tThe popularity of the track. The value will be between 0 and 100, with 100 being the most popular.The popularity of a track is a value between 0 and 100, with 100 being the most popular. The popularity is calculated by algorithm and is based, in the most part, on the total number of plays the track has had and how recent those plays are.                                                                                                                                |\r\n| type              | string                                | The object type: “track”.                                                                                                      |\r\n\r\n\r\n## Request parameters"
					},
					"response": [
						{
							"name": "Get track",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "**Required**. A valid access token from the Symphonia Accounts service.\n",
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {your access token}"
									}
								],
								"url": {
									"raw": "{{URL}}api/v1/users/track/:{id}",
									"host": [
										"{{URL}}api"
									],
									"path": [
										"v1",
										"users",
										"track",
										":{id}"
									],
									"variable": [
										{
											"key": "{id}",
											"value": "11dFghVXANMlKmJXsNCbN",
											"description": "The SYmphonia ID for the track."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n    \"album\": {\n        \"album_type\": \"single\",\n        \"artists\": [\n            {\n                \"href\": \"https://api.symphonia.com/v1/artists/6sFIWsNpZYqfjUpaCgueju\",\n                \"id\": \"6sFIWsNpZYqfjUpaCgueju\",\n                \"name\": \"Carly Rae Jepsen\",\n                \"type\": \"artist\"\n            }\n        ],\n        \"available_markets\": [\n            \"AD\",\n            \"AR\",\n            \"AT\",\n            \"AU\",\n            \"BE\",\n            \"BG\",\n            \"BO\",\n            \"BR\",\n            \"CA\",\n            \"CH\",\n            \"CL\",\n            \"CO\",\n            \"CR\",\n            \"CY\",\n            \"CZ\",\n            \"DE\",\n            \"DK\",\n            \"DO\",\n            \"EC\",\n            \"EE\",\n            \"ES\",\n            \"FI\",\n            \"FR\",\n            \"GB\",\n            \"GR\",\n            \"GT\",\n            \"HK\",\n            \"HN\",\n            \"HU\",\n            \"ID\",\n            \"IE\",\n            \"IL\",\n            \"IS\",\n            \"IT\",\n            \"JP\",\n            \"LI\",\n            \"LT\",\n            \"LU\",\n            \"LV\",\n            \"MC\",\n            \"MT\",\n            \"MX\",\n            \"MY\",\n            \"NI\",\n            \"NL\",\n            \"NO\",\n            \"NZ\",\n            \"PA\",\n            \"PE\",\n            \"PH\",\n            \"PL\",\n            \"PT\",\n            \"PY\",\n            \"RO\",\n            \"SE\",\n            \"SG\",\n            \"SK\",\n            \"SV\",\n            \"TH\",\n            \"TR\",\n            \"TW\",\n            \"US\",\n            \"UY\",\n            \"VN\",\n            \"ZA\"\n        ],\n        \"href\": \"https://api.symphonia.com/v1/albums/0tGPJ0bkWOUmH7MEOR77qc\",\n        \"id\": \"0tGPJ0bkWOUmH7MEOR77qc\",\n        \"images\": [\n            {\n                \"height\": 640,\n                \"url\": \"https://i.scdn.co/image/966ade7a8c43b72faa53822b74a899c675aaafee\",\n                \"width\": 640\n            },\n            {\n                \"height\": 300,\n                \"url\": \"https://i.scdn.co/image/107819f5dc557d5d0a4b216781c6ec1b2f3c5ab2\",\n                \"width\": 300\n            },\n            {\n                \"height\": 64,\n                \"url\": \"https://i.scdn.co/image/5a73a056d0af707b4119a883d87285feda543fbb\",\n                \"width\": 64\n            }\n        ],\n        \"name\": \"Cut To The Feeling\",\n        \"release_date\": \"2017-05-26\",\n        \"release_date_precision\": \"day\",\n        \"type\": \"album\"\n    },\n    \"artists\": [\n        {\n            \n            \"href\": \"https://api.symphonia.com/v1/artists/6sFIWsNpZYqfjUpaCgueju\",\n            \"id\": \"6sFIWsNpZYqfjUpaCgueju\",\n            \"name\": \"Carly Rae Jepsen\",\n            \"type\": \"artist\"\n        }\n    ],\n    \"available_markets\": [\n        \"AD\",\n        \"AR\",\n        \"AT\",\n        \"AU\",\n        \"BE\",\n        \"BG\",\n        \"BO\",\n        \"BR\",\n        \"CA\",\n        \"CH\",\n        \"CL\",\n        \"CO\",\n        \"CR\",\n        \"CY\",\n        \"CZ\",\n        \"DE\",\n        \"DK\",\n        \"DO\",\n        \"EC\",\n        \"EE\",\n        \"ES\",\n        \"FI\",\n        \"FR\",\n        \"GB\",\n        \"GR\",\n        \"GT\",\n        \"HK\",\n        \"HN\",\n        \"HU\",\n        \"ID\",\n        \"IE\",\n        \"IL\",\n        \"IS\",\n        \"IT\",\n        \"JP\",\n        \"LI\",\n        \"LT\",\n        \"LU\",\n        \"LV\",\n        \"MC\",\n        \"MT\",\n        \"MX\",\n        \"MY\",\n        \"NI\",\n        \"NL\",\n        \"NO\",\n        \"NZ\",\n        \"PA\",\n        \"PE\",\n        \"PH\",\n        \"PL\",\n        \"PT\",\n        \"PY\",\n        \"RO\",\n        \"SE\",\n        \"SG\",\n        \"SK\",\n        \"SV\",\n        \"TH\",\n        \"TR\",\n        \"TW\",\n        \"US\",\n        \"UY\",\n        \"VN\",\n        \"ZA\"\n    ],\n    \"duration_ms\": 207959,\n    \"explicit\": false,\n    \"href\": \"https://api.symphonia.com/v1/tracks/11dFghVXANMlKmJXsNCbNl\",\n    \"id\": \"11dFghVXANMlKmJXsNCbNl\",\n    \"is_local\": false,\n    \"name\": \"Cut To The Feeling\",\n    \"popularity\": 63,\n    \"type\": \"track\"\n}"
						}
					]
				},
				{
					"name": "Add track",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "",
								"description": "*Required*. A valid access token from the Symphonia Accounts service",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "audio/mpeg",
								"description": "*Required*. The content type of the request body:",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{URL}}api/v1/users/tracks",
							"host": [
								"{{URL}}api"
							],
							"path": [
								"v1",
								"users",
								"tracks"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Users",
			"item": [
				{
					"name": "Register",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e3622365-7b25-4c71-b2be-a9f4316ed5c2",
								"exec": [
									"pm.environment.set(\"jwt\", pm.response.json().token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text",
								"description": "<em>Required </em> The content type of the request body:"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}api/v1/users/signup",
							"host": [
								"{{URL}}api"
							],
							"path": [
								"v1",
								"users",
								"signup"
							]
						},
						"description": "# Description\r\n\r\nRegister a new user into the application providing his/her essential information\r\n\r\n## Response Format\r\n\r\nOn success, the HTTP status code in the response header is 201 Created. The response body contains the token that will be used to authorize the user and user object. On error, the header status code is an error code and the response body contains an error object. \r\n\r\n\r\n### user object \r\n\r\n<table>\r\n  <thead>\r\n    <tr>\r\n      <th>Key</th>\r\n      <th>Value Type</th>\r\n      <th>Value Description</th>\r\n    </tr>\r\n  </thead>\r\n  <tbody>\r\n    <tr>\r\n      <td>name</td>\r\n      <td>string</td>\r\n      <td>The name that the user provided for himself.</td>\r\n    </tr>\r\n    <tr>\r\n      <td>email</td>\r\n      <td>string</td>\r\n      <td>The email the user provided.</td>\r\n    </tr>\r\n    <tr>\r\n      <td>_id</td>\r\n      <td>string</td>\r\n      <td>The Symphonia ID used to identify the user in our application.</td>\r\n    </tr>\r\n  </tbody>\r\n</table>\r\n\r\n## Request parameters\r\n\r\n### Body parameters\r\n\r\n<table>\r\n  <thead>\r\n    <tr>\r\n      <th>Key</th>\r\n      <th>Value Type</th>\r\n      <th>Value Description</th>\r\n    </tr>\r\n  </thead>\r\n  <tbody>\r\n    <tr>\r\n      <td>name</td>\r\n      <td>string</td>\r\n      <td><em>Required: </em> The name that the user provided for himself.</td>\r\n    </tr>\r\n    <tr>\r\n      <td>email</td>\r\n      <td>string</td>\r\n      <td><em>Required: </em> The email the user provided.</td>\r\n    </tr>\r\n    <tr>\r\n      <td>emailConfirm</td>\r\n      <td>string</td>\r\n      <td><em>Required: </em> The email confirmation of the user provided email.</td>\r\n    </tr>\r\n    <tr>\r\n      <td>password</td>\r\n      <td>string</td>\r\n      <td><em>Required: </em> The user password.</td>\r\n    </tr>\r\n    <tr>\r\n      <td>passwordConfirm</td>\r\n      <td>string</td>\r\n      <td><em>Required: </em> The user password confirmation.</td>\r\n    </tr>\r\n    <tr>\r\n      <td>DateOfBirth</td>\r\n      <td>date</td>\r\n      <td><em>Required: </em> The date of birth for the user.</td>\r\n    </tr>\r\n    <tr>\r\n      <td>Gender</td>\r\n      <td>string</td>\r\n      <td><em>Required: </em> The gender of the user should be <code>\"male\"</code> or <code>\"female\"</code> only.</td>\r\n    </tr>\r\n  </tbody>\r\n</table>"
					},
					"response": [
						{
							"name": "Register",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text",
										"description": "<em>Required if URIs are passed in the request body, otherwise ignored.</em> The content type of the request body:"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"user\",\n    \"email\": \"user12@test.com\",\n    \"emailConfirm\": \"user12@test.com\",\n    \"password\": \"password\",\n    \"passwordConfirm\": \"password\",\n    \"DateOfBirth\": \"12-12-1980\",\n    \"gender\": \"male\"\n    \n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}api/v1/users/signup",
									"host": [
										"{{URL}}api"
									],
									"path": [
										"v1",
										"users",
										"signup"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-DNS-Prefetch-Control",
									"value": "off"
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=15552000; includeSubDomains"
								},
								{
									"key": "X-Download-Options",
									"value": "noopen"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-XSS-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "X-RateLimit-Limit",
									"value": "1000"
								},
								{
									"key": "X-RateLimit-Remaining",
									"value": "999"
								},
								{
									"key": "Date",
									"value": "Sat, 07 Mar 2020 09:02:58 GMT"
								},
								{
									"key": "X-RateLimit-Reset",
									"value": "1583574532"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "301"
								},
								{
									"key": "ETag",
									"value": "W/\"12d-k7Ot6Sxiu0h6Z33P0Pg8VmqmvNQ\""
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"status\": \"success\",\n    \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjVlNjM2MzQzMWFmZDY5MGZlMDY5ODU2MCIsImlhdCI6MTU4MzU3MTc3OSwiZXhwIjoxNTgzNTc1Mzc5fQ.vLNE0dCGYItCOl6dJl3-QOtqV2ZZ8zNDdc9jla76ijg\",\n    \"data\": {\n        \"user\": {\n            \"_id\": \"5e6363431afd690fe0698560\",\n            \"email\": \"user12@test.com\",\n            \"name\": \"user\",\n            \"__v\": 0\n        }\n    }\n}"
						}
					]
				},
				{
					"name": "login",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "62db18ff-cd68-4678-ae37-f8e321474c96",
								"exec": [
									"pm.environment.set(\"jwt\", pm.response.json().token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json",
								"description": "<em>Required </em> The content type of the request body:"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}api/v1/users/login",
							"host": [
								"{{URL}}api"
							],
							"path": [
								"v1",
								"users",
								"login"
							]
						},
						"description": "# Description\r\n\r\nlogin the Symphonia user into the application providing his/her registered email\r\n\r\n# Response Format\r\n\r\nOn success, the HTTP status code in the response header is `200`. The response body contains the token that will be used to authorize the user and user object. On error, the header status code is an error code and the response body contains an error object. \r\n\r\n# Example\r\n\r\n## user object \r\n\r\n<table>\r\n  <thead>\r\n    <tr>\r\n      <th>Key</th>\r\n      <th>Value Type</th>\r\n      <th>Value Description</th>\r\n    </tr>\r\n  </thead>\r\n  <tbody>\r\n    <tr>\r\n      <td>name</td>\r\n      <td>string</td>\r\n      <td>The name that the user provided for himself.</td>\r\n    </tr>\r\n    <tr>\r\n      <td>email</td>\r\n      <td>string</td>\r\n      <td>The email the user provided.</td>\r\n    </tr>\r\n    <tr>\r\n      <td>_id</td>\r\n      <td>string</td>\r\n      <td>The Symphonia ID used to identify the user in our application.</td>\r\n    </tr>\r\n  </tbody>\r\n</table>\r\n\r\n# Request parameters\r\n\r\n## Body parameters\r\n\r\n<table>\r\n  <thead>\r\n    <tr>\r\n      <th>Key</th>\r\n      <th>Value Type</th>\r\n      <th>Value Description</th>\r\n    </tr>\r\n  </thead>\r\n  <tbody>\r\n    <tr>\r\n      <td>email</td>\r\n      <td>string</td>\r\n      <td><em>Required: </em> The email the user provided.</td>\r\n    </tr>\r\n    <tr>\r\n      <td>password</td>\r\n      <td>string</td>\r\n      <td><em>Required: </em> The user password.</td>\r\n    </tr>\r\n  </tbody>\r\n</table>"
					},
					"response": [
						{
							"name": "login",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"email\": \"user12@test.com\",\n\t\"password\": \"password\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}api/v1/users/login",
									"host": [
										"{{URL}}api"
									],
									"path": [
										"v1",
										"users",
										"login"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-DNS-Prefetch-Control",
									"value": "off"
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=15552000; includeSubDomains"
								},
								{
									"key": "X-Download-Options",
									"value": "noopen"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-XSS-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "X-RateLimit-Limit",
									"value": "1000"
								},
								{
									"key": "X-RateLimit-Remaining",
									"value": "998"
								},
								{
									"key": "Date",
									"value": "Sat, 07 Mar 2020 09:31:01 GMT"
								},
								{
									"key": "X-RateLimit-Reset",
									"value": "1583574532"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "301"
								},
								{
									"key": "ETag",
									"value": "W/\"12d-dlVR/N5MM4We3S9IEVN5JTbld7Q\""
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"status\": \"success\",\n    \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjVlNjM2MzQzMWFmZDY5MGZlMDY5ODU2MCIsImlhdCI6MTU4MzU3MzQ2MiwiZXhwIjoxNTgzNTc3MDYyfQ.P_nm8thbkOzKBnbpqkBL1_SuRzZxt5eFFFN0aZ6AbBQ\",\n    \"data\": {\n        \"user\": {\n            \"_id\": \"5e6363431afd690fe0698560\",\n            \"email\": \"user12@test.com\",\n            \"name\": \"user\",\n            \"__v\": 0\n        }\n    }\n}"
						}
					]
				},
				{
					"name": "Get current user's profile",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
								"description": "*Required*. A valid access token from the Symphonia Accounts service.\n",
								"key": "Authorization",
								"type": "text",
								"value": ""
							}
						],
						"url": {
							"raw": "{{URL}}api/v1/me",
							"host": [
								"{{URL}}api"
							],
							"path": [
								"v1",
								"me"
							]
						},
						"description": "# Description\r\n\r\nGet detailed profile information about the current user.\r\n\r\n\r\n# Response Format\r\n\r\nOn success, the HTTP status code in the response header is 200 OK and the response body contains a user object in JSON format. On error, the header status code is an error code and the response body contains an error object. When requesting fields that you don’t have the user’s authorization to access, it will return error 403 Forbidden.\r\n\r\n\r\n# Example\r\n\r\n## Response object\r\n\r\n|  KEY |  VALUE TYPE |VALUE DESCRIPTION|\r\n|---|---|---|\r\n| name  | string  | The name of user   |  \r\n| gender | string  | The gender of user  |  \r\n|  dateOfBirth | Date  |  The user’s birth date. |\r\n|  country | String  |  The country of the user, as set in the user’s account profile. An ISO 3166-1 alpha-2 country code. |\r\n| email |  string |  The user’s email address, as entered by the user when creating their account.|  \r\n| followers  |  An array of followers object | Information about the followers of the user.  |  \r\n| href  | string  | Known external URLs for this user.  |  \r\n| id  | string  |  The Synphonia user ID for the user. |  \r\n|  images | an image object  |  The user’s profile image. |  \r\n| product  | string  | The user’s Symphonia subscription level: “premium”, “free”, etc. (The subscription level “open” can be considered the same as “free”.) This field is only available when the current user has granted access to the user-read-private scope.  |\r\n| type  | string  | The object type: `“user”`  |\r\n\r\n# Request parameters"
					},
					"response": [
						{
							"name": "Get current user's profile",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {your access token}",
										"description": "**Required**. A valid access token from the Symphonia Accounts service.\n",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{URL}}api/v1/me",
									"host": [
										"{{URL}}api"
									],
									"path": [
										"v1",
										"me"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-DNS-Prefetch-Control",
									"value": "off"
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=15552000; includeSubDomains"
								},
								{
									"key": "X-Download-Options",
									"value": "noopen"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-XSS-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "X-RateLimit-Limit",
									"value": "1000"
								},
								{
									"key": "X-RateLimit-Remaining",
									"value": "997"
								},
								{
									"key": "Date",
									"value": "Thu, 05 Mar 2020 21:54:23 GMT"
								},
								{
									"key": "X-RateLimit-Reset",
									"value": "1583446448"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "2068"
								},
								{
									"key": "ETag",
									"value": "W/\"814-UfugmCxBCP4GiZ2MTX9mPsOAJYQ\""
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n\t\"name\": \"Ahmed Alaa\",\n\t\"gender\":\"male\",\n\t\"dateOfBirth\":\"2-2-1980\",\n\t\"country\": \"EG\",\n\t\"email\":\"user12@test.com\",\n\t\"followers\": {\"href\":null,\"total\":3829},\n\t\"href\":\"http://symphonia.com/api/v1/users/IWE832ND28YFOF9230\",\n\t\"_id\":\"IWE832ND28YFOF9230\"\n\t,\"images\":[\n\t\t{\n\t\t\t\"height\":900,\n\t\t\t\"url\":\"https://fbcdn-profile-a.akamaihd.net/hprofile-ak-frc3/t1.0-1/1970403_10152215092574354_1798272330_n.jpg\",\n\t\t\t\"width\":800\n\t\t}\n\t\t\n\t\t],\n\t\"product\":\"premium\",\n\t\"type\": \"user\"\n}"
						}
					]
				},
				{
					"name": "Public_Profile",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
								"key": "Authorization",
								"type": "text",
								"value": "",
								"description": "*Required*. A valid access token from the Symphonia Accounts service."
							}
						],
						"url": {
							"raw": "{{URL}}api/v1/users/:{user_id}",
							"host": [
								"{{URL}}api"
							],
							"path": [
								"v1",
								"users",
								":{user_id}"
							],
							"variable": [
								{
									"key": "{user_id}",
									"value": "",
									"description": "*Required*. The Symphonia ID for the user."
								}
							]
						},
						"description": "## Get a User's Profile\r\n Get public profile information about a Symphonia user.\r\n\r\n## Response Format\r\nOn success, the HTTP status code in the response header is 200 OK and the response body contains a user object in JSON format. On error, the header status code is an error code and the response body contains an error object. If a user with that user_id doesn’t exist, the status code is 404 NOT FOUND.\r\n\r\n# Example\r\n\r\n## Response object\r\n\r\n|  KEY |  VALUE TYPE |VALUE DESCRIPTION|\r\n|---|---|---|\r\n| name  | string  | The name of user   |  \r\n| gender | string  | The gender of user  |  \r\n|  dateOfBirth | Date  |  The user’s birth date. |\r\n|  country | String  |  The country of the user, as set in the user’s account profile. An ISO 3166-1 alpha-2 country code. |\r\n| email |  string |  The user’s email address, as entered by the user when creating their account.|  \r\n| followers  |  An array of followers object | Information about the followers of the user.  |  \r\n| href  | string  | Known external URLs for this user.  |  \r\n| id  | string  |  The Synphonia user ID for the user. |  \r\n|  images | an image object  |  The user’s profile image. |  \r\n| product  | string  | The user’s Symphonia subscription level: “premium”, “free”, etc. (The subscription level “open” can be considered the same as “free”.) This field is only available when the current user has granted access to the user-read-private scope.  |\r\n| type  | string  | The object type: `“user”`  |\r\n\r\n\r\n## Request Parameters"
					},
					"response": [
						{
							"name": "Public_Profile",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {your access token}",
										"description": "**Required**. valid jwt token from Symphonia server"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{URL}}api/v1/users/:{user_id}",
									"host": [
										"{{URL}}api"
									],
									"path": [
										"v1",
										"users",
										":{user_id}"
									],
									"variable": [
										{
											"key": "{user_id}",
											"value": "**Required**. The Symphonia ID for the user."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n    \"name\": \"Ahmed Alaa\",\n    \"gender\": \"male\",\n    \"dateOfBirth\": \"2-2-1980\",\n    \"country\": \"EG\",\n    \"email\": \"user12@test.com\",\n    \"followers\": {\n        \"href\": null,\n        \"total\": 3829\n    },\n    \"href\": \"http://symphonia.com/api/v1/users/IWE832ND28YFOF9230\",\n    \"_id\": \"IWE832ND28YFOF9230\",\n    \"images\": [\n        {\n            \"height\": 900,\n            \"url\": \"https://fbcdn-profile-a.akamaihd.net/hprofile-ak-frc3/t1.0-1/1970403_10152215092574354_1798272330_n.jpg\",\n            \"width\": 800\n        }\n    ],\n    \"product\": \"premium\",\n    \"type\": \"user\"\n}"
						}
					]
				},
				{
					"name": "Forgot Password",
					"request": {
						"method": "POST",
						"header": [
							{
								"description": "<em>Required </em> The content type of the request body:",
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}api/v1/users/forgotpassword",
							"host": [
								"{{URL}}api"
							],
							"path": [
								"v1",
								"users",
								"forgotpassword"
							]
						},
						"description": "# Description\r\n\r\nwhen a user forgets his password he provides his email so we can help him get into his account.\r\n\r\n# Response Format\r\n\r\nOn success, the HTTP status code in the response header is `200`. The response body contains a message telling the user to check his email inbox. On error, the header status code is an error code and the response body contains an error object. \r\n\r\n\r\n# Request parameters\r\n\r\n## Body parameters\r\n\r\n<table>\r\n  <thead>\r\n    <tr>\r\n      <th>Key</th>\r\n      <th>Value Type</th>\r\n      <th>Value Description</th>\r\n    </tr>\r\n  </thead>\r\n  <tbody>\r\n    <tr>\r\n      <td>email</td>\r\n      <td>string</td>\r\n      <td><em>Required: </em> The registered user email in Symphonia application.</td>\r\n    </tr>\r\n  </tbody>\r\n</table>"
					},
					"response": [
						{
							"name": "Forgot_Password",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"email\": \"user12@test.com\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}api/v1/users/forgotpassword",
									"host": [
										"{{URL}}api"
									],
									"path": [
										"v1",
										"users",
										"forgotpassword"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n\t\"status\": \"success\",\n\t\"message\": \"Token sent to Email\"\n}"
						}
					]
				},
				{
					"name": "Reset_Password",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json",
								"description": "<em>Required </em> The content type of the request body:"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}api/v1/users/resetpassword/:{token}",
							"host": [
								"{{URL}}api"
							],
							"path": [
								"v1",
								"users",
								"resetpassword",
								":{token}"
							],
							"variable": [
								{
									"key": "{token}",
									"value": "",
									"description": "*required: *  A valid Token that the server sent it to the user email."
								}
							]
						},
						"description": "# Description\r\n\r\nThe user using the provided token can send the new password for the account to be set.\r\n\r\n# Response Format\r\n\r\nOn success, the HTTP status code in the response header is `200`. The response body contains the access token for the user. On error, the header status code is an error code and the response body contains an error object. \r\n\r\n\r\n# Request parameters\r\n\r\n## Body parameters\r\n\r\n<table>\r\n  <thead>\r\n    <tr>\r\n      <th>Key</th>\r\n      <th>Value Type</th>\r\n      <th>Value Description</th>\r\n    </tr>\r\n  </thead>\r\n  <tbody>\r\n    <tr>\r\n      <td>password</td>\r\n      <td>string</td>\r\n      <td><em>Required: </em> The new account password.</td>\r\n    </tr>\r\n    <tr>\r\n      <td>passwordConfirm</td>\r\n      <td>string</td>\r\n      <td><em>Required: </em> The new account password confirmation.</td>\r\n    </tr>\r\n  </tbody>\r\n</table>"
					},
					"response": [
						{
							"name": "Reset Password",
							"originalRequest": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"password\": \"Newpassword\",\n\t\"passwordConfirm\": \"Newpassword\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}api/v1/users/resetpassword/:{token}",
									"host": [
										"{{URL}}api"
									],
									"path": [
										"v1",
										"users",
										"resetpassword",
										":{token}"
									],
									"variable": [
										{
											"key": "{token}",
											"value": "JzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MD",
											"description": "A valid Token that the server sent it to the user email"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n\t\n\t\"status\": \"success\",\n\t\"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c\"\n}"
						}
					]
				},
				{
					"name": "Apply_Artist",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
								"key": "Authorization",
								"value": "",
								"type": "text",
								"description": "*Required*. A valid access token from the Symphonia Accounts service."
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text",
								"description": "<em>Required </em> The content type of the request body:"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{URL}}api/v1/users/applyartist",
							"host": [
								"{{URL}}api"
							],
							"path": [
								"v1",
								"users",
								"applyartist"
							]
						}
					},
					"response": [
						{
							"name": "Apply_Artist",
							"originalRequest": {
								"method": "PATCH",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "**Required**. valid jwt token from Symphonia server",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"type\": \"artist\"\n}"
								},
								"url": {
									"raw": "{{URL}}api/v1/users/applyartist",
									"host": [
										"{{URL}}api"
									],
									"path": [
										"v1",
										"users",
										"applyartist"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n\t\"status\": \"succes\",\n\t\"message\": \"You are now an artist\"\n}\n\n\n"
						}
					]
				},
				{
					"name": "Google-OAuth",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{URL}}api/v1/users/auth/google",
							"host": [
								"{{URL}}api"
							],
							"path": [
								"v1",
								"users",
								"auth",
								"google"
							]
						}
					},
					"response": [
						{
							"name": "Google-OAuth",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{URL}}api/v1/users/auth/google",
									"host": [
										"{{URL}}api"
									],
									"path": [
										"v1",
										"users",
										"auth",
										"google"
									]
								}
							},
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n\t\"status\": \"success\",\n\t\"message\": \"Authenticated with google\"\n}"
						}
					]
				},
				{
					"name": "Facebook-Auth",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}api/v1/users/auth/facebook",
							"host": [
								"{{URL}}api"
							],
							"path": [
								"v1",
								"users",
								"auth",
								"facebook"
							]
						}
					},
					"response": [
						{
							"name": "Facebook-Auth",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}api/v1/users/auth/facebook",
									"host": [
										"{{URL}}api"
									],
									"path": [
										"v1",
										"users",
										"auth",
										"facebook"
									]
								}
							},
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n    \"status\": \"success\",\n    \"message\": \"Authenticated with facebook\"\n}"
						}
					]
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"protocolProfileBehavior": {}
}